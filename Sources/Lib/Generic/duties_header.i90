! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#ifdef __GFORTRAN__
#define paste(a) a
#define concat(a,b) paste(a)b
#define reconcat(a,b) paste(a)b
#else
#define paste(a,b) a ## b
#define concat(a,b) paste(a,b)
#define reconcat(a,b) paste(a,b)
#endif

#ifdef task_01 
integer(ip), parameter :: concat(duties,task_01) =  1 
#endif
#ifdef task_02 
integer(ip), parameter :: concat(duties,task_02) =  2 
#endif
#ifdef task_03 
integer(ip), parameter :: concat(duties,task_03) =  3 
#endif
#ifdef task_04 
integer(ip), parameter :: concat(duties,task_04) =  4 
#endif
#ifdef task_05 
integer(ip), parameter :: concat(duties,task_05) =  5 
#endif

  type concat(duties,_t)
     private
     logical :: assigned(10) = .false.
  contains
procedure  :: assign        => concat(duties,_assign)
generic    :: assignment(=) => assign
#ifdef task_01 
procedure  :: concat(assign_,task_01) => reconcat(duties,concat(_assign_,task_01))
#endif
#ifdef task_02 
procedure  :: concat(assign_,task_02) => reconcat(duties,concat(_assign_,task_02))
#endif
#ifdef task_03 
procedure  :: concat(assign_,task_03) => reconcat(duties,concat(_assign_,task_03))
#endif
#ifdef task_04 
procedure  :: concat(assign_,task_04) => reconcat(duties,concat(_assign_,task_04))
#endif
#ifdef task_05 
procedure  :: concat(assign_,task_05) => reconcat(duties,concat(_assign_,task_05))
#endif

#ifdef task_01 
procedure  :: concat(task_01,_is_assigned) => reconcat(concat(duties,_),concat(task_01,_is_assigned)) 
#endif
#ifdef task_02 
procedure  :: concat(task_02,_is_assigned) => reconcat(concat(duties,_),concat(task_02,_is_assigned)) 
#endif  
#ifdef task_03 
procedure  :: concat(task_03,_is_assigned) => reconcat(concat(duties,_),concat(task_03,_is_assigned)) 
#endif  
#ifdef task_04 
procedure  :: concat(task_04,_is_assigned) => reconcat(concat(duties,_),concat(task_04,_is_assigned)) 
#endif
#ifdef task_05 
procedure  :: concat(task_05,_is_assigned) => reconcat(concat(duties,_),concat(task_05,_is_assigned)) 
#endif

  end type concat(duties,_t)
