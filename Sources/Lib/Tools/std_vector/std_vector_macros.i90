! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

! See the following post for the logic underlying the use of either ## or /**/ for token concatenation using CPP
!http://stackoverflow.com/questions/39679689/concatenate-strings-in-a-macro-using-gfortran
#ifdef __GFORTRAN__
#define DERIVED_DATA_TYPE_NAME(BASE_DATA_TYPE_NAME) std_vector_/**/BASE_DATA_TYPE_NAME/**/_t
#else
#define DERIVED_DATA_TYPE_NAME(BASE_DATA_TYPE_NAME) std_vector_##BASE_DATA_TYPE_NAME##_t
#endif

#ifdef __GFORTRAN__
#define CLASS_DERIVED_DATA_TYPE_NAME(BASE_DATA_TYPE_NAME) class(/**/std_vector_/**/BASE_DATA_TYPE_NAME/**/_t)
#else
#define CLASS_DERIVED_DATA_TYPE_NAME(BASE_DATA_TYPE_NAME) class(##std_vector_##BASE_DATA_TYPE_NAME##_t)
#endif

!---------------------------------------------------------
! Macro for templated std_vector definition
! The autogenerated data types are called e.g., 
! std_vector_integer_ip, std_vector_real_rp, etc.
!--------------------------------------------------------
#define STD_VECTOR_TYPE(BASE_DATA_TYPE,BASE_DATA_TYPE_NAME)   \
type DERIVED_DATA_TYPE_NAME(BASE_DATA_TYPE_NAME)                  ;\
 private                                                          ;\
 integer(ip) :: size_     = 0                                     ;\
 integer(ip) :: capacity_ = 0                                     ;\
 BASE_DATA_TYPE, allocatable :: v(:)                              ;\
contains                                                          ;\
 procedure, non_overridable          :: push_back                 ;\
 procedure, non_overridable          :: erase                     ;\
 procedure, non_overridable          :: resize                    ;\
 procedure, non_overridable          :: shrink_to_fit             ;\
 procedure, non_overridable          :: copy                      ;\
 procedure, non_overridable          :: free                      ;\
 procedure, non_overridable          :: set                       ;\
 procedure, non_overridable          :: size => std_vector_size   ;\
 procedure, non_overridable          :: capacity                  ;\
 procedure, non_overridable          :: get                       ;\
 procedure, non_overridable, private :: get_pointer_single_entry  ;\
 procedure, non_overridable, private :: get_pointer_to_range      ;\
 procedure, non_overridable, private :: get_raw_pointer           ;\
 generic :: get_pointer => get_pointer_single_entry, get_pointer_to_range, get_raw_pointer ;\
end type                                                 ;\

#ifdef HAS_DYNAMIC_MEMORY
#define FREE_VECTOR_ENTRIES(SIZE_OR_CAPACITY_) \
    DO pos = 1, T%SIZE_OR_CAPACITY_ ;\
      CALL T%v(pos)%free()  ;\
    ENDDO                   ;\
     
#else
#define FREE_VECTOR_ENTRIES(SIZE_OR_CAPACITY_) \
    ;\
    
#endif

#define STD_VECTOR_PUSH_BACK(BASE_DATA_TYPE,BASE_DATA_TYPE_NAME)   \
SUBROUTINE push_back(T,i)                     ;\
  IMPLICIT NONE                                               ;\
  CLASS_DERIVED_DATA_TYPE_NAME(BASE_DATA_TYPE_NAME), intent(inout) :: T  ;\
  BASE_DATA_TYPE                                   , intent(in)    :: i  ;\
  BASE_DATA_TYPE, ALLOCATABLE :: v_aux(:)  ;\
  integer(ip) :: error, pos ;\
  IF(.NOT.ALLOCATED(T%v)) THEN      ;\
    ALLOCATE( T%v(1), STAT = error ) ; check( error == 0 ) ;\
    T%size_ = 1                      ;\
    T%capacity_ = 1                  ;\
    T%v(1)=i                        ;\
  ELSEIF(T%size_ < T%capacity_)THEN  ;\
    T%size_ = T%size_ + 1             ;\
    T%v(T%size_)=i                   ;\
  ELSE                              ;\
    T%capacity_ = (T%size_*3)/2+1     ;\
    ALLOCATE( v_aux(T%capacity_), STAT = error ) ; check( error == 0 ) ;\
    v_aux(1:T%size_) = T%v(1:T%size_) ;\
    FREE_VECTOR_ENTRIES(size_) \
    DEALLOCATE( T%v, STAT = error ) ; check( error == 0 ) ;\
    call move_alloc( from=v_aux, to=T%v ) ;\
    T%size_ = T%size_ + 1             ;\
    T%v(T%size_) = i                 ;\
  ENDIF                             ;\
END SUBROUTINE push_back            ;\

#define STD_VECTOR_RESIZE(BASE_DATA_TYPE,BASE_DATA_TYPE_NAME)   \
SUBROUTINE resize(T,size,i)  ;\
  IMPLICIT NONE                 ;\
  CLASS_DERIVED_DATA_TYPE_NAME(BASE_DATA_TYPE_NAME)  , intent(inout) :: T     ;\
  integer(ip)                                        , intent(in)    :: size  ;\
  BASE_DATA_TYPE                           , optional, intent(in)    :: i     ;\
  BASE_DATA_TYPE, ALLOCATABLE :: v_aux(:)  ;\
  integer(ip) :: error, pos ;\
  assert (size>=0) ;\
  IF(.NOT.ALLOCATED(T%v)) THEN ;\
    IF(size>0)THEN            ;\
      ALLOCATE( T%v(size), STAT = error ) ; check( error == 0 ) ;\
    ENDIF                     ;\
    T%size_ = size             ;\
    T%capacity_ = size         ;\
    IF(PRESENT(i))THEN        ;\
      T%v(1:size)=i           ;\
    ENDIF                     ;\
  ELSEIF(T%capacity_ >= size)THEN ;\
    IF(PRESENT(i))THEN        ;\
      T%v(T%size_+1:size)=i    ;\
    ENDIF                     ;\
    T%size_ = size             ;\
  ELSE                        ;\
    ALLOCATE( v_aux(size), STAT = error ) ; check( error == 0 ) ;\
    v_aux (1:T%size_) = T%v(1:T%size_) ;\
    FREE_VECTOR_ENTRIES(capacity_) \
    T%capacity_ = size         ;\
    DEALLOCATE( T%v, STAT = error ) ; check( error == 0 ) ;\
    call move_alloc( from=v_aux, to=T%v ) ;\
    IF(PRESENT(i))THEN        ;\
      T%v(T%size_+1:size)=i   ;\
    ENDIF                     ;\
    T%size_ = size             ;\
  ENDIF                       ;\
END SUBROUTINE                ;\

#define STD_VECTOR_SHRINK_TO_FIT(BASE_DATA_TYPE,BASE_DATA_TYPE_NAME)   \
SUBROUTINE shrink_to_fit(T)  ;\
  IMPLICIT NONE                 ;\
  CLASS_DERIVED_DATA_TYPE_NAME(BASE_DATA_TYPE_NAME)  , intent(inout) :: T  ;\
  BASE_DATA_TYPE, ALLOCATABLE :: v_aux(:)  ;\
  integer(ip) :: error, pos ;\
  assert (T%size_ <= T%capacity_) ;\
  IF( ALLOCATED(T%v) .and. T%size_ < T%capacity_ ) THEN ;\
    ALLOCATE( v_aux(T%size_), STAT = error ) ; check( error == 0 ) ;\
    v_aux (1:T%size_) = T%v(1:T%size_) ;\
    FREE_VECTOR_ENTRIES(capacity_) \
    T%capacity_ = T%size_         ;\
    DEALLOCATE( T%v, STAT = error ) ; check( error == 0 ) ;\
    call move_alloc( from=v_aux, to=T%v ) ;\
  ENDIF                       ;\
END SUBROUTINE                ;\

#define STD_VECTOR_FREE(BASE_DATA_TYPE,BASE_DATA_TYPE_NAME)   \
SUBROUTINE free(T)  ;\
  IMPLICIT NONE                 ;\
  CLASS_DERIVED_DATA_TYPE_NAME(BASE_DATA_TYPE_NAME)  , intent(inout) :: T  ;\
  integer(ip) :: error, pos ;\
  if (allocated(T%v)) then ;\
    FREE_VECTOR_ENTRIES(capacity_) \
    DEALLOCATE( T%v, STAT = error ) ; check( error == 0 ) ;\
  end if ;\
  T%size_ = 0 ;\
  T%capacity_ = 0 ;\
END SUBROUTINE  ;\

#define STD_VECTOR_ERASE(BASE_DATA_TYPE,BASE_DATA_TYPE_NAME)                  \
SUBROUTINE erase(T,pos)                     ;\
  IMPLICIT NONE                                               ;\
  CLASS_DERIVED_DATA_TYPE_NAME(BASE_DATA_TYPE_NAME), intent(inout) :: T  ;\
  integer(ip), intent(in)    :: pos  ;\
  assert ( allocated(T%v) ) ;\
  assert ( pos>=1 .and. pos<= T%size_ ) ;\
  T%v(pos:T%size_-1) = T%v(pos+1:T%size_) ;\
  T%size_ = T%size_ -1 ;\
END SUBROUTINE erase ;\

#define STD_VECTOR_COPY(BASE_DATA_TYPE,BASE_DATA_TYPE_NAME)  \
SUBROUTINE copy(T,T2)  ;\
  IMPLICIT NONE                 ;\
  CLASS_DERIVED_DATA_TYPE_NAME(BASE_DATA_TYPE_NAME)  , intent(inout) :: T   ;\
  CLASS_DERIVED_DATA_TYPE_NAME(BASE_DATA_TYPE_NAME)  , intent(in)    :: T2  ;\
  integer(ip) :: error ;\
  call T%free() ;\
  T%capacity_= T2%size_       ;\
  T%size_    = T2%size_       ;\
  ALLOCATE( T%v(T%capacity_), STAT = error ) ; check( error == 0 ) ;\
  if (allocated(T2%v)) then ;\
    if (T%size_ >0) T%v(1:T%size_) = T2%v(1:T%size_) ;\
  end if  ;\
END SUBROUTINE  ;\

#define STD_VECTOR_SET(BASE_DATA_TYPE,BASE_DATA_TYPE_NAME) \
SUBROUTINE set(T,pos,i)  ;\
  IMPLICIT NONE                 ;\
  CLASS_DERIVED_DATA_TYPE_NAME(BASE_DATA_TYPE_NAME)  , intent(inout) :: T    ;\
  integer(ip)                                        , intent(in)    :: pos  ;\
  BASE_DATA_TYPE          , intent(in)    :: i  ;\
  assert ( allocated(T%v) ) ;\
  assert ( pos>=1 .and. pos<= T%size_ ) ;\
  T%v(pos)=i ;\
END SUBROUTINE  ;\

#define STD_VECTOR_SIZE(BASE_DATA_TYPE,BASE_DATA_TYPE_NAME) \
FUNCTION std_vector_size(T) ;\
  IMPLICIT NONE                 ;\
  CLASS_DERIVED_DATA_TYPE_NAME(BASE_DATA_TYPE_NAME)  , intent(in) :: T  ;\
  integer(ip) :: std_vector_size  ;\
  std_vector_size = T%size_ ;\
END FUNCTION  ;\

#define STD_VECTOR_CAPACITY(BASE_DATA_TYPE,BASE_DATA_TYPE_NAME) \
FUNCTION capacity(T) ;\
  IMPLICIT NONE                 ;\
  CLASS_DERIVED_DATA_TYPE_NAME(BASE_DATA_TYPE_NAME)  , intent(in) :: T  ;\
  integer(ip) :: capacity  ;\
  capacity = T%capacity_ ;\
END FUNCTION  ;\

#define STD_VECTOR_GET(BASE_DATA_TYPE,BASE_DATA_TYPE_NAME) \
FUNCTION get(T,pos) ;\
  IMPLICIT NONE                 ;\
  CLASS_DERIVED_DATA_TYPE_NAME(BASE_DATA_TYPE_NAME)  , intent(in) :: T    ;\
  integer(ip)                                        , intent(in) :: pos  ;\
  BASE_DATA_TYPE :: get  ;\
  assert ( allocated(T%v) ) ;\
  assert ( pos>=1 .and. pos<= T%size_ ) ;\
  get = T%v(pos) ;\
END FUNCTION  ;\

#define STD_VECTOR_GET_POINTER_SINGLE_ENTRY(BASE_DATA_TYPE,BASE_DATA_TYPE_NAME) \
FUNCTION get_pointer_single_entry(T,pos) ;\
  IMPLICIT NONE                 ;\
  CLASS_DERIVED_DATA_TYPE_NAME(BASE_DATA_TYPE_NAME)  , target, intent(in) :: T    ;\
  integer(ip)                                                , intent(in) :: pos  ;\
  BASE_DATA_TYPE, pointer :: get_pointer_single_entry  ;\
  assert ( allocated(T%v) ) ;\
  assert ( pos>=1 .and. pos<= T%size_ ) ;\
  get_pointer_single_entry => T%v(pos) ;\
END FUNCTION  ;\

#define STD_VECTOR_GET_POINTER_TO_RANGE(BASE_DATA_TYPE,BASE_DATA_TYPE_NAME) \
FUNCTION get_pointer_to_range(T,spos,epos) ;\
  IMPLICIT NONE                 ;\
  CLASS_DERIVED_DATA_TYPE_NAME(BASE_DATA_TYPE_NAME)  , target, intent(in) :: T     ;\
  integer(ip)                                                , intent(in) :: spos  ;\
  integer(ip)                                                , intent(in) :: epos  ;\
  BASE_DATA_TYPE, pointer :: get_pointer_to_range(:)  ;\
  assert ( allocated(T%v) ) ;\
  get_pointer_to_range => T%v(spos:epos) ;\
END FUNCTION  ;\

#define STD_VECTOR_GET_RAW_POINTER(BASE_DATA_TYPE,BASE_DATA_TYPE_NAME) \
FUNCTION get_raw_pointer(T) ;\
  IMPLICIT NONE                 ;\
  CLASS_DERIVED_DATA_TYPE_NAME(BASE_DATA_TYPE_NAME), target, intent(in) :: T  ;\
  BASE_DATA_TYPE, pointer :: get_raw_pointer(:)  ;\
  get_raw_pointer => T%v(1:T%size());\
END FUNCTION  ;\

