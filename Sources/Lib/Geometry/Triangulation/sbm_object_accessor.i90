! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine object_accessor_create ( this, base_static_triangulation )
  implicit none
  class(object_accessor_t)                  , intent(inout) :: this
  class(base_static_triangulation_t), target, intent(in)    :: base_static_triangulation
  call this%free()
  this%base_static_triangulation => base_static_triangulation
  call this%first()
end subroutine object_accessor_create

subroutine object_accessor_free ( this)
  implicit none
  class(object_accessor_t), intent(inout) :: this
  this%lid = -1
  call this%vefs_object_iterator%free()
  nullify ( this%base_static_triangulation )
end subroutine object_accessor_free

subroutine object_accessor_update_vefs_object_iterator(this)
  implicit none
  class(object_accessor_t), intent(inout) :: this
  if ( .not. this%past_the_end() ) &
    this%vefs_object_iterator = this%base_static_triangulation%vefs_object%create_iterator(this%get_lid()) 
end subroutine object_accessor_update_vefs_object_iterator

subroutine object_accessor_update_faces_object_iterator(this)
  implicit none
  class(object_accessor_t), intent(inout) :: this
  if ( .not. this%past_the_end() ) &
    this%faces_object_iterator = this%base_static_triangulation%faces_object%create_iterator(this%get_lid()) 
end subroutine object_accessor_update_faces_object_iterator

subroutine object_accessor_first(this)
  implicit none
  class(object_accessor_t), intent(inout) :: this
  this%lid = 1
  call this%update_vefs_object_iterator()
  call this%update_faces_object_iterator()
end subroutine object_accessor_first

subroutine object_accessor_next(this)
  implicit none
  class(object_accessor_t), intent(inout) :: this
  this%lid = this%lid + 1
  call this%update_vefs_object_iterator()
  call this%update_faces_object_iterator()
end subroutine object_accessor_next

subroutine object_accessor_set_lid(this, lid)
  implicit none
  class(object_accessor_t), intent(inout) :: this
  integer(ip)             , intent(in)    :: lid
  this%lid = lid
  call this%update_vefs_object_iterator()
  call this%update_faces_object_iterator()
end subroutine object_accessor_set_lid

function object_accessor_past_the_end(this)
  implicit none
  class(object_accessor_t), intent(in) :: this
  logical :: object_accessor_past_the_end
  object_accessor_past_the_end = (this%lid > this%base_static_triangulation%number_objects)
end function object_accessor_past_the_end

function object_accessor_get_lid (this)
  implicit none
  class(object_accessor_t), intent(in) :: this
  integer(ip) :: object_accessor_get_lid
  object_accessor_get_lid = this%lid
end function object_accessor_get_lid

function object_accessor_get_gid (this)
  implicit none
  class(object_accessor_t), intent(in) :: this
  integer(igp) :: object_accessor_get_gid
  assert ( this%lid >= 1 .and. .not. this%past_the_end() )
  object_accessor_get_gid = this%base_static_triangulation%objects_gids(this%lid)
end function object_accessor_get_gid

function object_accessor_get_dimension (this)
  implicit none
  class(object_accessor_t), intent(in) :: this
  integer(igp) :: object_accessor_get_dimension
  assert ( this%lid >= 1 .and. .not. this%past_the_end() )
  object_accessor_get_dimension = this%base_static_triangulation%objects_dimension(this%lid)
end function object_accessor_get_dimension

function object_accessor_get_number_parts_around(this)
  implicit none
  class(object_accessor_t), intent(in) :: this
  integer(ip) :: object_accessor_get_number_parts_around
  assert ( this%lid >= 1 .and. .not. this%past_the_end() )
  object_accessor_get_number_parts_around = this%base_static_triangulation%parts_object%get_sublist_size(this%lid)
end function object_accessor_get_number_parts_around

function object_accessor_get_number_subparts_around(this)
  implicit none
  class(object_accessor_t), intent(in) :: this
  integer(ip) :: object_accessor_get_number_subparts_around
  assert ( this%lid >= 1 .and. .not. this%past_the_end() )
  object_accessor_get_number_subparts_around = this%base_static_triangulation%subparts_object%get_sublist_size(this%lid)
end function object_accessor_get_number_subparts_around

function object_accessor_create_parts_around_iterator(this)
  implicit none
  class(object_accessor_t), intent(in) :: this
  type(list_iterator_t) :: object_accessor_create_parts_around_iterator
  assert ( this%lid >= 1 .and. .not. this%past_the_end() )
  object_accessor_create_parts_around_iterator = this%base_static_triangulation%parts_object%create_iterator(this%lid)
end function object_accessor_create_parts_around_iterator

function object_accessor_create_subparts_around_iterator(this)
  implicit none
  class(object_accessor_t), intent(in) :: this
  type(list_iterator_t) :: object_accessor_create_subparts_around_iterator
  assert ( this%lid >= 1 .and. .not. this%past_the_end() )
  object_accessor_create_subparts_around_iterator = this%base_static_triangulation%subparts_object%create_iterator(this%lid)
end function object_accessor_create_subparts_around_iterator

function object_accessor_get_num_vefs(this)
  implicit none
  class(object_accessor_t), intent(in) :: this
  integer(ip) :: object_accessor_get_num_vefs
  assert ( this%lid >= 1 .and. .not. this%past_the_end() )
  object_accessor_get_num_vefs = this%base_static_triangulation%vefs_object%get_sublist_size(this%lid)
end function object_accessor_get_num_vefs

subroutine object_accessor_get_vef(this, ivef, vef)
  implicit none
  class(object_accessor_t), intent(in)    :: this
  integer(ip)             , intent(in)    :: ivef
  type(vef_accessor_t)    , intent(inout) :: vef
  assert ( this%lid >= 1 .and. .not. this%past_the_end() )
  assert ( ivef >= 1 .and. ivef <= this%get_num_vefs() )
  call vef%set_lid(this%vefs_object_iterator%get_from_current(ivef-1))
end subroutine object_accessor_get_vef

function object_accessor_get_num_faces(this)
  implicit none
  class(object_accessor_t), intent(in) :: this
  integer(ip) :: object_accessor_get_num_faces
  assert ( this%lid >= 1 .and. .not. this%past_the_end() )
  object_accessor_get_num_faces = this%base_static_triangulation%faces_object%get_sublist_size(this%lid)
end function object_accessor_get_num_faces

subroutine object_accessor_get_face(this, iface, face)
  implicit none
  class(object_accessor_t), intent(in)    :: this
  integer(ip)             , intent(in)    :: iface
  type(face_accessor_t)   , intent(inout) :: face
  assert ( this%lid >= 1 .and. .not. this%past_the_end() )
  assert ( iface >= 1 .and. iface <= this%get_num_faces() )
  call face%set_lid(this%faces_object_iterator%get_from_current(iface-1))
end subroutine object_accessor_get_face
