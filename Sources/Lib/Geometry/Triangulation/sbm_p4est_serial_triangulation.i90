! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

function p4est_serial_triangulation_get_num_reference_fes(this) 
  implicit none
  class(p4est_serial_triangulation_t), intent(in) :: this
  integer(ip) :: p4est_serial_triangulation_get_num_reference_fes
  p4est_serial_triangulation_get_num_reference_fes = 1
end function p4est_serial_triangulation_get_num_reference_fes

function p4est_serial_triangulation_get_max_num_shape_functions(this) result (num)
  implicit none
  class(p4est_serial_triangulation_t), intent(in) :: this
  integer(ip) :: num
  class(cell_iterator_t), allocatable :: cell
  call this%create_cell_iterator(cell)
  num = cell%get_num_nodes()
  call this%free_cell_iterator(cell)
end function p4est_serial_triangulation_get_max_num_shape_functions

function p4est_serial_triangulation_get_num_proper_vefs(this)
  implicit none
  class(p4est_serial_triangulation_t), intent(in) :: this
  integer(ip) :: p4est_serial_triangulation_get_num_proper_vefs
  p4est_serial_triangulation_get_num_proper_vefs = this%num_proper_vefs
end function p4est_serial_triangulation_get_num_proper_vefs

function p4est_serial_triangulation_get_num_improper_vefs(this)
  implicit none
  class(p4est_serial_triangulation_t), intent(in) :: this
  integer(ip) :: p4est_serial_triangulation_get_num_improper_vefs
  p4est_serial_triangulation_get_num_improper_vefs = this%num_improper_vefs
end function p4est_serial_triangulation_get_num_improper_vefs

function p4est_st_get_refinement_and_coarsening_flags(this)
  implicit none
  class(p4est_serial_triangulation_t), target, intent(in) :: this
  type(std_vector_integer_ip_t), pointer :: p4est_st_get_refinement_and_coarsening_flags
  p4est_st_get_refinement_and_coarsening_flags => this%refinement_and_coarsening_flags
end function p4est_st_get_refinement_and_coarsening_flags


subroutine p4est_serial_triangulation_create (this, parameters)
  implicit none
  class(p4est_serial_triangulation_t), target, intent(inout) :: this
  type(ParameterList_t)                      , intent(inout) :: parameters
  integer(ip) :: istat
  type(std_vector_integer_ip_t) :: old_lst_vefs_gids
  class(environment_t), pointer :: environment
  integer(ip) :: num_dims
  
#ifdef ENABLE_P4EST
  call this%free()
  
  istat = parameters%set(key = execution_context_key, value = serial_context) ; check(istat==0)
  call this%allocate_environment()
  environment => this%get_environment()
  call environment%create(parameters)
  
  call this%set_num_local_cells(1)
  call this%set_num_ghost_cells(0)

  ! Get num_dims from FPL
  massert(parameters%isAssignable(num_dims_key, num_dims ),'num_dims not found or un-usable.')
  istat = parameters%get(key = num_dims_key, value = num_dims); assert(istat==0)
  call this%set_num_dims(num_dims)
  
  call this%reference_fe_geo%create( topology_hex, &
                                     this%get_num_dims(), &
                                     1, &
                                     field_type_scalar, & 
                                     conformity=.true.)  
  
  if ( this%get_num_dims() == 2 ) then
    call F90_p4est_connectivity_new_unitsquare(this%p4est_connectivity)
    call F90_p4est_new(this%p4est_connectivity, this%p4est)
    call this%update_p4est_mesh()
    call this%update_topology_from_p4est_mesh()
    call this%update_lst_vefs_gids_and_cells_around(old_lst_vefs_gids)
    call old_lst_vefs_gids%free()
    call this%allocate_and_fill_x_cell_vertex_coordinates()
    call this%clear_refinement_and_coarsening_flags()
    call this%clear_cell_set_ids()
    call this%clear_vef_set_ids()
  else if ( this%get_num_dims() == 3 ) then
    call F90_p8est_connectivity_new_unitcube(this%p4est_connectivity)
    call F90_p8est_new(this%p4est_connectivity, this%p4est)
    call this%update_p4est_mesh()
    call this%update_topology_from_p4est_mesh()
    call this%update_lst_vefs_gids_and_cells_around(old_lst_vefs_gids)
    call old_lst_vefs_gids%free()
    call this%allocate_and_fill_x_cell_vertex_coordinates()
    call this%clear_refinement_and_coarsening_flags()
    call this%clear_cell_set_ids()
    call this%clear_vef_set_ids()
  end if  
#else
  call this%not_enabled_error()
#endif
end subroutine p4est_serial_triangulation_create  

subroutine p4est_serial_triangulation_refine_and_coarsen(this)
  implicit none
  class(p4est_serial_triangulation_t), intent(inout) :: this
  type(c_ptr) :: p4est_old
  
  type(std_vector_integer_ip_t) :: old_lst_vefs_gids
  integer(ip), pointer :: user_pointer(:)

#ifdef ENABLE_P4EST
  if ( this%get_num_dims() == 2 ) then
    user_pointer => this%refinement_and_coarsening_flags%get_raw_pointer()
    call F90_p4est_set_user_pointer(c_loc(user_pointer),this%p4est)
    p4est_old = c_null_ptr; call F90_p4est_copy(this%p4est,p4est_old)
    call F90_p4est_refine(this%p4est)
    call F90_p4est_coarsen(this%p4est)
    call F90_p4est_balance(this%p4est)
    call F90_p4est_update_refinement_and_coarsening_flags(p4est_old,this%p4est)
    call F90_p4est_destroy(p4est_old)
  else if ( this%get_num_dims() == 3 ) then
    user_pointer => this%refinement_and_coarsening_flags%get_raw_pointer()
    call F90_p8est_set_user_pointer(c_loc(user_pointer),this%p4est)
    p4est_old = c_null_ptr; call F90_p8est_copy(this%p4est,p4est_old)
    call F90_p8est_refine(this%p4est)
    call F90_p8est_coarsen(this%p4est)
    call F90_p8est_balance(this%p4est)
    call F90_p8est_update_refinement_and_coarsening_flags(p4est_old,this%p4est)
    call F90_p8est_destroy(p4est_old)
  end if

  call this%update_p4est_mesh()
  call this%update_topology_from_p4est_mesh()
  ! Update the num of triangulation cells
  call this%set_num_local_cells(size(this%quad_level))
  call this%update_lst_vefs_gids_and_cells_around(old_lst_vefs_gids)
  call this%allocate_and_fill_x_cell_vertex_coordinates()
  call this%update_cell_set_ids()
  call this%update_vef_set_ids(old_lst_vefs_gids)
  call old_lst_vefs_gids%free()
#else
  call this%not_enabled_error()
#endif  
  
end subroutine p4est_serial_triangulation_refine_and_coarsen

function p4est_serial_triangulation_get_ptr_vefs_x_cell(this, icell)
  implicit none
  class(p4est_serial_triangulation_t), intent(in) :: this
  integer(ip), intent(in) :: icell

  integer(ip) :: p4est_serial_triangulation_get_ptr_vefs_x_cell
  integer(ip) :: num_vefs_x_cell

  !assert (icell>= 1 .and. icell <= this%get_num_cells()+1)
  if ( this%get_num_dims() == 2 ) then
    num_vefs_x_cell = NUM_VEFS_2D
  else if ( this%get_num_dims() == 3 ) then
    num_vefs_x_cell = NUM_VEFS_3D
  end if
  p4est_serial_triangulation_get_ptr_vefs_x_cell = (icell-1)*num_vefs_x_cell+1  
  
end function p4est_serial_triangulation_get_ptr_vefs_x_cell

subroutine p4est_st_update_lst_vefs_gids_and_cells_around(this, old_lst_vefs_gids)
  implicit none
  class(p4est_serial_triangulation_t), intent(inout) :: this
  type(std_vector_integer_ip_t)      , intent(inout) :: old_lst_vefs_gids
  integer(ip) :: num_corners_x_cell, num_edges_x_cell, num_faces_x_cell
  integer(ip) :: num_edge_corners, num_face_corners, num_faces_at_corner, num_subfacets_facet, num_subedgets_edget
  integer(ip) :: icell, icell_iface, icell_jface, icell_icorner, icell_iedge
  integer(ip) :: jcell, jcell_iface, jcell_icorner, jcell_iedge
  integer(ip) :: min_cell, min_cell_int_edge, min_icorner, min_iedge, min_iface, icorner, iedge, iface
  integer(ip) :: iface_at_corner, iedge_at_corner, iface_at_edge
  integer(ip) :: edge_corner, face_corner, edge_face, flip, mortar
  integer(P4EST_F90_QLEVEL) :: jcell_iconn 
  logical :: is_proper, vef_at_boundary
  integer(ip) :: isubface, isubedge
  integer(ip) :: base_pos_icell, base_pos_min_cell
  type(std_vector_integer_ip_t) :: work_vector_cells_around
  type(std_vector_integer_ip_t) :: work_vector_improper_cells_around
  type(std_vector_integer_ip_t) :: work_vector_ivef
  type(std_vector_integer_ip_t) :: work_vector_subvef
  integer(ip) :: improper_cell_around_ivef
  integer(ip) :: improper_cell_around_subvef
  integer(ip) :: i
  integer(ip), pointer :: P4EST_2_FEMPAR_CORNER(:)
  integer(ip), pointer :: P4EST_FACES_AT_CORNER(:,:)
  integer(ip), pointer :: P4EST_FACE_CORNERS(:,:)
  integer(ip), pointer :: P4EST_OPPOSITE_CORNER(:)
  integer(ip), pointer :: P4EST_2_FEMPAR_FACE(:)
  integer(ip), pointer :: P4EST_CORNER_IN_FACE(:,:)

#ifdef ENABLE_P4EST  
  if ( this%get_num_dims() == 2 ) then
     num_corners_x_cell    =  NUM_CORNERS_2D
     num_edges_x_cell      =  0
     num_faces_x_cell      =  NUM_FACES_2D
     num_face_corners      =  NUM_FACE_CORNERS_2D
     num_faces_at_corner   =  NUM_FACES_AT_CORNER_2D
     num_subfacets_facet   =  NUM_SUBFACES_FACE_2D
     P4EST_2_FEMPAR_CORNER   => P4EST_2_FEMPAR_CORNER_2D
     P4EST_FACES_AT_CORNER   => P4EST_FACES_AT_CORNER_2D
     P4EST_FACE_CORNERS      => P4EST_FACE_CORNERS_2D
     P4EST_OPPOSITE_CORNER   => P4EST_OPPOSITE_CORNER_2D
     P4EST_2_FEMPAR_FACE     => P4EST_2_FEMPAR_FACE_2D
     P4EST_CORNER_IN_FACE    => P4EST_CORNER_IN_FACE_2D
  else if ( this%get_num_dims() == 3 ) then
     num_corners_x_cell    =  NUM_CORNERS_3D
     num_edges_x_cell      =  NUM_EDGES_3D
     num_faces_x_cell      =  NUM_FACES_3D
     num_face_corners        =  NUM_FACE_CORNERS_3D
     num_edge_corners        =  NUM_EDGE_CORNERS_3D
     num_faces_at_corner     =  NUM_FACES_AT_CORNER_3D
     num_subfacets_facet     =  NUM_SUBFACES_FACE_3D
     num_subedgets_edget     =  NUM_SUBEDGES_EDGE_3D
     P4EST_2_FEMPAR_CORNER   => P4EST_2_FEMPAR_CORNER_3D
     P4EST_FACES_AT_CORNER   => P4EST_FACES_AT_CORNER_3D
     P4EST_FACE_CORNERS      => P4EST_FACE_CORNERS_3D
     P4EST_OPPOSITE_CORNER   => P4EST_OPPOSITE_CORNER_3D
     P4EST_2_FEMPAR_FACE     => P4EST_2_FEMPAR_FACE_3D
     P4EST_CORNER_IN_FACE    => P4EST_CORNER_IN_FACE_3D
  end if

  call old_lst_vefs_gids%copy(this%lst_vefs_gids)

  call this%lst_vefs_gids%resize(0)
  call this%lst_vefs_gids%resize(this%get_ptr_vefs_x_cell(this%get_num_cells()+1)-1,-1000)

  call this%ptr_cells_around_proper_vefs%resize(1)
  call this%lst_cells_around_proper_vefs%resize(0)
  call this%ptr_cells_around_improper_vefs%resize(1)
  call this%lst_cells_around_improper_vefs%resize(0)
  call this%ptr_improper_cells_around%resize(1)
  call this%lst_improper_cells_around%resize(0)
  call this%improper_vefs_improper_cell_around_ivef%resize(0)
  call this%improper_vefs_improper_cell_around_subvef%resize(0)
  call this%proper_vefs_dim%resize(0)
  call this%improper_vefs_dim%resize(0)
  call this%proper_vefs_at_boundary%resize(0)

  this%num_proper_vefs   = 0
  this%num_improper_vefs = 0

  do icell=1, this%get_num_cells()

     do icorner=1, num_corners_x_cell
        is_proper       = .true.
        min_cell        = icell
        min_icorner     = icorner 
        vef_at_boundary = .false.

        call work_vector_cells_around%resize(0)
        call work_vector_cells_around%push_back(icell)
        call work_vector_improper_cells_around%resize(0)
        call work_vector_ivef%resize(0)
        call work_vector_subvef%resize(0)

        ! Find face neighbours
        do iface_at_corner=1, num_faces_at_corner
           icell_iface = P4EST_FACES_AT_CORNER(iface_at_corner,icorner)
           jcell_iconn = this%quad_to_face(icell_iface,icell)         

           if (this%get_num_dims() == 2) then
              call p4est_eval_connectivity(jcell_iconn, jcell_iface, flip, mortar)
           elseif (this%get_num_dims() == 3) then
              call p8est_eval_connectivity(jcell_iconn, jcell_iface, flip, mortar)
           else
              check(.false.)
           end if
           assert (flip==1) ! All cells MUST be aligned with each other

           if (mortar == -1) then ! Conformal neighbour
              jcell      = this%quad_to_quad(icell_iface,icell)+1 
              ! Check whether icell across current face is at the boundary
              if ( icell == jcell ) then
                 vef_at_boundary = .true.
                 cycle
              end if

              min_cell   = min(min_cell,jcell)
              if (min_cell == jcell) then
                 min_icorner=p4est_get_jcell_icorner(icell_iface,jcell_iface,icorner,P4EST_CORNER_IN_FACE,P4EST_FACE_CORNERS)
              end if
              call work_vector_cells_around%push_back(jcell)
           else if ( mortar >= 1 .and. mortar <= num_subfacets_facet )  then ! Double-size neighbour 
              jcell      = this%quad_to_quad(icell_iface,icell)+1

              ! Determine whether this corner is improper
              ! 1. Go to coarser neighbour and find across which subface am I neighbour
              do isubface = 1, num_subfacets_facet
                 if (this%quad_to_half(isubface,this%quad_to_quad(jcell_iface, jcell)+1)+1==icell) then
                    exit
                 end if
              end do
              assert(isubface<=num_subfacets_facet)

              ! 2. Determine which face_corner of my face am I
              do face_corner=1, num_face_corners
                 if (P4EST_FACE_CORNERS(face_corner,icell_iface) == icorner) then
                    exit
                 end if
              end do
              assert(face_corner<=num_face_corners)

              ! 3. I am improper if am either corner 1 of subface 0 or corner 0 of subface 1
              if ( face_corner /= isubface ) then
                   if (this%get_num_dims() == 3 ) then
                    ! Distinguish among the situation where the corner is within a face 
                    ! or on its boundary, i.e., on top of an edge !!!
                    if ( P4EST_OPPOSITE_CORNER_2D(isubface) == face_corner ) then
                        ! The non_proper vef is within a face
                        improper_cell_around_ivef = num_corners_x_cell+num_edges_x_cell+P4EST_2_FEMPAR_FACE(jcell_iface)
                    else
                        ! DETERMINE icell_iedge 
                        icell_iedge  = -1
                        ! Go over edges belonging to icorner
                        do iedge_at_corner=1, NUM_EDGES_AT_CORNER_3D 
                           icell_iedge = P4EST_EDGES_AT_CORNER_3D(iedge_at_corner,icorner)
                           ! Go over faces belonging to iedge
                           do iface_at_edge=1, num_faces_at_edge_3d
                              icell_jface = P4EST_FACES_AT_EDGE_3D(iface_at_edge,icell_iedge)
                              if (icell_jface == icell_iface) exit
                           end do   
                           ! If at the end of the loop there is no face match, cycle
                           if (iface_at_edge > num_faces_at_edge_3d) then 
                               cycle
                           else 
                           !   If edge at boundary or has edge neighbour we found it
                             if ( this%quad_to_quad_by_edge(icell_iedge,icell)+1 > 0 ) then
                                   exit       
                             end if
                           end if
                        end do
                        assert ( icell_iedge > 0 )
                    
                        jcell_iedge= p4est_get_jcell_icorner(icell_iface,jcell_iface,icell_iedge,P4EST_EDGE_IN_FACE_3D,P4EST_FACE_EDGES_3D)
                        ! The non_proper vef is within an edge
                        improper_cell_around_ivef = num_corners_x_cell+P4EST_2_FEMPAR_EDGE_3D(jcell_iedge)
                    end if
                   else
                     improper_cell_around_ivef    = num_corners_x_cell+P4EST_2_FEMPAR_FACE(jcell_iface)                     
                     improper_cell_around_subvef  = -1
                   end if
                 is_proper = .false.
                 call work_vector_improper_cells_around%push_back(jcell)
                 call work_vector_ivef%push_back(improper_cell_around_ivef)
                 call work_vector_subvef%push_back(improper_cell_around_subvef)
              else
                min_cell   = min(min_cell,jcell)
                if (min_cell == jcell) then
                   min_icorner=p4est_get_jcell_icorner(icell_iface,jcell_iface,icorner,P4EST_CORNER_IN_FACE,P4EST_FACE_CORNERS)
                end if
                call work_vector_cells_around%push_back(jcell)
              end if
           else ! Half-side neighbour 
              assert (mortar == num_subfacets_facet+1)
              ! Determine which face_corner of my face am I
              do face_corner=1, num_face_corners
                 if (P4EST_FACE_CORNERS(face_corner,icell_iface) == icorner) then
                    exit
                 end if
              end do
              assert(face_corner<=num_face_corners)
              jcell       = this%quad_to_half(face_corner,this%quad_to_quad(icell_iface,icell)+1)+1
              min_cell   = min(min_cell,jcell)
              if (min_cell == jcell) then
                 min_icorner=p4est_get_jcell_icorner(icell_iface,jcell_iface,icorner,P4EST_CORNER_IN_FACE,P4EST_FACE_CORNERS)
              end if
              call work_vector_cells_around%push_back(jcell)
           end if
        end do  ! End loop faces at corner

        ! Find the edge neighbors
        if (this%get_num_dims() == 3) then
           do iedge_at_corner=1, NUM_EDGES_AT_CORNER_3D

              icell_iedge = P4EST_EDGES_AT_CORNER_3D(iedge_at_corner,icorner)
              jcell_iconn = this%quad_to_edge(icell_iedge,icell)         
              jcell      = this%quad_to_quad_by_edge(icell_iedge,icell)+1 
              
              ! If there is not edge neighbour across this edge ...
              if (.not. jcell>0) cycle
              
              call p8est_eval_edge_connectivity(jcell_iconn, jcell_iedge, flip, mortar)
              assert (flip==1) ! All cells MUST be aligned with each other

              if (mortar == -1) then ! Conformal neighbour
                 ! Check whether icell across current edge is at the boundary
                 if ( icell == jcell ) then
                    vef_at_boundary = .true.
                    cycle
                 end if

                 min_cell   = min(min_cell,jcell)
                 if (min_cell == jcell) then
                    min_icorner= p4est_get_jcell_icorner(icell_iedge,jcell_iedge,icorner,P4EST_CORNER_IN_EDGE_3D,P4EST_EDGE_CORNERS_3D)
                 end if
                 call work_vector_cells_around%push_back(jcell)
              else if ( mortar >= 1 .and. mortar <= num_subedgets_edget )  then ! Double-size neighbour
                 ! Determine whether this corner is improper
                 ! 1. Go to coarser neighbour and find across which subface am I neighbour
                 do isubedge = 1, num_subedgets_edget
                    if (this%quad_to_half_by_edge(isubedge,this%quad_to_quad_by_edge(jcell_iedge, jcell)+1)+1==icell) then
                       exit
                    end if
                 end do
                 assert(isubedge<=num_subedgets_edget)

                 ! 2. Determine which edge_corner of my edge am I
                 do edge_corner=1, num_edge_corners
                    if (P4EST_EDGE_CORNERS_3D(edge_corner,icell_iedge) == icorner) then
                       exit
                    end if
                 end do
                 assert(edge_corner<=num_edge_corners)

                 !! 3. I am improper if am either corner 1 of subedge 0 or corner 0 of subedge 1
                 if ( edge_corner /= isubedge ) then
                    improper_cell_around_ivef    = num_corners_x_cell+P4EST_2_FEMPAR_EDGE_3D(jcell_iedge)
                    improper_cell_around_subvef  = -1
                    is_proper = .false.
                    call work_vector_improper_cells_around%push_back(jcell)
                    call work_vector_ivef%push_back(improper_cell_around_ivef)
                    call work_vector_subvef%push_back(improper_cell_around_subvef)
                 else
                    min_cell   = min(min_cell,jcell)
                    if (min_cell == jcell) then
                       min_icorner=p4est_get_jcell_icorner(icell_iedge,jcell_iedge,icorner,P4EST_CORNER_IN_EDGE_3D,P4EST_EDGE_CORNERS_3D)
                    end if
                    call work_vector_cells_around%push_back(jcell)
                 end if
              else ! Half-side neighbour 
                 assert (mortar == num_subedgets_edget+1)
                 ! Determine which edge_corner of my edge am I
                 do edge_corner=1, num_edge_corners
                    if (P4EST_EDGE_CORNERS_3D(edge_corner,icell_iedge) == icorner) then
                       exit
                    end if
                 end do
                 assert(edge_corner<=num_edge_corners)
                 jcell       = this%quad_to_half_by_edge(edge_corner,jcell)+1
                 min_cell   = min(min_cell,jcell)
                 if (min_cell == jcell) then
                    min_icorner=p4est_get_jcell_icorner(icell_iedge,jcell_iedge,icorner,P4EST_CORNER_IN_EDGE_3D,P4EST_EDGE_CORNERS_3D)
                 end if
                 call work_vector_cells_around%push_back(jcell)
              end if
           end do
        end if

        ! A corner cannot become improper by a corner neighbour which is not a face neighbour
        jcell          = this%quad_to_corner(icorner,icell)+1
        jcell_icorner  = P4EST_OPPOSITE_CORNER(icorner)

        if (jcell > 0) then
           min_cell   = min(min_cell,jcell)
           if (min_cell == jcell) then
              min_icorner=jcell_icorner
           end if
           call work_vector_cells_around%push_back(jcell)
        end if

        base_pos_icell    = this%get_ptr_vefs_x_cell(icell)-1
        base_pos_min_cell = this%get_ptr_vefs_x_cell(min_cell)-1

        ! If am owner of this corner
        if (icell == min_cell) then
           if (is_proper) then
              this%num_proper_vefs = this%num_proper_vefs+1
              call this%lst_vefs_gids%set(base_pos_icell+P4EST_2_FEMPAR_CORNER(icorner), this%num_proper_vefs)

              call this%ptr_cells_around_proper_vefs%push_back(work_vector_cells_around%size())
              do i=1, work_vector_cells_around%size()
                 call this%lst_cells_around_proper_vefs%push_back(work_vector_cells_around%get(i))
              end do
              ! Fill proper vefs dim
              call this%proper_vefs_dim%push_back(0)

              ! Fill proper vefs at boundary
              if ( vef_at_boundary ) then
                 call this%proper_vefs_at_boundary%push_back(1)
              else
                 call this%proper_vefs_at_boundary%push_back(0)
              end if
           else 
              this%num_improper_vefs = this%num_improper_vefs+1
              call this%lst_vefs_gids%set(base_pos_icell+P4EST_2_FEMPAR_CORNER(icorner), -this%num_improper_vefs)

              ! Fill cells_around improper vefs 
              call this%ptr_cells_around_improper_vefs%push_back(work_vector_cells_around%size())
              do i=1, work_vector_cells_around%size()
                 call this%lst_cells_around_improper_vefs%push_back(work_vector_cells_around%get(i))
              end do

              ! Fill improper cells_around improper vefs
              call this%ptr_improper_cells_around%push_back(work_vector_improper_cells_around%size())
              do i=1, work_vector_improper_cells_around%size()
                 call this%lst_improper_cells_around%push_back(work_vector_improper_cells_around%get(i))
                 call this%improper_vefs_improper_cell_around_ivef%push_back(work_vector_ivef%get(i))
                 call this%improper_vefs_improper_cell_around_subvef%push_back(work_vector_subvef%get(i)) 
              end do
              
              ! Fill improper vefs dim
              call this%improper_vefs_dim%push_back(0)
           end if
        else
           call this%lst_vefs_gids%set(base_pos_icell+P4EST_2_FEMPAR_CORNER(icorner), &
                this%lst_vefs_gids%get(base_pos_min_cell+P4EST_2_FEMPAR_CORNER(min_icorner)))
        end if
     end do ! icorner

     if (this%get_num_dims() == 3) then
        do iedge=1, num_edges_x_cell
           is_proper         = .true.
           min_cell          = icell
           min_iedge         = iedge
           vef_at_boundary   = .false.
           min_cell_int_edge = 0

           call work_vector_cells_around%resize(0)
           call work_vector_cells_around%push_back(icell)
           call work_vector_improper_cells_around%resize(0)
           call work_vector_ivef%resize(0)
           call work_vector_subvef%resize(0)

           ! Find face neighbors
           do iface_at_edge=1, num_faces_at_edge_3d
              icell_iface = P4EST_FACES_AT_EDGE_3D(iface_at_edge,iedge)
              jcell_iconn = this%quad_to_face(icell_iface,icell)         
              call p8est_eval_connectivity(jcell_iconn, jcell_iface, flip, mortar)
              assert (flip==1) ! All cells MUST be aligned with each other

              if (mortar == -1) then ! Conformal neighbour
                 jcell      = this%quad_to_quad(icell_iface,icell)+1 
                 if ( icell == jcell ) then
                    vef_at_boundary = .true.
                    cycle
                 end if
                 min_cell   = min(min_cell,jcell)
                 if (min_cell == jcell) then
                    min_iedge= p4est_get_jcell_icorner(icell_iface,jcell_iface,iedge,P4EST_EDGE_IN_FACE_3D,P4EST_FACE_EDGES_3D)
                 end if
                 call work_vector_cells_around%push_back(jcell)
              else if ( mortar >= 1 .and. mortar <= num_subfacets_facet )  then ! Double-size neighbour 
                 jcell      = this%quad_to_quad(icell_iface,icell)+1
                 if ( min_cell_int_edge == 0 ) then
                   min_cell_int_edge = jcell
                 else
                   min_cell_int_edge = min(min_cell_int_edge, jcell)
                 end if
                 
                 ! Determine which subface of jcell_iface am I
                 do isubface = 1, num_subfacets_facet
                   if (this%quad_to_half(isubface,this%quad_to_quad(jcell_iface, jcell)+1)+1==icell) then
                      exit
                   end if
                 end do
                 assert(isubface<=num_subfacets_facet)

                 if (this%quad_to_quad_by_edge(iedge,icell)+1 > 0) then
                    ! The current edge is for sure improper
                    ! 1. Determine jcell_iedge
                    jcell_iedge= p4est_get_jcell_icorner(icell_iface,jcell_iface,iedge,P4EST_EDGE_IN_FACE_3D,P4EST_FACE_EDGES_3D)

                    ! 2. Determine which edge_face of icell_iface am I
                    do edge_face=1, NUM_FACE_EDGES_3D
                       if (P4EST_FACE_EDGES_3D(edge_face,icell_iface) == iedge ) exit
                    end do
                    assert(edge_face<=NUM_FACE_EDGES_3D)

                    improper_cell_around_ivef    = num_corners_x_cell+P4EST_2_FEMPAR_EDGE_3D(jcell_iedge)
                    if ( (edge_face-1)/2 == 0 ) then ! if edge_face == 1 .or. edge_face == 2
                       improper_cell_around_subvef = (isubface+1)/2
                    else
                       if ( mod(isubface,2) /= 0 ) then
                         improper_cell_around_subvef  = 1
                       else
                         improper_cell_around_subvef  = 2
                       end if
                    end if
                 else
                    improper_cell_around_ivef    = num_corners_x_cell+num_edges_x_cell+P4EST_2_FEMPAR_FACE(jcell_iface)
                    if ( min_cell_int_edge == jcell ) then
                      improper_cell_around_subvef  = -isubface
                    end if  
                 end if
                
                 is_proper = .false.
                 call work_vector_improper_cells_around%push_back(jcell)
                 call work_vector_ivef%push_back(improper_cell_around_ivef)
                 call work_vector_subvef%push_back(improper_cell_around_subvef)
              end if
           end do ! iface_at_edge

           ! Find neigs only by edge
           jcell = this%quad_to_quad_by_edge(iedge,icell)+1
           if (icell /= jcell .and. jcell > 0) then
              jcell_iconn = this%quad_to_edge(iedge,icell)         

              call p8est_eval_edge_connectivity(jcell_iconn, jcell_iedge, flip, mortar)
              assert (flip==1) ! All cells MUST be aligned with each other

              if (mortar == -1) then ! Conformal neighbour
                 min_cell   = min(min_cell,jcell)
                 if (min_cell == jcell) then
                    min_iedge   = this%quad_to_edge(iedge,icell)+1
                 end if
                 call work_vector_cells_around%push_back(jcell) 
              else if ( mortar >= 1 .and. mortar <= num_subedgets_edget )  then ! Double-size neighbour 
                 jcell         = this%quad_to_quad_by_edge(iedge,icell)+1
                 ! Determine whether this corner is improper
                 ! 1. Go to coarser neighbour and find across which subface am I neighbour
                 do isubedge = 1, num_subedgets_edget
                    if (this%quad_to_half_by_edge(isubedge,this%quad_to_quad_by_edge(jcell_iedge, jcell)+1)+1==icell) then
                       exit
                    end if
                 end do
                 assert(isubedge<=num_subedgets_edget)
                 improper_cell_around_ivef    = num_corners_x_cell+P4EST_2_FEMPAR_EDGE_3D(jcell_iedge)
                 improper_cell_around_subvef  = isubedge
                 is_proper = .false.
                 call work_vector_improper_cells_around%push_back(jcell)
                 call work_vector_ivef%push_back(improper_cell_around_ivef)
                 call work_vector_subvef%push_back(improper_cell_around_subvef)
              end if
           end if

           base_pos_icell    = this%get_ptr_vefs_x_cell(icell)-1    + num_corners_x_cell
           base_pos_min_cell = this%get_ptr_vefs_x_cell(min_cell)-1 + num_corners_x_cell

           ! If am owner of this edge
           if (icell == min_cell) then
              if (is_proper) then
                 this%num_proper_vefs = this%num_proper_vefs+1
                 call this%lst_vefs_gids%set(base_pos_icell+P4EST_2_FEMPAR_EDGE_3D(iedge), this%num_proper_vefs)

                 call this%ptr_cells_around_proper_vefs%push_back(work_vector_cells_around%size())
                 do i=1, work_vector_cells_around%size()
                    call this%lst_cells_around_proper_vefs%push_back(work_vector_cells_around%get(i))
                 end do
                 ! Fill proper vefs dim
                 call this%proper_vefs_dim%push_back(1)

                 ! Fill proper vefs at boundary
                 if ( vef_at_boundary ) then
                    call this%proper_vefs_at_boundary%push_back(1)
                 else
                    call this%proper_vefs_at_boundary%push_back(0)
                 end if
              else
                 this%num_improper_vefs = this%num_improper_vefs+1
                 call this%lst_vefs_gids%set(base_pos_icell+P4EST_2_FEMPAR_EDGE_3D(iedge), -this%num_improper_vefs)

                 ! Fill cells_around improper vefs 
                 call this%ptr_cells_around_improper_vefs%push_back(work_vector_cells_around%size())
                 do i=1, work_vector_cells_around%size()
                    call this%lst_cells_around_improper_vefs%push_back(work_vector_cells_around%get(i))
                 end do

                 ! Fill improper cells_around improper vefs
                 call this%ptr_improper_cells_around%push_back(work_vector_improper_cells_around%size())
                 do i=1, work_vector_improper_cells_around%size()
                    call this%lst_improper_cells_around%push_back(work_vector_improper_cells_around%get(i))
                    call this%improper_vefs_improper_cell_around_ivef%push_back(work_vector_ivef%get(i))
                    call this%improper_vefs_improper_cell_around_subvef%push_back(work_vector_subvef%get(i)) 
                 end do

                 ! Fill improper vefs dim
                 call this%improper_vefs_dim%push_back(1)

              end if
           else
              call this%lst_vefs_gids%set(base_pos_icell+P4EST_2_FEMPAR_EDGE_3D(iedge), &
                   this%lst_vefs_gids%get(base_pos_min_cell+P4EST_2_FEMPAR_EDGE_3D(min_iedge)))
           end if

        end do ! iedge
     end if

     do iface=1, num_faces_x_cell
        is_proper       = .true.
        min_cell        = icell
        min_iface       = iface 
        vef_at_boundary = .false.

        call work_vector_cells_around%resize(0)
        call work_vector_cells_around%push_back(icell)
        call work_vector_improper_cells_around%resize(0)
        call work_vector_ivef%resize(0)
        call work_vector_subvef%resize(0)

        jcell_iconn = this%quad_to_face(iface,icell)         

        if (this%get_num_dims() == 2) then
           call p4est_eval_connectivity(jcell_iconn, jcell_iface, flip, mortar)
        elseif (this%get_num_dims() == 3) then
           call p8est_eval_connectivity(jcell_iconn, jcell_iface, flip, mortar)
        else
           check(.false.)
        end if

        assert (flip==1) ! All cells we are working with MUST be aligned with each other
        if (mortar == -1) then ! Conformal neighbour
           jcell      = this%quad_to_quad(iface,icell)+1 
           min_cell = min(min_cell,jcell)
           if (min_cell == jcell) then
              min_iface=this%quad_to_face(iface,icell)+1 
           end if
           if ( jcell /= icell ) then ! Skip myself if at boundary
              call work_vector_cells_around%push_back(jcell)
           else
              vef_at_boundary = .true.
           end if
        else if ( mortar >= 1 .and. mortar <= num_subfacets_facet )  then ! Double-size neighbour 
           improper_cell_around_ivef    = num_corners_x_cell+num_edges_x_cell+P4EST_2_FEMPAR_FACE(jcell_iface)
           improper_cell_around_subvef  = mortar
           jcell      = this%quad_to_quad(iface,icell)+1
           is_proper = .false. 
           call work_vector_improper_cells_around%push_back(jcell)
           call work_vector_ivef%push_back(improper_cell_around_ivef)
           call work_vector_subvef%push_back(improper_cell_around_subvef)
        end if

        base_pos_icell    = this%get_ptr_vefs_x_cell(icell)-1    + num_corners_x_cell + num_edges_x_cell
        base_pos_min_cell = this%get_ptr_vefs_x_cell(min_cell)-1 + num_corners_x_cell + num_edges_x_cell

        ! If am owner of this corner
        if (icell == min_cell) then
           if (is_proper) then
              this%num_proper_vefs=this%num_proper_vefs+1
              call this%lst_vefs_gids%set(base_pos_icell+P4EST_2_FEMPAR_FACE(iface), this%num_proper_vefs)

              ! Fill cells_around proper vefs
              call this%ptr_cells_around_proper_vefs%push_back(work_vector_cells_around%size())
              do i=1, work_vector_cells_around%size()
                 call this%lst_cells_around_proper_vefs%push_back(work_vector_cells_around%get(i))
              end do

              ! Fill proper vefs dim
              call this%proper_vefs_dim%push_back(this%get_num_dims()-1)

              ! Fill proper vefs at boundary
              if ( vef_at_boundary ) then
                 call this%proper_vefs_at_boundary%push_back(1)
              else
                 call this%proper_vefs_at_boundary%push_back(0)
              end if

           else 
              this%num_improper_vefs=this%num_improper_vefs+1
              call this%lst_vefs_gids%set(base_pos_icell+P4EST_2_FEMPAR_FACE(iface), -this%num_improper_vefs)

              ! Fill cells_around improper vefs
              call this%ptr_cells_around_improper_vefs%push_back(work_vector_cells_around%size())
              do i=1, work_vector_cells_around%size()
                 call this%lst_cells_around_improper_vefs%push_back(work_vector_cells_around%get(i))
              end do

              ! Fill improper cells_around improper vefs
              call this%ptr_improper_cells_around%push_back(work_vector_improper_cells_around%size())
              do i=1, work_vector_improper_cells_around%size()
                 call this%lst_improper_cells_around%push_back(work_vector_improper_cells_around%get(i))
                 call this%improper_vefs_improper_cell_around_ivef%push_back(work_vector_ivef%get(i))
                 call this%improper_vefs_improper_cell_around_subvef%push_back(work_vector_subvef%get(i)) 
              end do

              ! Fill improper vefs dim
              call this%improper_vefs_dim%push_back(this%get_num_dims()-1)

           end if
        else ! Borrow vef gid from owner
           call this%lst_vefs_gids%set(base_pos_icell+P4EST_2_FEMPAR_FACE(iface), &
                this%lst_vefs_gids%get(base_pos_min_cell+P4EST_2_FEMPAR_FACE(min_iface)))
        end if
     end do ! iface
  end do
  call this%set_num_vefs(this%num_proper_vefs + this%num_improper_vefs)
  call this%std_vector_transform_length_to_header(this%ptr_cells_around_proper_vefs)
  call this%std_vector_transform_length_to_header(this%ptr_cells_around_improper_vefs)
  call this%std_vector_transform_length_to_header(this%ptr_improper_cells_around)
  call work_vector_cells_around%free()
  call work_vector_improper_cells_around%free()
  call work_vector_ivef%free()
  call work_vector_subvef%free()
#else
  call this%not_enabled_error()
#endif    
end subroutine p4est_st_update_lst_vefs_gids_and_cells_around


subroutine p4est_st_update_cell_set_ids(this)
  implicit none
  class(p4est_serial_triangulation_t), intent(inout)    :: this
  type(std_vector_integer_ip_t) :: old_cell_set_ids
  integer(ip) :: num_children_x_cell
  integer(ip) :: old_cell_set_id
  integer(ip) :: transformation_flag
  integer(ip) :: i, j
  
#ifdef ENABLE_P4EST
  call old_cell_set_ids%copy(this%cell_set_ids)
  call this%cell_set_ids%resize(0)
  if ( this%get_num_dims() == 2 ) then
    num_children_x_cell = NUM_CORNERS_2D
  else if ( this%get_num_dims() == 3 ) then
    num_children_x_cell = NUM_CORNERS_3D
  end if
  
  assert ( old_cell_set_ids%size() == this%refinement_and_coarsening_flags%size() )
  
  i=1
  do while ( i <= old_cell_set_ids%size() )
    transformation_flag = this%refinement_and_coarsening_flags%get(i)
    old_cell_set_id     = old_cell_set_ids%get(i)
    if ( transformation_flag == do_nothing ) then
      call this%cell_set_ids%push_back(old_cell_set_id)
    else if ( transformation_flag == refinement ) then
      do j=1, num_children_x_cell
        call this%cell_set_ids%push_back(old_cell_set_id)
      end do
    else if ( transformation_flag == coarsening ) then
      call this%cell_set_ids%push_back(old_cell_set_id)
      do j=1, num_children_x_cell
        i=i+1
      end do
      cycle
    else 
      assert(.false.)
    end if
    i=i+1
  end do
  call old_cell_set_ids%free()
#else
  call this%not_enabled_error()
#endif        
  
end subroutine p4est_st_update_cell_set_ids

subroutine p4est_st_update_vef_set_ids(this, old_lst_vefs_gids)
  implicit none
  class(p4est_serial_triangulation_t), intent(inout) :: this
  type(std_vector_integer_ip_t)      , intent(in)    :: old_lst_vefs_gids
  
  integer(ip) :: old_num_cells
  integer(ip) :: old_cell_id, new_cell_id, old_cell_base_pos
  integer(ip) :: transformation_flag
  integer(ip) :: num_corners
  integer(ip) :: ivef, iface, j, iedge
  integer(ip) :: old_vef_gid, old_vef_set_id
  class(cell_iterator_t), allocatable :: cell
  class(vef_iterator_t) , allocatable :: vef
  !type(std_vector_integer_ip_t) :: old_vef_set_ids
  
  type(list_t), pointer :: vertices_n_face
  type(list_iterator_t) :: vertices_x_n_face_iterator
  type(std_vector_integer_ip_t) :: old_proper_vefs_set_ids
  type(std_vector_integer_ip_t) :: old_improper_vefs_set_ids
  integer(ip), pointer :: FEMPAR_SUBCELLS_IN_TOUCH_FACE(:,:)
  integer(ip) :: NUM_SUBCELLS_IN_TOUCH_FACE
  integer(ip) :: num_edges_ref_elem_geo

#ifdef ENABLE_P4EST    

  if (this%get_num_dims() == 2) then
    FEMPAR_SUBCELLS_IN_TOUCH_FACE => FEMPAR_SUBCELLS_IN_TOUCH_FACE_2D
    NUM_SUBCELLS_IN_TOUCH_FACE = NUM_SUBCELLS_IN_TOUCH_FACE_2D
    num_edges_ref_elem_geo = 0
  else
    FEMPAR_SUBCELLS_IN_TOUCH_FACE => FEMPAR_SUBCELLS_IN_TOUCH_FACE_3D
    NUM_SUBCELLS_IN_TOUCH_FACE = NUM_SUBCELLS_IN_TOUCH_FACE_3D
    num_edges_ref_elem_geo = this%reference_fe_geo%get_num_n_faces_of_dim(1)
  end if
  
  call old_proper_vefs_set_ids%copy(this%proper_vefs_set_ids)
  call old_improper_vefs_set_ids%copy(this%improper_vefs_set_ids)
  
  call this%clear_vef_set_ids()
  
  call this%create_cell_iterator(cell)
  call this%create_vef_iterator(vef)
  
  old_num_cells = old_lst_vefs_gids%size()/(this%get_ptr_vefs_x_cell(1)-this%get_ptr_vefs_x_cell(0))
 
  vertices_n_face => this%reference_fe_geo%get_vertices_n_face()
  old_cell_id = 1
  new_cell_id = 1
  do while (old_cell_id <= old_num_cells)
    
    transformation_flag = this%refinement_and_coarsening_flags%get(old_cell_id)
    old_cell_base_pos   = this%get_ptr_vefs_x_cell(old_cell_id)
    
    call cell%set_gid(new_cell_id)
    
    if ( transformation_flag == do_nothing ) then
      do ivef=1, cell%get_num_vefs()
        call cell%get_vef(ivef,vef)
        old_vef_gid = old_lst_vefs_gids%get(old_cell_base_pos+ivef-1)
        old_vef_set_id = get_vef_set_id( old_vef_gid, old_proper_vefs_set_ids, old_improper_vefs_set_ids)
        call vef%set_set_id(old_vef_set_id)
      end do
      new_cell_id = new_cell_id + 1
      old_cell_id = old_cell_id+1
    else if ( transformation_flag == refinement ) then
      ! Transfer set_id's of coarse cell vertices from coarse to refined cells
      do j=1, this%reference_fe_geo%get_num_n_faces_of_dim(0) !num_children_x_cell 
        call cell%set_gid(new_cell_id+j-1)
        call cell%get_vef(j,vef)
        old_vef_gid = old_lst_vefs_gids%get(old_cell_base_pos+j-1)
        old_vef_set_id = get_vef_set_id( old_vef_gid, old_proper_vefs_set_ids, old_improper_vefs_set_ids)
        call vef%set_set_id(old_vef_set_id)
      end do

      if (this%get_num_dims() == 3) then
        do iedge=1, this%reference_fe_geo%get_num_n_faces_of_dim(1)
           ivef = this%reference_fe_geo%get_num_n_faces_of_dim(0)  + iedge
           do j=1, NUM_SUBCELLS_IN_TOUCH_EDGE_3D
              call cell%set_gid(new_cell_id + FEMPAR_SUBCELLS_IN_TOUCH_EDGE_3D(j,iedge)-1)
              call cell%get_vef(ivef,vef)
              old_vef_gid = old_lst_vefs_gids%get(old_cell_base_pos+ivef-1)
              old_vef_set_id = get_vef_set_id( old_vef_gid, old_proper_vefs_set_ids, old_improper_vefs_set_ids)
              call vef%set_set_id(old_vef_set_id)
           end do
           vertices_x_n_face_iterator = vertices_n_face%create_iterator(ivef)
           call cell%get_vef(vertices_x_n_face_iterator%get_current(),vef)
           old_vef_gid = old_lst_vefs_gids%get(old_cell_base_pos+ivef-1)
           old_vef_set_id = get_vef_set_id( old_vef_gid, old_proper_vefs_set_ids, old_improper_vefs_set_ids)
           call vef%set_set_id(old_vef_set_id)
        end do
      end if
      
      do iface=1, this%reference_fe_geo%get_num_facets()
         ivef = this%reference_fe_geo%get_num_n_faces_of_dim(0) + num_edges_ref_elem_geo  + iface
         do j=1, NUM_SUBCELLS_IN_TOUCH_FACE
            call cell%set_gid(new_cell_id + FEMPAR_SUBCELLS_IN_TOUCH_FACE(j,iface)-1)
            call cell%get_vef(ivef,vef)
            old_vef_gid = old_lst_vefs_gids%get(old_cell_base_pos+ivef-1)
            old_vef_set_id = get_vef_set_id( old_vef_gid, old_proper_vefs_set_ids, old_improper_vefs_set_ids)
            call vef%set_set_id(old_vef_set_id)
            if (this%get_num_dims() == 3) then
              iedge = FEMPAR_EDGE_OF_SUBCELLS_IN_TOUCH_FACE_3D(j,iface)
              call cell%get_vef(this%reference_fe_geo%get_num_n_faces_of_dim(0)+iedge,vef)
              call vef%set_set_id(old_vef_set_id)
            end if
         end do
         vertices_x_n_face_iterator = vertices_n_face%create_iterator(ivef)
         call cell%get_vef(vertices_x_n_face_iterator%get_current(),vef)
         old_vef_gid = old_lst_vefs_gids%get(old_cell_base_pos+ivef-1)
         old_vef_set_id = get_vef_set_id( old_vef_gid, old_proper_vefs_set_ids, old_improper_vefs_set_ids)
         call vef%set_set_id(old_vef_set_id)
      end do
      new_cell_id = new_cell_id + this%reference_fe_geo%get_num_n_faces_of_dim(0)
      old_cell_id = old_cell_id+1
    else if ( transformation_flag == coarsening ) then
      ! Transfer set_id's of refined cells vertices from refined to coarse cells
      do j=1, this%reference_fe_geo%get_num_n_faces_of_dim(0) ! (num_children_x_cell)
        call cell%get_vef(j,vef)
        old_vef_gid = old_lst_vefs_gids%get(old_cell_base_pos+ (j-1)*this%reference_fe_geo%get_num_n_faces() + j-1)
        old_vef_set_id = get_vef_set_id( old_vef_gid, old_proper_vefs_set_ids, old_improper_vefs_set_ids)
        call vef%set_set_id(old_vef_set_id)
      end do
      
      if (this%get_num_dims() == 3) then
        do iedge=1, this%reference_fe_geo%get_num_n_faces_of_dim(1)
           ivef = this%reference_fe_geo%get_num_n_faces_of_dim(0) + iedge
           call cell%get_vef(ivef,vef)
           ! The VEF set id of a edge in the coarse cell is extracted (arbitrarily) from
           ! the refined cell corresponding to its first sub-edge
           old_vef_gid = old_lst_vefs_gids%get(old_cell_base_pos+&
             (FEMPAR_SUBCELLS_IN_TOUCH_EDGE_3D(1,iedge)-1)*this%reference_fe_geo%get_num_n_faces() + ivef-1)
           old_vef_set_id = get_vef_set_id( old_vef_gid, old_proper_vefs_set_ids, old_improper_vefs_set_ids)
           call vef%set_set_id(old_vef_set_id)
        end do
      end if

      do iface=1, this%reference_fe_geo%get_num_facets()
         ivef = this%reference_fe_geo%get_num_n_faces_of_dim(0) + num_edges_ref_elem_geo  + iface
         call cell%get_vef(ivef,vef)
         ! The VEF set id of a face in the coarse cell is extracted (arbitrarily) from the refined cell corresponding to its first subface
         old_vef_gid = old_lst_vefs_gids%get(old_cell_base_pos+ (FEMPAR_SUBCELLS_IN_TOUCH_FACE(1,iface)-1)*this%reference_fe_geo%get_num_n_faces() + ivef-1)
         old_vef_set_id = get_vef_set_id( old_vef_gid, old_proper_vefs_set_ids, old_improper_vefs_set_ids)
         call vef%set_set_id(old_vef_set_id)
      end do
      old_cell_id = old_cell_id + this%reference_fe_geo%get_num_n_faces_of_dim(0)
      new_cell_id = new_cell_id+1
    else 
      assert(.false.)
    end if
  end do
  
  call this%free_cell_iterator(cell)
  call this%free_vef_iterator(vef)
  call old_proper_vefs_set_ids%free()
  call old_improper_vefs_set_ids%free()
  
#else
  call this%not_enabled_error()
#endif        
  
contains
  function get_vef_set_id( vef_gid, proper_vefs_set_ids, improper_vefs_set_ids)
    implicit none
    integer(ip), intent(in) :: vef_gid
    ! TODO It seems that the 2 last arguments are not being used
    !      The function is actually consuming data from the caller, not the passed arguments...
    !      Is this the behavior we want?
    type(std_vector_integer_ip_t), intent(in) :: proper_vefs_set_ids
    type(std_vector_integer_ip_t), intent(in) :: improper_vefs_set_ids
    integer(ip) :: get_vef_set_id
    if ( vef_gid > 0 ) then
        get_vef_set_id = old_proper_vefs_set_ids%get(vef_gid)
    else
        get_vef_set_id = old_improper_vefs_set_ids%get(abs(vef_gid))
    end if
  end function get_vef_set_id
  
end subroutine p4est_st_update_vef_set_ids

subroutine p4est_st_std_vector_transform_length_to_header(this,std_vector_integer_ip)
  implicit none
  class(p4est_serial_triangulation_t), intent(in)    :: this
  type(std_vector_integer_ip_t)      , intent(inout) :: std_vector_integer_ip
  integer(ip) :: i
#ifdef ENABLE_P4EST    
  call std_vector_integer_ip%set(1,1)
  do i=1, std_vector_integer_ip%size()-1
    call std_vector_integer_ip%set(i+1,std_vector_integer_ip%get(i)+std_vector_integer_ip%get(i+1))
  end do
#else
  call this%not_enabled_error()
#endif      
end subroutine p4est_st_std_vector_transform_length_to_header

subroutine p4est_st_allocate_and_fill_x_cell_vertex_coordinates(this)
  implicit none
  class(p4est_serial_triangulation_t), intent(inout)    :: this
  integer(ip) :: idime, icell, istat, num_corners, current, corner
  real(rp) :: vxyz(3)
  
#ifdef ENABLE_P4EST
  call this%free_x_cell_vertex_coordinates()
  if ( this%get_num_dims() == 2 ) then
    num_corners = NUM_CORNERS_2D
  else if ( this%get_num_dims() == 3 ) then
    num_corners = NUM_CORNERS_3D
  end if
  allocate(this%per_cell_vertex_coordinates(this%get_num_cells()*num_corners), stat=istat); check(istat==0);  
  
  current = 1 
  do icell=1, this%get_num_cells()
     do corner=0, num_corners-1
       if ( this%get_num_dims() == 2 ) then
         call F90_p4est_get_quadrant_vertex_coordinates(this%p4est_connectivity,&
                                                        int(0,P4EST_F90_TOPIDX),&
                                                        this%quad_coords(1,icell),&
                                                        this%quad_coords(2,icell), &
                                                        this%quad_level(icell),&
                                                        corner,&
                                                        vxyz)
       else if ( this%get_num_dims() == 3 ) then
         call F90_p8est_get_quadrant_vertex_coordinates(this%p4est_connectivity,&
                                                        int(0,P4EST_F90_TOPIDX),&
                                                        this%quad_coords(1,icell),&
                                                        this%quad_coords(2,icell), &
                                                        this%quad_coords(3,icell), &
                                                        this%quad_level(icell),&
                                                        corner,&
                                                        vxyz)
       end if
       call this%per_cell_vertex_coordinates(current)%init(vxyz)
       current = current + 1 
     end do  
  end do
#else
  call this%not_enabled_error()
#endif        
end subroutine p4est_st_allocate_and_fill_x_cell_vertex_coordinates

subroutine p4est_st_free_x_cell_vertex_coordinates(this)
  implicit none
  class(p4est_serial_triangulation_t), intent(inout)    :: this
  integer(ip) :: istat
#ifdef ENABLE_P4EST
  if ( allocated(this%per_cell_vertex_coordinates) ) then
    deallocate(this%per_cell_vertex_coordinates, stat=istat)
    check(istat==0)
  end if  
#else
  call this%not_enabled_error()
#endif        
end subroutine p4est_st_free_x_cell_vertex_coordinates

subroutine p4est_st_clear_refinement_and_coarsening_flags(this)
   implicit none
   class(p4est_serial_triangulation_t), intent(inout)    :: this
  integer(ip) :: istat
#ifdef ENABLE_P4EST
  call this%refinement_and_coarsening_flags%resize(0)
  call this%refinement_and_coarsening_flags%resize(this%get_num_cells(), do_nothing)
#else
  call this%not_enabled_error()
#endif        
end subroutine p4est_st_clear_refinement_and_coarsening_flags

subroutine p4est_st_clear_cell_set_ids(this)
   implicit none
   class(p4est_serial_triangulation_t), intent(inout)    :: this
  integer(ip) :: istat
#ifdef ENABLE_P4EST
  call this%cell_set_ids%resize(0)
  call this%cell_set_ids%resize(this%get_num_cells(), 0)
#else
  call this%not_enabled_error()
#endif        
end subroutine p4est_st_clear_cell_set_ids

subroutine p4est_st_clear_vef_set_ids(this)
   implicit none
   class(p4est_serial_triangulation_t), intent(inout)    :: this
  integer(ip) :: istat
#ifdef ENABLE_P4EST
  call this%proper_vefs_set_ids%resize(0)
  call this%proper_vefs_set_ids%resize(this%num_proper_vefs, 0)
  
  call this%improper_vefs_set_ids%resize(0)
  call this%improper_vefs_set_ids%resize(this%num_improper_vefs, 0)
#else
  call this%not_enabled_error()
#endif        
end subroutine p4est_st_clear_vef_set_ids

subroutine p4est_st_fill_cells_set (this, cells_set)
  implicit none
  class(p4est_serial_triangulation_t), intent(inout) :: this
  integer(ip)                        , intent(in)    :: cells_set(:)
  integer(ip)  :: i 
#ifdef ENABLE_P4EST
  
  assert ( size(cells_set) == this%cell_set_ids%size() )
  do i=1, size(cells_set)
    call this%cell_set_ids%set(i,cells_set(i))
  end do
  
#else
  call this%not_enabled_error()
#endif        
end subroutine p4est_st_fill_cells_set 

subroutine p4est_serial_triangulation_update_p4est_mesh(this)
  implicit none
  class(p4est_serial_triangulation_t), intent(inout) :: this
#ifdef ENABLE_P4EST
  if ( this%get_num_dims() == 2 ) then
    call F90_p4est_mesh_new(this%p4est, this%p4est_mesh)
  else if ( this%get_num_dims() == 3 ) then
    call F90_p8est_mesh_new(this%p4est, this%p4est_mesh)
  end if
#else
  call this%not_enabled_error()
#endif   
end subroutine p4est_serial_triangulation_update_p4est_mesh

subroutine p4est_serial_triangulation_update_topology_from_p4est_mesh(this)
 implicit none 
 class(p4est_serial_triangulation_t), intent(inout) :: this
 integer(P4EST_F90_LOCIDX) :: local_num_quadrants
 integer(P4EST_F90_GLOIDX) :: global_num_quadrants
 integer(P4EST_F90_GLOIDX) :: global_first_quadrant
 integer(P4EST_F90_LOCIDX) :: num_half_faces
 integer(P4EST_F90_LOCIDX) :: num_half_edges
 type(c_ptr) :: QQ, QF, QH, QC, QQE, QE
 
#ifdef ENABLE_P4EST
 if ( this%get_num_dims() == 2 ) then
  call F90_p4est_get_mesh_info(this%p4est, &
                               this%p4est_mesh, &
                               local_num_quadrants, &
                               global_num_quadrants, &
                               global_first_quadrant, &
                               num_half_faces)
 
  if (allocated(this%quad_coords)) &
     call memfree(this%quad_coords, __FILE__, __LINE__)
  
  if (allocated(this%quad_level)) &
    call memfree(this%quad_level, __FILE__, __LINE__)
  
  call memalloc(2, local_num_quadrants, this%quad_coords, __FILE__, __LINE__)
  call memalloc(local_num_quadrants, this%quad_level, __FILE__, __LINE__ )
  
  call F90_p4est_get_mesh_topology_arrays(this%p4est, &
                                          this%p4est_mesh, &
                                          QQ, &
                                          QF, &
                                          QH, &
                                          QC, &
                                          this%quad_coords, &
                                          this%quad_level)
  
  call c_f_pointer(qq,this%quad_to_quad,[NUM_FACES_2D,local_num_quadrants])
  call c_f_pointer(qf,this%quad_to_face,[NUM_FACES_2D,local_num_quadrants])
  if(num_half_faces>0) call c_f_pointer(qh,this%quad_to_half,[NUM_SUBFACES_FACE_2D,num_half_faces])
  call c_f_pointer(qc,this%quad_to_corner,[NUM_CORNERS_2D,local_num_quadrants])
 else if ( this%get_num_dims() == 3 ) then
  call F90_p8est_get_mesh_info(this%p4est, &
                               this%p4est_mesh, &
                               local_num_quadrants, &
                               global_num_quadrants, &
                               global_first_quadrant, &
                               num_half_faces)
 
  if (allocated(this%quad_coords)) &
     call memfree(this%quad_coords, __FILE__, __LINE__)
  
  if (allocated(this%quad_level)) &
    call memfree(this%quad_level, __FILE__, __LINE__)

  if (allocated(this%quad_to_quad_by_edge)) &
    call memfree(this%quad_to_quad_by_edge, __FILE__, __LINE__)

  if (allocated(this%quad_to_edge)) &
    call memfree(this%quad_to_edge, __FILE__, __LINE__)
  
  
  call memalloc(3, local_num_quadrants, this%quad_coords, __FILE__, __LINE__)
  call memalloc(local_num_quadrants, this%quad_level, __FILE__, __LINE__ )
  call memalloc(NUM_EDGES_3D,local_num_quadrants, this%quad_to_quad_by_edge, __FILE__, __LINE__ )
  call memalloc(NUM_EDGES_3D,local_num_quadrants, this%quad_to_edge, __FILE__, __LINE__ )
  
  call F90_p8est_get_mesh_topology_arrays(this%p4est, &
                                          this%p4est_mesh, &
                                          QQ, &
                                          QF, &
                                          QH, &
                                          this%quad_to_quad_by_edge,&
                                          this%quad_to_edge,&
                                          num_half_edges,&
                                          this%QHE,&
                                          QC, &
                                          this%quad_coords, &
                                          this%quad_level)
  
  call c_f_pointer(qq,this%quad_to_quad,[NUM_FACES_3D,local_num_quadrants])
  call c_f_pointer(qf,this%quad_to_face,[NUM_FACES_3D,local_num_quadrants])
  if(num_half_faces>0) call c_f_pointer(qh,this%quad_to_half,[NUM_SUBFACES_FACE_3D,num_half_faces])
  call c_f_pointer(qc,this%quad_to_corner,[NUM_CORNERS_3D,local_num_quadrants])
  call c_f_pointer(this%QHE,this%quad_to_half_by_edge,[NUM_SUBEDGES_EDGE_3D,num_half_edges])
 end if
  
#else
  call this%not_enabled_error()
#endif
end subroutine p4est_serial_triangulation_update_topology_from_p4est_mesh

subroutine p4est_serial_triangulation_free ( this)
  implicit none
  class(p4est_serial_triangulation_t), target, intent(inout) :: this

#ifdef ENABLE_P4EST
  if ( this%get_num_dims() == 2 ) then
    call F90_p4est_destroy(this%p4est)
    call F90_p4est_connectivity_destroy(this%p4est_connectivity)
    call F90_p4est_mesh_destroy(this%p4est_mesh)
  else if ( this%get_num_dims() == 3 ) then  
    call F90_p8est_destroy(this%p4est)
    call F90_p8est_connectivity_destroy(this%p4est_connectivity)
    call F90_p8est_mesh_destroy(this%p4est_mesh)
    call F90_p8est_QHE_destroy(this%QHE)
  end if
  
  this%p4est_connectivity = c_null_ptr
  this%p4est              = c_null_ptr
  this%p4est_mesh         = c_null_ptr
  this%QHE                = c_null_ptr
    
  call this%lst_vefs_gids%free()
  call this%ptr_cells_around_proper_vefs%free()
  call this%lst_cells_around_proper_vefs%free()
  call this%ptr_cells_around_improper_vefs%free()
  call this%lst_cells_around_improper_vefs%free()
  call this%ptr_improper_cells_around%free()
  call this%lst_improper_cells_around%free()
  call this%improper_vefs_improper_cell_around_ivef%free()
  call this%improper_vefs_improper_cell_around_subvef%free()
  call this%proper_vefs_dim%free()
  call this%improper_vefs_dim%free()
  call this%proper_vefs_at_boundary%free()
  call this%refinement_and_coarsening_flags%free()
  call this%cell_set_ids%free()
  call this%proper_vefs_set_ids%free()
  call this%improper_vefs_set_ids%free()
  
  nullify(this%quad_to_quad)
  nullify(this%quad_to_face)
  nullify(this%quad_to_half)
  nullify(this%quad_to_half_by_edge)
  
  if (allocated(this%quad_coords)) &
     call memfree(this%quad_coords, __FILE__, __LINE__)
  
  if (allocated(this%quad_level)) &
    call memfree(this%quad_level, __FILE__, __LINE__)

  if (allocated(this%quad_to_quad_by_edge)) &
    call memfree(this%quad_to_quad_by_edge, __FILE__, __LINE__)

  if (allocated(this%quad_to_edge)) &
    call memfree(this%quad_to_edge, __FILE__, __LINE__)
  
  this%num_proper_vefs = -1
  this%num_improper_vefs = -1
  
  call this%reference_fe_geo%free()
  call this%free_environment()
#else
  call this%not_enabled_error()
#endif     
end subroutine p4est_serial_triangulation_free

subroutine p4est_create_cell_iterator ( this, cell )
  implicit none
  class(p4est_serial_triangulation_t) , intent(in)    :: this
  class(cell_iterator_t), allocatable, intent(inout) :: cell
  integer(ip) :: istat
  call this%free_cell_iterator(cell)
  allocate(p4est_cell_iterator_t :: cell, stat=istat); check(istat==0)
  call cell%create(this)
end subroutine p4est_create_cell_iterator 

subroutine p4est_free_cell_iterator ( this, cell )
  implicit none
  class(p4est_serial_triangulation_t) , intent(in)    :: this
  class(cell_iterator_t), allocatable, intent(inout) :: cell
  integer(ip) :: istat
  if ( allocated(cell) ) then
     call cell%free()
     deallocate(cell, stat=istat); check(istat==0);
  end if
end subroutine p4est_free_cell_iterator 

subroutine p4est_create_vef_iterator ( this, vef )
  implicit none
  class(p4est_serial_triangulation_t) , intent(in)    :: this
  class(vef_iterator_t), allocatable , intent(inout) :: vef
  integer(ip) :: istat
  call this%free_vef_iterator(vef)
  allocate(p4est_vef_iterator_t :: vef, stat=istat); check(istat==0)
  call vef%create(this)
end subroutine p4est_create_vef_iterator

subroutine p4est_free_vef_iterator ( this, vef )
  implicit none
  class(p4est_serial_triangulation_t) , intent(in)    :: this
  class(vef_iterator_t), allocatable , intent(inout) :: vef
  integer(ip) :: istat
  if ( allocated(vef) ) then
     call vef%free()
     deallocate(vef, stat=istat); check(istat==0);
  end if
end subroutine p4est_free_vef_iterator

SUBROUTINE p4est_eval_connectivity(Conn,nbSide,Flip,Mortar)
  IMPLICIT NONE
  INTEGER(P4EST_F90_QLEVEL),INTENT(IN)   :: Conn   ! p4est Side,Flip,Mortar encoding
  INTEGER(ip)              ,INTENT(OUT)  :: nbSide ! Neighbour side in p4est convention: 1..4
  INTEGER(ip)              ,INTENT(OUT)  :: Flip   ! Flip in p4est convention: 1..2
  INTEGER(ip)              ,INTENT(OUT)  :: Mortar ! Mortar in p4est convention: 1..2,
                                                   ! -1 if conformal, 3 if half-size neighbour
  INTEGER(ip) :: tmp
  !------------------------------------------------------------------------------------------
  ! The quad_to_quad list stores one value for each local quadrant's face.
  ! This value is in 0..local_num_quadrants-1 for local quadrants, or in
  ! local_num_quadrants + (0..ghost_num_quadrants-1) for ghost quadrants.
  ! The quad_to_face list has equally many entries which are either:
  ! 1. A value of v = 0..7 indicates one same-size neighbor.
  !    This value is decoded as v = r * 4 + nf, where nf = 0..3 is the
  !    neigbbor's connecting face num and r = 0..1 is the relative
  !    orientation of the neighbor's face, see p4est_connectivity.h.
  ! 2. A value of v = 8..23 indicates a double-size neighbor.
  !    This value is decoded as v = 8 + h * 8 + r * 4 + nf, where
  !    r and nf are as above and h = 0..1 is the num of the subface.
  ! 3. A value of v = -8..-1 indicates two half-size neighbors.
  !    In this case the corresponding quad_to_quad index points into the
  !    quad_to_half array which stores two quadrant nums per index,
  !    and the orientation of the smaller faces follows from 8 + v.
  !    The entries of quad_to_half encode between local and ghost quadrant
  !    in the same way as the quad_to_quad values described above.
  ! A quadrant on the boundary of the forest sees itself and its face num.

  SELECT CASE(Conn)
  CASE(0:7)   ! 1. conformal neighbour
    nbSide = MOD(Conn,4)+1     ! 1..4
    Flip   = Conn/4+1          ! 1..2
    Mortar = -1
  CASE(8:23) ! 2. double-size neighbour
    tmp    = MOD(Conn,8)       ! 0..7
    nbSide = MOD(tmp,4)+1      ! 1..4 
    Flip   = tmp/4+1           ! 1..2
    Mortar = (Conn-tmp-8)/8+1  ! 1..2 
  CASE(-8:-1) ! 3. half-size neighbour
    tmp    = Conn+8
    nbSide = MOD(tmp,4)+1     ! 1..4
    Flip   = tmp/4+1          ! 1..2
    Mortar = 3 
  CASE DEFAULT
    ! This type of face connectivity does not exist
    assert(.false.)
  END SELECT

END SUBROUTINE p4est_eval_connectivity

SUBROUTINE p8est_eval_connectivity(Conn,nbSide,Flip,Mortar)
! MODULES
! IMPLICIT VARIABLE HANDLING
IMPLICIT NONE
!-----------------------------------------------------------------------------------------------------------------------------------
! INPUT VARIABLES
INTEGER(KIND=1),INTENT(IN)   :: Conn   ! p4est Side,Flip,Mortar encoding
!-----------------------------------------------------------------------------------------------------------------------------------
! OUTPUT VARIABLES
INTEGER,INTENT(OUT)          :: nbSide ! Neighbour side in p4est convention: 1..6
INTEGER,INTENT(OUT)          :: Flip   ! Flip in p4est convention: 1..4
INTEGER,INTENT(OUT)          :: Mortar ! Mortar in p4est convention: 1..4,
                                       ! -1 if conformal, 5 if half-size neighbour
!-----------------------------------------------------------------------------------------------------------------------------------
! LOCAL VARIABLES
INTEGER                      :: tmp
!-----------------------------------------------------------------------------------------------------------------------------------
! The quad_to_quad list stores one value for each local quadrant's face.
! This value is in 0..local_num_quadrants-1 for local quadrants, or in
! local_num_quadrants + (0..ghost_num_quadrants-1) for ghost quadrants.
! The quad_to_face list has equally many entries which are either:
! 1. A value of v = 0..23 indicates one same-size neighbor.
!    This value is decoded as v = r * 6 + nf, where nf = 0..5 is the
!    neigbbor's connecting face num and r = 0..3 is the relative
!    orientation of the neighbor's face, see p8est_connectivity.h.
! 2. A value of v = 24..119 indicates a double-size neighbor.
!    This value is decoded as v = 24 + h * 24 + r * 6 + nf, where
!    r and nf are as above and h = 0..3 is the num of the subface.
! 3. A value of v = -24..-1 indicates four half-size neighbors.
!    In this case the corresponding quad_to_quad index points into the
!    quad_to_half array which stores four quadrant nums per index,
!    and the orientation of the smaller faces follows from 24 + v.
!    The entries of quad_to_half encode between local and ghost quadrant
!    in the same way as the quad_to_quad values described above.
! A quadrant on the boundary of the forest sees itself and its face num.

SELECT CASE(Conn)
CASE(0:23)   ! 1. conformal neighbour
  nbSide = MOD(Conn,6)       ! 0..5
  Flip   = (Conn-nbSide)/6   ! 0..3
  Mortar = -1
CASE(24:119) ! 2. double-size neighbour
  tmp    = MOD(Conn,24)      ! 0..3
  nbSide = MOD(tmp,6)        ! 0..5  
  Flip   = (tmp-nbSide)/6    ! 0..3
  Mortar = (Conn-tmp-24)/24  ! 0..3
  Mortar = Mortar + 1        ! 1..4
CASE(-24:-1) ! 3. half-size neighbour
  tmp    = Conn+24
  nbSide = MOD(tmp,6)       ! 0..5
  Flip   = (tmp-nbSide)/6   ! 0..3
  Mortar = 5
CASE DEFAULT
  massert(.false., 'This type of face connectivity does not exist, has to be -24<f<23')
END SELECT
  nbSide = nbSide +1  ! 1 .. 6
  Flip   = Flip +  1  ! 1 .. 4
END SUBROUTINE p8est_eval_connectivity



SUBROUTINE p8est_eval_edge_connectivity(Conn,nbSide,Flip,Mortar)
! MODULES
! IMPLICIT VARIABLE HANDLING
IMPLICIT NONE
!-----------------------------------------------------------------------------------------------------------------------------------
! INPUT VARIABLES
INTEGER(KIND=1),INTENT(IN)   :: Conn   ! p4est Side,Flip,Mortar encoding
!-----------------------------------------------------------------------------------------------------------------------------------
! OUTPUT VARIABLES
INTEGER,INTENT(OUT)          :: nbSide ! Neighbour side in p4est convention: 1..12
INTEGER,INTENT(OUT)          :: Flip   ! Flip in p4est convention: 1..2
INTEGER,INTENT(OUT)          :: Mortar ! Mortar in p4est convention: 1..2,
                                       ! -1 if conformal, 3 if half-size neighbour
!-----------------------------------------------------------------------------------------------------------------------------------
! LOCAL VARIABLES
INTEGER                      :: tmp
!-----------------------------------------------------------------------------------------------------------------------------------
! The quad_to_quad_by_edge list stores one value for each local quadrant's edge.
! This value is in 0..local_num_quadrants-1 for local quadrants, or in
! local_num_quadrants + (0..ghost_num_quadrants-1) for ghost quadrants.
! The quad_to_edge list has equally many entries which are either:
! 1. A value of v = 0..23 indicates one same-size neighbor.
!    This value is decoded as v = r * 12 + ne, where ne = 0..11 is the
!    neighbor's connecting edge number and r = 0..1 is the relative
!    orientation of the neighbor's edge.
! 2. A value of v = 24..71 indicates a double-size neighbor.
!    This value is decoded as v = 24 + h * 24 + r * 12 + ne, where
!    r and nf are as above and h = 0..1 is the number of the subedge.
! 3. A value of v = -24..-1 indicates two half-size neighbors.
!    In this case the corresponding quad_to_quad_by_edge index points into the
!    quad_to_half_by_edge array which stores two quadrant numbers per index,
!    and the orientation of the smaller edges follows from 24 + v.
!    The entries of quad_to_half encode between local and ghost quadrant
!    in the same way as the quad_to_quad values described above.
! A quadrant on the boundary of the forest sees itself and its face number.*/

SELECT CASE(Conn)
CASE(0:23)   ! 1. conformal neighbour
  nbSide = MOD(Conn,12)       ! 0..11
  Flip   = (Conn-nbSide)/12   ! 0..1
  Mortar = -1
CASE(24:71) ! 2. double-size neighbour
  tmp    = MOD(Conn,24)      ! 0..23
  nbSide = MOD(tmp,12)       ! 0..11  
  Flip   = (tmp-nbSide)/12   ! 0..3
  Mortar = (Conn-tmp-24)/24  ! 0..1
  Mortar = Mortar + 1        ! 1..2
CASE(-24:-1) ! 3. half-size neighbour
  tmp    = Conn+24
  nbSide = MOD(tmp,12)       ! 0..11
  Flip   = (tmp-nbSide)/12   ! 0..1
  Mortar = 3
CASE DEFAULT
  massert(.false., 'This type of edge connectivity does not exist, has to be -24<f<23')
END SELECT
  nbSide = nbSide +1  ! 1 .. 12
  Flip   = Flip +  1  ! 1 .. 2
END SUBROUTINE p8est_eval_edge_connectivity



function p4est_get_jcell_icorner(icell_iface,jcell_iface,icell_icorner,corner_and_face_2_corner_in_face,face_2_corners)
  implicit none
  integer(ip), intent(in) :: icell_iface 
  integer(ip), intent(in) :: jcell_iface 
  integer(ip), intent(in) :: icell_icorner 
  integer(ip), intent(in) :: corner_and_face_2_corner_in_face(:,:)
  integer(ip), intent(in) :: face_2_corners(:,:)
  integer(ip) :: p4est_get_jcell_icorner
  integer(ip) :: corner_in_face
  corner_in_face = corner_and_face_2_corner_in_face(icell_iface,icell_icorner)
  assert(corner_in_face/=-1)
  p4est_get_jcell_icorner = face_2_corners(corner_in_face,jcell_iface)
end function p4est_get_jcell_icorner

#ifndef ENABLE_P4EST
  subroutine p4est_serial_triangulation_not_enabled_error(this)
    class(p4est_serial_triangulation_t), intent(in) :: this
    write (stderr,*) 'Error: FEMPAR was not compiled with -DENABLE_P4EST.'
    write (stderr,*) "Error: You must activate this CPP macro in order to use P4EST"
    check(.false.)
  end subroutine p4est_serial_triangulation_not_enabled_error
#endif
