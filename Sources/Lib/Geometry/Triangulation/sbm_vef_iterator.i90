! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine vef_iterator_create ( this, triangulation )
  implicit none
  class(vef_iterator_t)        , intent(inout) :: this
  class(triangulation_t), target, intent(in)    :: triangulation
  call this%free()
  this%triangulation => triangulation
  call this%first()
end subroutine vef_iterator_create

subroutine vef_iterator_create_for_extensions ( this, triangulation )
  implicit none
  class(vef_iterator_t)        , intent(inout) :: this
  class(triangulation_t), target, intent(in)    :: triangulation
  this%gid = 1
  this%triangulation => triangulation
end subroutine vef_iterator_create_for_extensions

subroutine vef_iterator_free ( this)
  implicit none
  class(vef_iterator_t), intent(inout) :: this
  this%gid = -1
  nullify ( this%triangulation )
end subroutine vef_iterator_free

subroutine vef_iterator_free_for_extensions( this)
  implicit none
  class(vef_iterator_t), intent(inout) :: this
  this%gid = -1
  nullify ( this%triangulation )
end subroutine vef_iterator_free_for_extensions

subroutine vef_iterator_first(this)
  implicit none
  class(vef_iterator_t), intent(inout) :: this
  this%gid = 1
end subroutine vef_iterator_first

subroutine vef_iterator_next(this)
  implicit none
  class(vef_iterator_t), intent(inout) :: this
  this%gid = this%gid + 1
end subroutine vef_iterator_next

function vef_iterator_has_finished(this)
  implicit none
  class(vef_iterator_t), intent(in) :: this
  logical :: vef_iterator_has_finished
  vef_iterator_has_finished = (this%gid > this%triangulation%num_vefs)
end function vef_iterator_has_finished

function vef_iterator_get_gid(this)
  implicit none
  class(vef_iterator_t), intent(in) :: this
  integer(ip) :: vef_iterator_get_gid
  vef_iterator_get_gid = this%gid
end function vef_iterator_get_gid

subroutine vef_iterator_set_gid(this, gid)
  implicit none
  class(vef_iterator_t), intent(inout) :: this
  integer(ip)           , intent(in)    :: gid
  this%gid = gid
end subroutine vef_iterator_set_gid

function vef_iterator_get_triangulation(this)
  implicit none
  class(vef_iterator_t), intent(in) :: this
  class(triangulation_t), pointer :: vef_iterator_get_triangulation
  vef_iterator_get_triangulation => this%triangulation
end function vef_iterator_get_triangulation

function vef_iterator_is_facet(this)
  implicit none
  class(vef_iterator_t), intent(in) :: this
  logical :: vef_iterator_is_facet
  vef_iterator_is_facet = (this%get_dim() == (this%triangulation%get_num_dims()-1))
end function vef_iterator_is_facet

function vef_iterator_is_within_valid_range (this)
  implicit none
  class(vef_iterator_t), intent(in) :: this
  logical :: vef_iterator_is_within_valid_range 
  vef_iterator_is_within_valid_range  = (this%gid >= 1 .and. .not. this%has_finished())
end function vef_iterator_is_within_valid_range

subroutine vef_iterator_update_sub_triangulation( this )
  implicit none
  class(vef_iterator_t), intent(inout) :: this
  mcheck(.false.,'This procedure can only be called by some child derived data types')
end subroutine vef_iterator_update_sub_triangulation

function vef_iterator_get_mc_case(this)
  implicit none
  class(vef_iterator_t), intent(in) :: this
  integer(ip) :: vef_iterator_get_mc_case
  mcheck(.false.,'This procedure can only be called by some child derived data types')
end function vef_iterator_get_mc_case

function vef_iterator_get_facet_lid(this)
  implicit none
  class(vef_iterator_t), intent(in) :: this
  integer(ip) :: vef_iterator_get_facet_lid
  mcheck(.false.,'This procedure can only be called by some child derived data types')
end function vef_iterator_get_facet_lid

function vef_iterator_get_num_subvefs( this ) result ( num_subvefs )
  implicit none
  class(vef_iterator_t), intent(in)    :: this
  integer(ip) :: num_subvefs
  mcheck(.false.,'This procedure can only be called by some child derived data types')
end function vef_iterator_get_num_subvefs

function vef_iterator_get_num_subvef_nodes( this ) result ( num_nodes_subvef )
  implicit none
  class(vef_iterator_t), intent(in)    :: this
  integer(ip) :: num_nodes_subvef
  mcheck(.false.,'This procedure can only be called by some child derived data types')
end function vef_iterator_get_num_subvef_nodes

subroutine vef_iterator_get_phys_coords_of_subvef( this, subvef, points )
  implicit none
  class(vef_iterator_t), intent(in)    :: this
  integer(ip),                     intent(in)    :: subvef
  type(point_t),                   intent(inout) :: points(:)
  mcheck(.false.,'This procedure can only be called by some child derived data types')
end subroutine vef_iterator_get_phys_coords_of_subvef

subroutine vef_iterator_get_ref_coords_of_subvef( this, subvef, points )
  implicit none
  class(vef_iterator_t), intent(in)    :: this
  integer(ip),                     intent(in)    :: subvef
  type(point_t),                   intent(inout) :: points(:)
  mcheck(.false.,'This procedure can only be called by some child derived data types')
end subroutine vef_iterator_get_ref_coords_of_subvef

function vef_iterator_is_cut( this ) result ( is_cut )
  implicit none
  class(vef_iterator_t), intent(in)    :: this
  logical :: is_cut
  mcheck(.false.,'This procedure can only be called by some child derived data types')
end function vef_iterator_is_cut

function vef_iterator_is_interior( this ) result ( is_interior )
  implicit none
  class(vef_iterator_t), intent(in)  :: this
  logical :: is_interior
  mcheck(.false.,'This procedure can only be called by some child derived data types')
end function vef_iterator_is_interior

function vef_iterator_is_exterior( this ) result ( is_exterior )
  implicit none
  class(vef_iterator_t), intent(in)  :: this
  logical :: is_exterior
  mcheck(.false.,'This procedure can only be called by some child derived data types')
end function vef_iterator_is_exterior

function vef_iterator_is_interior_subvef( this, subvef ) result ( is_in )
  implicit none
  class(vef_iterator_t), intent(in)  :: this
  integer(ip), intent(in) :: subvef
  logical :: is_in
  mcheck(.false.,'This procedure can only be called by some child derived data types')
end function vef_iterator_is_interior_subvef

function vef_iterator_is_exterior_subvef( this, subvef ) result ( is_out )
  implicit none
  class(vef_iterator_t), intent(in)  :: this
  integer(ip), intent(in) :: subvef
  logical :: is_out
  mcheck(.false.,'This procedure can only be called by some child derived data types')
end function vef_iterator_is_exterior_subvef

!function vef_iterator_is_proper ( this ) 
!  implicit none
!  class(vef_iterator_t), intent(in) :: this
!  logical :: vef_iterator_is_proper 
!  assert ( this%is_within_valid_range() )
!  vef_iterator_is_proper = .true.
!end function vef_iterator_is_proper 

!function vef_iterator_get_num_improper_cells_around (this)
!  implicit none
!  class(vef_iterator_t), intent(in) :: this
!  integer(ip) :: vef_iterator_get_num_improper_cells_around
!  assert ( this%is_within_valid_range() )
!  vef_iterator_get_num_improper_cells_around  =  0
!end function vef_iterator_get_num_improper_cells_around

!subroutine vef_iterator_get_improper_cell_around (this, icell_around, cell)
!  implicit none
!  class(vef_iterator_t) , intent(in)    :: this
!  integer(ip)           , intent(in)    :: icell_around
!  class(cell_iterator_t), intent(inout) :: cell
!  integer(ip)                          :: position_in_lst_cells_around
!  integer(ip)                          :: icell 
!  assert ( this%is_within_valid_range() )
!  assert ( .false. )
!end subroutine vef_iterator_get_improper_cell_around

!function vef_iterator_get_improper_cell_around_ivef(this)
!  implicit none
!  class(vef_iterator_t) , intent(in)    :: this
!  integer(ip) :: vef_iterator_get_improper_cell_around_ivef
!  assert ( this%is_within_valid_range() )
!  assert ( .false. )
!end function vef_iterator_get_improper_cell_around_ivef

!function vef_iterator_get_improper_cell_around_subvef(this)
!  implicit none
!  class(vef_iterator_t) , intent(in)    :: this
!  integer(ip) :: vef_iterator_get_improper_cell_around_subvef
!  assert ( this%is_within_valid_range() )
!  vef_iterator_get_improper_cell_around_subvef = 0
!end function vef_iterator_get_improper_cell_around_subvef

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Extensions
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

! We need cells around to evaluate it. Storing faces of elements, 
! edges of faces and vertices of edges, this would not be necessary.
!subroutine vef_iterator_get_vertices(this,vertices)
!  implicit none
!  class(vef_iterator_t), intent(in) :: this
!  integer(ip)                       :: vertices(:)
!  type(cell_iterator_t)             :: cell
!  type(list_t), pointer             :: vertices_x_vef
!  integer(ip) ::  ivef, cell_num_vefs, cell_type,num_vertices, istat, i
!  type(list_iterator_t) :: vertices_iterator

!  call this%get_cell_around (1, cell) ! there is always one element around
!  ivef = cell%get_vef_lid_from_ggid(this%get_gid())
!  cell_num_vefs = cell%get_num_vefs()
!  call this%base_static_triangulation%reference_fe_geo_index%get(key=cell_num_vefs,val=cell_type,stat=istat)
!  assert(istat==key_found)
!  vertices_x_vef => this%base_static_triangulation%reference_fe_geo_list(cell_type)%p%get_vertices_vef()
!  vertices_iterator = vertices_x_vef%create_iterator(ivef)
!  num_vertices = vertices_iterator%get_size()
!  ! Alternatively:
!  !num_vertices = this%reference_fe_geo_list(cell_type)%p%get_num_vertices_vef(ivef)
!  assert(size(vertices)>=num_vertices)
!  do i=1, num_vertices
!     vertices(i) = vertices_iterator%get_current()
!     call vertices_iterator%next()
!  enddo
!end subroutine vef_iterator_get_vertices
