! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine cell_iterator_create ( this, triangulation )
  implicit none
  class(cell_iterator_t)        , intent(inout) :: this
  class(triangulation_t), target, intent(in)    :: triangulation
  call this%free()
  this%triangulation => triangulation
  call this%first()
end subroutine cell_iterator_create

subroutine cell_iterator_free ( this)
  implicit none
  class(cell_iterator_t), intent(inout) :: this
  this%gid = -1
  nullify ( this%triangulation )
end subroutine cell_iterator_free

subroutine cell_iterator_first(this)
  implicit none
  class(cell_iterator_t), intent(inout) :: this
  this%gid = 1
end subroutine cell_iterator_first

subroutine cell_iterator_next(this)
  implicit none
  class(cell_iterator_t), intent(inout) :: this
  this%gid = this%gid + 1
end subroutine cell_iterator_next

function cell_iterator_has_finished(this)
  implicit none
  class(cell_iterator_t), intent(in) :: this
  logical :: cell_iterator_has_finished
  cell_iterator_has_finished = (this%gid > this%triangulation%num_local_cells + &
                                           this%triangulation%num_ghost_cells)
end function cell_iterator_has_finished

pure function cell_iterator_get_gid(this)
  implicit none
  class(cell_iterator_t), intent(in) :: this
  integer(ip) :: cell_iterator_get_gid
  cell_iterator_get_gid = this%gid
end function cell_iterator_get_gid

subroutine cell_iterator_set_gid(this, gid)
  implicit none
  class(cell_iterator_t), intent(inout) :: this
  integer(ip)           , intent(in)    :: gid
  this%gid = gid
end subroutine cell_iterator_set_gid

function cell_iterator_get_triangulation(this)
  implicit none
  class(cell_iterator_t), intent(in) :: this
  class(triangulation_t), pointer :: cell_iterator_get_triangulation
  cell_iterator_get_triangulation => this%triangulation
end function cell_iterator_get_triangulation

function cell_iterator_get_mysubpart ( this )
  implicit none
  class(cell_iterator_t), intent(in) :: this
  integer(ip) :: cell_iterator_get_mysubpart
  assert ( this%get_set_id() >= 0 )
  ! my_subpart = my_part + (set_id + disconnected_set_id*upper_bound_set_ids)*num_parts
  cell_iterator_get_mysubpart = this%get_my_part() + this%get_set_id()*this%triangulation%cell_import%get_num_parts()  & 
     +  this%get_disconnected_set_id()*(this%triangulation%get_max_cell_set_id()+1)*this%triangulation%cell_import%get_num_parts()                                 
end function cell_iterator_get_mysubpart

function cell_iterator_get_mysubpart_lid ( this )
  implicit none
  class(cell_iterator_t), intent(in) :: this
  integer(ip) :: cell_iterator_get_mysubpart_lid
  integer(ip) :: istat
  call this%triangulation%g2l_subparts%get(key=this%get_my_subpart(), &
                                                       val=cell_iterator_get_mysubpart_lid, &
                                                       stat=istat)
  assert ( istat == key_found )
end function cell_iterator_get_mysubpart_lid

!function cell_iterator_get_level(this)
!  implicit none
!  class(cell_iterator_t), intent(in) :: this
!  integer(ip) :: cell_iterator_get_level
!  assert ( this%gid >= 1 .and. .not. this%has_finished() )
!  cell_iterator_get_level = 0
!end function cell_iterator_get_level

!function cell_iterator_is_ancestor(this,child_level,child_linear_id)
!  implicit none
!  class(cell_iterator_t), intent(in) :: this
!  integer(ip)           , intent(in) :: child_level
!  integer(ip)           , intent(in) :: child_linear_id
!  logical :: cell_iterator_is_ancestor
!  assert(.false.)
!end function cell_iterator_is_ancestor

!subroutine cell_iterator_set_for_coarsening(this)
!  implicit none
!  class(cell_iterator_t), intent(inout) :: this
!  assert(.false.)
!end subroutine cell_iterator_set_for_coarsening

!subroutine cell_iterator_set_for_refinement(this)
!  implicit none
!  class(cell_iterator_t), intent(inout) :: this
!  assert(.false.)
!end subroutine cell_iterator_set_for_refinement

!subroutine cell_iterator_set_for_do_nothing(this)
!  implicit none
!  class(cell_iterator_t), intent(inout) :: this
!  assert(.false.)
!end subroutine cell_iterator_set_for_do_nothing

!function cell_iterator_get_transformation_flag(this)
!  implicit none
!  class(cell_iterator_t), intent(inout) :: this
!  integer(ip) :: cell_iterator_get_transformation_flag
!  assert(.false.)
!end function cell_iterator_get_transformation_flag

!subroutine cell_iterator_update_sub_triangulation( this )
!  implicit none
!  class(cell_iterator_t), intent(inout) :: this
!  mcheck(.false.,'This subroutine can only be called by some descendent classes')
!end subroutine cell_iterator_update_sub_triangulation

!function cell_iterator_get_num_subcells( this ) result ( num_subcells )
!  implicit none
!  class(cell_iterator_t), intent(in) :: this
!  integer(ip) :: num_subcells
!  mcheck(.false.,'This subroutine can only be called by some descendent classes')
!end function cell_iterator_get_num_subcells

!function cell_iterator_get_num_subcell_nodes( this ) result ( num_nodes_subcell )
!  implicit none
!  class(cell_iterator_t), intent(in) :: this
!  integer(ip) :: num_nodes_subcell
!  mcheck(.false.,'This subroutine can only be called by some descendent classes')
!end function cell_iterator_get_num_subcell_nodes

!subroutine cell_iterator_get_phys_coords_of_subcell( this, subcell, points)
!  implicit none
!  class(cell_iterator_t), intent(in)    :: this
!  integer(ip),                     intent(in)    :: subcell
!  type(point_t),                   intent(inout) :: points(:)
!  mcheck(.false.,'This subroutine can only be called by some descendent classes')
!end subroutine cell_iterator_get_phys_coords_of_subcell

!subroutine cell_iterator_get_ref_coords_of_subcell( this, subcell, points)
!  implicit none
!  class(cell_iterator_t), intent(in)    :: this
!  integer(ip),                     intent(in)    :: subcell
!  type(point_t),                   intent(inout) :: points(:)
!  mcheck(.false.,'This subroutine can only be called by some descendent classes')
!end subroutine cell_iterator_get_ref_coords_of_subcell

!function cell_iterator_get_num_subfacets( this ) result ( num_subfacets )
!  implicit none
!  class(cell_iterator_t), intent(in)    :: this
!  integer(ip) :: num_subfacets
!  mcheck(.false.,'This subroutine can only be called by some descendent classes')
!end function cell_iterator_get_num_subfacets

!function cell_iterator_get_num_subfacet_nodes( this ) result ( num_nodes_subfacet )
!  implicit none
!  class(cell_iterator_t), intent(in)    :: this
!  integer(ip) :: num_nodes_subfacet
!  mcheck(.false.,'This subroutine can only be called by some descendent classes')
!end function cell_iterator_get_num_subfacet_nodes

!subroutine cell_iterator_get_phys_coords_of_subfacet( this, subfacet, points )
!  implicit none
!  class(cell_iterator_t), intent(in)    :: this
!  integer(ip),                     intent(in)    :: subfacet
!  type(point_t),                   intent(inout) :: points(:)
!  mcheck(.false.,'This subroutine can only be called by some descendent classes')
!end subroutine cell_iterator_get_phys_coords_of_subfacet

!subroutine cell_iterator_get_ref_coords_of_subfacet( this, subfacet, points )
!  implicit none
!  class(cell_iterator_t), intent(in)    :: this
!  integer(ip),                     intent(in)    :: subfacet
!  type(point_t),                   intent(inout) :: points(:)
!  mcheck(.false.,'This subroutine can only be called by some descendent classes')
!end subroutine cell_iterator_get_ref_coords_of_subfacet
! 
!function cell_iterator_is_cut(this)
!  implicit none
!  class(cell_iterator_t), intent(in) :: this
!  logical :: cell_iterator_is_cut
!  mcheck(.false.,'This subroutine can only be called by some descendent classes')
!end function cell_iterator_is_cut

!function cell_iterator_is_interior(this)
!  implicit none
!  class(cell_iterator_t), intent(in) :: this
!  logical :: cell_iterator_is_interior
!  mcheck(.false.,'This subroutine can only be called by some descendent classes')
!end function cell_iterator_is_interior

!function cell_iterator_is_exterior(this)
!  implicit none
!  class(cell_iterator_t), intent(in) :: this
!  logical :: cell_iterator_is_exterior
!  mcheck(.false.,'This subroutine can only be called by some descendent classes')
!end function cell_iterator_is_exterior

!function cell_iterator_is_interior_subcell( this, subcell ) result ( is_in )
!  implicit none
!  class(cell_iterator_t), intent(in)  :: this
!  integer(ip), intent(in) :: subcell
!  logical :: is_in
!  mcheck(.false.,'This subroutine can only be called by some descendent classes')
!end function cell_iterator_is_interior_subcell

!function cell_iterator_is_exterior_subcell( this, subcell ) result ( is_out )
!  implicit none
!  class(cell_iterator_t), intent(in)  :: this
!  integer(ip), intent(in) :: subcell
!  logical :: is_out
!  mcheck(.false.,'This subroutine can only be called by some descendent classes')
!end function cell_iterator_is_exterior_subcell

