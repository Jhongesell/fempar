! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine cell_iterator_create ( this, triangulation )
  implicit none
  class(cell_iterator_t)        , intent(inout) :: this
  class(triangulation_t), target, intent(in)    :: triangulation
  call this%free()
  this%triangulation => triangulation
  call this%first()
end subroutine cell_iterator_create

subroutine cell_iterator_free ( this)
  implicit none
  class(cell_iterator_t), intent(inout) :: this
  this%gid = -1
  nullify ( this%triangulation )
end subroutine cell_iterator_free

subroutine cell_iterator_free_final(this)
  implicit none
  type(cell_iterator_t), intent(inout) :: this
  assert(this%gid == -1)
  assert(.not. associated(this%triangulation ))
end subroutine cell_iterator_free_final

subroutine cell_iterator_first(this)
  implicit none
  class(cell_iterator_t), intent(inout) :: this
  this%gid = 1
end subroutine cell_iterator_first

subroutine cell_iterator_next(this)
  implicit none
  class(cell_iterator_t), intent(inout) :: this
  this%gid = this%gid + 1
end subroutine cell_iterator_next

function cell_iterator_has_finished(this)
  implicit none
  class(cell_iterator_t), intent(in) :: this
  logical :: cell_iterator_has_finished
  cell_iterator_has_finished = (this%gid > this%triangulation%num_local_cells + &
                                           this%triangulation%num_ghost_cells)
end function cell_iterator_has_finished

function cell_iterator_get_gid(this)
  implicit none
  class(cell_iterator_t), intent(inout) :: this
  integer(ip) :: cell_iterator_get_gid
  cell_iterator_get_gid = this%gid
end function cell_iterator_get_gid

subroutine cell_iterator_set_gid(this, gid)
  implicit none
  class(cell_iterator_t), intent(inout) :: this
  integer(ip)           , intent(in)    :: gid
  this%gid = gid
end subroutine cell_iterator_set_gid

function cell_iterator_get_triangulation(this)
  implicit none
  class(cell_iterator_t), intent(in) :: this
  class(triangulation_t), pointer :: cell_iterator_get_triangulation
  cell_iterator_get_triangulation => this%triangulation
end function cell_iterator_get_triangulation

function bst_cell_iterator_get_mysubpart ( this )
  implicit none
  class(bst_cell_iterator_t), intent(in) :: this
  integer(ip) :: bst_cell_iterator_get_mysubpart
  assert ( this%get_set_id() >= 0 )
  bst_cell_iterator_get_mysubpart = (this%get_set_id())*this%base_static_triangulation%cell_import%get_num_parts() + this%get_my_part()
end function bst_cell_iterator_get_mysubpart

function bst_cell_iterator_get_mysubpart_lid ( this )
  implicit none
  class(bst_cell_iterator_t), intent(in) :: this
  integer(ip) :: bst_cell_iterator_get_mysubpart_lid
  integer(ip) :: istat
  call this%base_static_triangulation%g2l_subparts%get(key=this%get_my_subpart(), &
                                                       val=bst_cell_iterator_get_mysubpart_lid, &
                                                       stat=istat)
  assert ( istat == key_found )
end function bst_cell_iterator_get_mysubpart_lid



