! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine cell_iterator_create ( this, base_static_triangulation )
  implicit none
  class(cell_iterator_t)                    , intent(inout) :: this
  class(base_static_triangulation_t), target, intent(in)    :: base_static_triangulation
  call this%free()
  this%base_static_triangulation => base_static_triangulation
  call this%first()
end subroutine cell_iterator_create

subroutine cell_iterator_free ( this)
  implicit none
  class(cell_iterator_t), intent(inout) :: this
  this%lid = -1
  nullify ( this%base_static_triangulation )
end subroutine cell_iterator_free

subroutine cell_iterator_free_final(this)
  implicit none
  type(cell_iterator_t), intent(inout) :: this
  assert(this%lid == -1)
  assert(.not. associated(this%base_static_triangulation ))
end subroutine cell_iterator_free_final

subroutine cell_iterator_next(this)
  implicit none
  class(cell_iterator_t), intent(inout) :: this
  this%lid = this%lid + 1
end subroutine cell_iterator_next

subroutine cell_iterator_first(this)
  implicit none
  class(cell_iterator_t), intent(inout) :: this
  this%lid = 1
end subroutine cell_iterator_first

subroutine cell_iterator_last(this)
  implicit none
  class(cell_iterator_t), intent(inout) :: this
  this%lid = this%base_static_triangulation%num_local_cells + &
             this%base_static_triangulation%num_ghost_cells
end subroutine cell_iterator_last

subroutine cell_iterator_set_lid(this, lid)
  implicit none
  class(cell_iterator_t), intent(inout) :: this
  integer(ip)        , intent(in)    :: lid
  this%lid = lid
end subroutine cell_iterator_set_lid

subroutine cell_iterator_set_gid(this, gid)
  implicit none
  class(cell_iterator_t), intent(inout) :: this
  integer(igp)          , intent(in)    :: gid
  this%base_static_triangulation%cells_gid(this%lid) = gid
end subroutine cell_iterator_set_gid

subroutine cell_iterator_set_mypart(this, mypart)
  implicit none
  class(cell_iterator_t), intent(inout) :: this
  integer(ip)           , intent(in)    :: mypart
  this%base_static_triangulation%cells_mypart(this%lid) = mypart
end subroutine cell_iterator_set_mypart

function cell_iterator_get_triangulation(this)
  implicit none
  class(cell_iterator_t), intent(in) :: this
  class(base_static_triangulation_t), pointer :: cell_iterator_get_triangulation
  cell_iterator_get_triangulation => this%base_static_triangulation
end function cell_iterator_get_triangulation

function cell_iterator_has_finished(this)
  implicit none
  class(cell_iterator_t), intent(in) :: this
  logical :: cell_iterator_has_finished
  cell_iterator_has_finished = (this%lid > this%base_static_triangulation%num_local_cells + &
       this%base_static_triangulation%num_ghost_cells)
end function cell_iterator_has_finished

function cell_iterator_get_reference_fe_geo (this)
  implicit none
  class(cell_iterator_t), intent(in) :: this
  class(lagrangian_reference_fe_t), pointer     :: cell_iterator_get_reference_fe_geo
  integer(ip) :: cell_type, istat
  assert ( this%lid >= 1 .and. .not. this%has_finished() )
  call this%base_static_triangulation%reference_fe_geo_index%get(key=this%get_num_vefs(),val=cell_type,stat=istat)
  assert(istat==key_found)
  cell_iterator_get_reference_fe_geo => this%base_static_triangulation%reference_fe_geo_list(cell_type)%p
end function cell_iterator_get_reference_fe_geo

function cell_iterator_get_reference_fe_geo_id (this) 
  implicit none
  class(cell_iterator_t), intent(in) :: this
  integer(ip) :: cell_iterator_get_reference_fe_geo_id
  integer(ip) :: istat
  call this%base_static_triangulation%reference_fe_geo_index%get(key=this%get_num_vefs(), &
                                                                 val=cell_iterator_get_reference_fe_geo_id, &
                                                                 stat=istat)
end function cell_iterator_get_reference_fe_geo_id

subroutine cell_iterator_get_coordinates (this, cell_coordinates)
  implicit none
  class(cell_iterator_t), intent(in)    :: this
  type(point_t)        ,  intent(inout) :: cell_coordinates(:)
  integer(ip)                    :: inode
  class(lagrangian_reference_fe_t), pointer :: reference_fe_geo
  assert ( this%lid >= 1 .and. .not. this%has_finished() )
  assert ( allocated ( this%base_static_triangulation%coordinates ) )
  reference_fe_geo => this%get_reference_fe_geo()
  if ( this%is_local() ) then
    do inode=1, reference_fe_geo%get_number_shape_functions()
      cell_coordinates(inode) = this%base_static_triangulation%coordinates(this%get_node_lid(inode))
    end do
 else
    do inode=1, reference_fe_geo%get_number_shape_functions()
      cell_coordinates(inode) = 0.0_rp
    end do
 end if
end subroutine cell_iterator_get_coordinates

subroutine cell_iterator_set_coordinates (this, cell_coordinates)
  implicit none
  class(cell_iterator_t), intent(inout) :: this
  type(point_t)        ,  intent(in)    :: cell_coordinates(:)
  integer(ip)                    :: inode
  class(lagrangian_reference_fe_t), pointer :: reference_fe_geo

  assert ( this%lid >= 1 .and. .not. this%has_finished() )
  assert ( allocated ( this%base_static_triangulation%coordinates ) )
  
   reference_fe_geo => this%get_reference_fe_geo()
   do inode=1, reference_fe_geo%get_number_shape_functions()
     this%base_static_triangulation%coordinates(this%get_node_lid(inode)) = cell_coordinates(inode)
   end do
  
end subroutine cell_iterator_set_coordinates

pure function cell_iterator_get_lid (this)
  implicit none
  class(cell_iterator_t), intent(in) :: this
  integer(ip) :: cell_iterator_get_lid
  cell_iterator_get_lid = this%lid
end function cell_iterator_get_lid

function cell_iterator_get_gid (this)
  implicit none
  class(cell_iterator_t), intent(in) :: this
  integer(igp) :: cell_iterator_get_gid
  assert ( this%lid >= 1 .and. .not. this%has_finished() )
  cell_iterator_get_gid = this%base_static_triangulation%cells_gid(this%lid)
end function cell_iterator_get_gid

pure function cell_iterator_get_mypart (this)
  implicit none
  class(cell_iterator_t), intent(in) :: this
  integer(ip) :: cell_iterator_get_mypart
  !assert ( this%lid >= 1 .and. .not. this%has_finished() )
  cell_iterator_get_mypart = this%base_static_triangulation%cells_mypart(this%lid)
end function cell_iterator_get_mypart

function cell_iterator_get_mysubpart ( this )
  implicit none
  class(cell_iterator_t), intent(in) :: this
  integer(ip) :: cell_iterator_get_mysubpart
  assert ( this%get_set_id() >= 0 )
  cell_iterator_get_mysubpart = (this%get_set_id())*this%base_static_triangulation%cell_import%get_number_parts() + this%get_my_part()
end function cell_iterator_get_mysubpart

function cell_iterator_get_mysubpart_lid ( this )
  implicit none
  class(cell_iterator_t), intent(in) :: this
  integer(ip) :: cell_iterator_get_mysubpart_lid
  integer(ip) :: istat
  call this%base_static_triangulation%g2l_subparts%get(key=this%get_my_subpart(), &
                                                       val=cell_iterator_get_mysubpart_lid, &
                                                       stat=istat)
  assert ( istat == key_found )
end function cell_iterator_get_mysubpart_lid

! get_set_id() let's the user to get the cell set ID assigned to
! a cell. Note that the counterpart, set_set_id(), does not exist, as we do not let 
! the user to set "set cell IDs" on a individual basis (but instead all in one shot via the 
! fill_cells_set member TBP of class(base_static_triangulation_t)).
function cell_iterator_get_set_id(this)
  implicit none
  class(cell_iterator_t), intent(in) :: this
  integer(ip) :: cell_iterator_get_set_id
  assert ( this%lid >= 1 .and. .not. this%has_finished() )
  cell_iterator_get_set_id = this%base_static_triangulation%cells_set(this%lid)
end function cell_iterator_get_set_id

pure function cell_iterator_get_num_vefs (this)
  implicit none
  class(cell_iterator_t), intent(in) :: this
  integer(ip)                        :: cell_iterator_get_num_vefs
  !assert ( this%lid >= 1 .and. .not. this%has_finished() )
  cell_iterator_get_num_vefs = this%base_static_triangulation%ptr_vefs_per_cell(this%lid+1) - &
       this%base_static_triangulation%ptr_vefs_per_cell(this%lid)
end function cell_iterator_get_num_vefs

pure function cell_iterator_get_num_nodes (this)
  implicit none
  class(cell_iterator_t), intent(in) :: this
  integer(ip)                        :: cell_iterator_get_num_nodes
  !assert ( this%lid >= 1 .and. .not. this%has_finished() )
  cell_iterator_get_num_nodes = this%base_static_triangulation%ptr_nodes_per_cell(this%lid+1) - &
       this%base_static_triangulation%ptr_nodes_per_cell(this%lid)
end function cell_iterator_get_num_nodes

function cell_iterator_get_node_lid (this, inode)
  implicit none
  class(cell_iterator_t), intent(in) :: this
  integer(ip)                        :: inode
  integer(ip)                        :: cell_iterator_get_node_lid
  class(reference_fe_t), pointer     :: reference_fe_geo
  assert ( this%lid >= 1 .and. .not. this%has_finished() )
  
  !reference_fe_geo => this%get_reference_fe_geo()
  !if ( reference_fe_geo%get_order() == 1 ) then
  !  assert ( inode >=1 .and. inode <= reference_fe_geo%get_number_vertices() )
  !  cell_iterator_get_node_lid = this%base_static_triangulation%lst_vefs_lids(this%base_static_triangulation%ptr_vefs_per_cell(this%lid)+inode-1)
  !else
  !  assert ( inode >=1 .and. inode <= reference_fe_geo%get_number_nodes() )
    cell_iterator_get_node_lid = this%base_static_triangulation%lst_nodes(this%base_static_triangulation%ptr_nodes_per_cell(this%lid)+inode-1)
  !end if
  
end function cell_iterator_get_node_lid

function cell_iterator_get_vef_lid (this, ivef)
  implicit none
  class(cell_iterator_t), intent(in) :: this
  integer(ip)                        :: ivef
  integer(ip)                        :: cell_iterator_get_vef_lid
  assert ( this%lid >= 1 .and. .not. this%has_finished() )
  cell_iterator_get_vef_lid = this%base_static_triangulation%lst_vefs_lids(this%base_static_triangulation%ptr_vefs_per_cell(this%lid)+ivef-1)
end function cell_iterator_get_vef_lid

function cell_iterator_get_vef_lids (this)
  implicit none
  class(cell_iterator_t), intent(in) :: this
  integer(ip)                        :: ivef
  integer(ip), pointer               :: cell_iterator_get_vef_lids(:)
  cell_iterator_get_vef_lids => this%base_static_triangulation%lst_vefs_lids(this%base_static_triangulation%ptr_vefs_per_cell(this%lid): &
                                                                             this%base_static_triangulation%ptr_vefs_per_cell(this%lid+1)-1)
end function cell_iterator_get_vef_lids

function cell_iterator_get_vef_gid (this, ivef)
  implicit none
  class(cell_iterator_t), intent(in) :: this
  integer(ip)                        :: ivef
  integer(igp)                       :: cell_iterator_get_vef_gid
  assert ( this%lid >= 1 .and. .not. this%has_finished() )
  cell_iterator_get_vef_gid = this%base_static_triangulation%vefs_gid(this%get_vef_lid(ivef))
end function cell_iterator_get_vef_gid

function cell_iterator_find_lpos_vef_lid (this, vef_lid)
  implicit none
  class(cell_iterator_t), intent(in) :: this
  integer(ip)                        :: vef_lid
  integer(ip)                        :: cell_iterator_find_lpos_vef_lid
  integer(ip)                        :: ivef
  cell_iterator_find_lpos_vef_lid = -1
  ! Find position of vef_lid in local element
  do ivef = 1, this%get_num_vefs()
    if ( this%get_vef_lid(ivef) == vef_lid ) then
      cell_iterator_find_lpos_vef_lid = ivef
      return 
    end if
  end do
end function cell_iterator_find_lpos_vef_lid

function cell_iterator_find_lpos_vef_gid (this, vef_gid)
  implicit none
  class(cell_iterator_t), intent(in) :: this
  integer(igp)                       :: vef_gid
  integer(ip)                        :: cell_iterator_find_lpos_vef_gid
  integer(ip)                        :: ivef
  cell_iterator_find_lpos_vef_gid = -1
  ! Find position of vef_lid in local element
  do ivef = 1, this%get_num_vefs()
    if ( this%get_vef_gid(ivef) == vef_gid ) then
      cell_iterator_find_lpos_vef_gid = ivef
      return 
    end if
  end do
end function cell_iterator_find_lpos_vef_gid

subroutine cell_iterator_get_vef (this, ivef, vef)
  implicit none
  class(cell_iterator_t), intent(in)    :: this
  integer(ip),            intent(in)    :: ivef
  type(vef_iterator_t),   intent(inout) :: vef
  assert ( this%lid >= 1 .and. .not. this%has_finished() )
  call vef%set_lid(this%get_vef_lid(ivef))
end subroutine cell_iterator_get_vef

function cell_iterator_is_local (this)
  implicit none
  class(cell_iterator_t), intent(in) :: this
  logical                            :: cell_iterator_is_local
  assert ( this%lid >= 1 .and. .not. this%has_finished() )
  cell_iterator_is_local = (this%lid <= this%base_static_triangulation%num_local_cells)
end function cell_iterator_is_local

function cell_iterator_is_ghost (this)
  implicit none
  class(cell_iterator_t), intent(in) :: this
  logical                            :: cell_iterator_is_ghost
  assert ( this%lid >= 1 .and. .not. this%has_finished() )
  cell_iterator_is_ghost = (this%lid > this%base_static_triangulation%num_local_cells)
end function cell_iterator_is_ghost

! Returns the sum of num_vefs over all cells up-to the present one (exclusive, i.e.,
! without considering the present one), with the cells being ordered consistently 
! with the iterator sequential traversal over all cells. At the moment of writing this
! comment (commit 0907e7b9d07e122ba69e02e0d72bac46546acc04), type(coarse_fe_space_t) needs 
! this TBP to efficiently locate a vef in the global type(list_t) data type which associates 
! DoFs to vefs. 
function cell_iterator_get_scan_sum_number_vefs(this)
  implicit none
  class(cell_iterator_t), intent(in) :: this
  integer(ip) :: cell_iterator_get_scan_sum_number_vefs
  assert ( this%lid >= 1 .and. .not. this%has_finished() )
  cell_iterator_get_scan_sum_number_vefs = this%base_static_triangulation%ptr_vefs_per_cell(this%lid)-1
end function cell_iterator_get_scan_sum_number_vefs

!function cell_iterator_get_num_vertices (this)
!  implicit none
!  class(cell_iterator_t), intent(in) :: this
!  integer(ip) :: cell_iterator_get_num_vertices
!  class(lagrangian_reference_fe_t) , pointer       :: reference_fe
!  reference_fe => this%get_reference_fe_geo()
!  cell_iterator_get_num_vertices = reference_fe%get_number_n_faces_of_dimension(0)
!end function cell_iterator_get_num_vertices

subroutine cell_iterator_fill_nodes_on_vertices (this)
  implicit none
  class(cell_iterator_t), intent(inout) :: this
  integer(ip) :: ivef, inode, lnode
  class(lagrangian_reference_fe_t) , pointer       :: reference_fe

  reference_fe => this%get_reference_fe_geo()
  do ivef=1,reference_fe%get_number_n_faces_of_dimension(0)
     assert(reference_fe%get_number_own_dofs_n_face(ivef)==1)
     inode = reference_fe%get_own_dof_n_face(1,ivef)
     lnode = this%base_static_triangulation%lst_vefs_lids(this%base_static_triangulation%ptr_vefs_per_cell(this%lid) + ivef - 1 )
     this%base_static_triangulation%lst_nodes(this%base_static_triangulation%ptr_nodes_per_cell(this%lid) + inode - 1 ) = lnode
  end do

end subroutine cell_iterator_fill_nodes_on_vertices

subroutine cell_iterator_fill_nodes_on_vef_new (this,ivef,node_count)
  implicit none
  class(cell_iterator_t), intent(inout) :: this
  integer(ip)           , intent(in)    :: ivef
  integer(ip)           , intent(inout) :: node_count
  integer(ip) :: ivef_pos_in_cell, inode, l_node
  class(lagrangian_reference_fe_t) , pointer       :: reference_fe

  reference_fe => this%get_reference_fe_geo()
  ivef_pos_in_cell = this%find_lpos_vef_lid(ivef)

  do inode = 1,reference_fe%get_number_own_dofs_n_face(ivef_pos_in_cell)
    l_node = reference_fe%get_own_dof_n_face(inode,ivef_pos_in_cell)
    assert(this%base_static_triangulation%lst_nodes(this%base_static_triangulation%ptr_nodes_per_cell(this%lid)+l_node-1)<=0)
    if(this%base_static_triangulation%lst_nodes(this%base_static_triangulation%ptr_nodes_per_cell(this%lid)+l_node-1)==0) then
       node_count = node_count + 1
       this%base_static_triangulation%lst_nodes(this%base_static_triangulation%ptr_nodes_per_cell(this%lid)+l_node-1)=node_count
    end	if
  end do
  
end subroutine cell_iterator_fill_nodes_on_vef_new

subroutine cell_iterator_fill_nodes_on_vef_from_source (this,ivef,cell)
  implicit none
  class(cell_iterator_t), intent(inout) :: this
  integer(ip)           , intent(in)    :: ivef
  class(cell_iterator_t), intent(inout) :: cell

  class(lagrangian_reference_fe_t) , pointer  :: source_ref_fe, target_ref_fe
  integer(ip)          :: source_vef_lid, target_vef_lid
  integer(ip), pointer :: source_vefs(:), target_vefs(:), source_node_list(:), target_node_list(:)
  integer(ip) :: own_inode, l_node, own_nnode, inode_source, inode_target
  integer(ip) :: relative_orientation, relative_rotation

  source_ref_fe => this%get_reference_fe_geo()
  source_vef_lid = this%find_lpos_vef_lid(ivef)

  target_ref_fe => cell%get_reference_fe_geo()
  target_vef_lid = cell%find_lpos_vef_lid(ivef)
 
  source_vefs => this%base_static_triangulation%lst_vefs_lids(this%base_static_triangulation%ptr_vefs_per_cell(this%lid): &
                                                          &   this%base_static_triangulation%ptr_vefs_per_cell(this%lid+1)-1)
  target_vefs => cell%base_static_triangulation%lst_vefs_lids(this%base_static_triangulation%ptr_vefs_per_cell(cell%lid): &
                                                          &   this%base_static_triangulation%ptr_vefs_per_cell(cell%lid+1)-1)
  
  source_node_list => this%base_static_triangulation%lst_nodes(this%base_static_triangulation%ptr_nodes_per_cell(this%lid): &
                                                          &    this%base_static_triangulation%ptr_nodes_per_cell(this%lid+1)-1)
  target_node_list => this%base_static_triangulation%lst_nodes(this%base_static_triangulation%ptr_nodes_per_cell(cell%lid): &
                                                          &    this%base_static_triangulation%ptr_nodes_per_cell(cell%lid+1)-1)

  assert(size(source_vefs)==source_ref_fe%get_number_n_faces())
  assert(size(target_vefs)==target_ref_fe%get_number_n_faces())

  own_nnode = source_ref_fe%get_number_own_dofs_n_face(source_vef_lid)

  if ( own_nnode > 0 ) then

     check (target_ref_fe%check_compatibility_of_n_faces(source_ref_fe,source_vef_lid,target_vef_lid))
     relative_rotation = target_ref_fe%compute_relative_rotation( source_ref_fe, &
          &                                                      source_vef_lid, &
          &                                                      target_vef_lid, &
          &                                                      source_vefs,    &
          &                                                      target_vefs)

     relative_orientation = target_ref_fe%compute_relative_orientation( source_ref_fe,            &
          &                                           source_vef_lid,                             &
          &                                           target_vef_lid)
     
     do own_inode = 1, own_nnode
        inode_source = source_ref_fe%get_own_dof_n_face(own_inode,source_vef_lid)
        inode_target = target_ref_fe%get_permuted_own_dof_n_face(own_inode,               &
             &                          target_vef_lid, relative_orientation,relative_rotation)
        assert ( target_node_list(inode_target) <= 0 )
        if ( target_node_list(inode_target) == 0 ) then
          target_node_list(inode_target) = source_node_list(inode_source)
        end if
    end do 
 end if
  
end subroutine cell_iterator_fill_nodes_on_vef_from_source

subroutine cell_iterator_fill_internal_nodes_new(this,node_count)
  implicit none
  class(cell_iterator_t), intent(inout) :: this
  integer(ip)           , intent(inout) :: node_count
  class(lagrangian_reference_fe_t) , pointer       :: reference_fe
  integer(ip) :: inode, l_node, ivef

  reference_fe => this%get_reference_fe_geo()  
  
  ivef = reference_fe%get_number_n_faces()+1 ! volume
  do inode = 1, reference_fe%get_number_own_dofs_n_face(ivef)
     l_node = reference_fe%get_own_dof_n_face(inode,ivef)
     node_count = node_count +1
     this%base_static_triangulation%lst_nodes(this%base_static_triangulation%ptr_nodes_per_cell(this%lid)-1+l_node) = node_count
  end do

end subroutine cell_iterator_fill_internal_nodes_new
