! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine p4est_vef_iterator_create ( this, base_static_triangulation )
  implicit none
  class(p4est_vef_iterator_t)             , intent(inout)      :: this
  class(base_static_triangulation_t), target, intent(in) :: base_static_triangulation
  call this%free()
  call this%vef_iterator_t%create(base_static_triangulation)
  select type(base_static_triangulation)
  class is (p4est_serial_triangulation_t)
    this%p4est_triangulation => base_static_triangulation
  class default
    assert(.false.)
  end select
end subroutine p4est_vef_iterator_create

subroutine p4est_vef_iterator_free ( this)
  implicit none
  class(p4est_vef_iterator_t), intent(inout) :: this
  call this%vef_iterator_t%free()
  nullify ( this%p4est_triangulation )
end subroutine p4est_vef_iterator_free

subroutine p4est_vef_iterator_free_final ( this)
  implicit none
  type(p4est_vef_iterator_t), intent(inout) :: this
   assert(.not. associated(this%p4est_triangulation ))
end subroutine p4est_vef_iterator_free_final

!subroutine p4est_vef_iterator_first(this)
!  implicit none
!  class(p4est_vef_iterator_t), intent(inout) :: this
!  this%lid = 1
!end subroutine p4est_vef_iterator_first

subroutine p4est_vef_iterator_next(this)
  implicit none
  class(p4est_vef_iterator_t), intent(inout) :: this
  if ( this%get_lid() > 0 .and. this%get_lid() < this%p4est_triangulation%num_proper_vefs ) then
     call this%set_lid(this%get_lid()+1)
  else if ( this%get_lid() > 0 .and. this%get_lid() == this%p4est_triangulation%num_proper_vefs ) then
     call this%set_lid(-1)
  else 
     call this%set_lid(this%get_lid()-1)
  end if  
end subroutine p4est_vef_iterator_next

function p4est_vef_iterator_has_finished(this)
  implicit none
  class(p4est_vef_iterator_t), intent(in) :: this
  logical :: p4est_vef_iterator_has_finished
  p4est_vef_iterator_has_finished = (this%get_lid() < 0 .and. this%get_lid() < -this%p4est_triangulation%num_improper_vefs)
end function p4est_vef_iterator_has_finished

!function p4est_vef_iterator_get_triangulation(this)
!  implicit none
!  class(p4est_vef_iterator_t), intent(in) :: this
!  class(base_static_triangulation_t), pointer :: p4est_vef_iterator_get_triangulation
!  p4est_vef_iterator_get_triangulation => this%base_static_triangulation
!end function p4est_vef_iterator_get_triangulation

!function p4est_vef_iterator_get_lid (this)
!  implicit none
!  class(p4est_vef_iterator_t), intent(in) :: this
!  integer(ip) :: p4est_vef_iterator_get_lid
!  p4est_vef_iterator_get_lid = this%lid
!end function p4est_vef_iterator_get_lid

!function p4est_vef_iterator_get_gid (this)
!  implicit none
!  class(p4est_vef_iterator_t), intent(in) :: this
!  integer(igp) :: p4est_vef_iterator_get_gid
!  assert ( (this%get_lid() > 0 .and. this%get_lid() <= this%p4est_triangulation%num_proper_vefs) .or. (this%get_lid() < 0 .and. this%get_lid() >= -this%p4est_triangulation%num_improper_vefs) )
!  p4est_vef_iterator_get_gid = this%base_static_triangulation%vefs_gid(this%lid)
!end function p4est_vef_iterator_get_gid

!subroutine p4est_vef_iterator_set_set_id(this,set_id)
!  implicit none
!  class(p4est_vef_iterator_t), intent(inout) :: this
!  integer(ip)          , intent(in) :: set_id
!  assert (this%lid >= 1 .and. .not. this%has_finished())
!  this%base_static_triangulation%vefs_set(this%lid) = set_id
!end subroutine p4est_vef_iterator_set_set_id  

!subroutine p4est_vef_iterator_set_geom_id(this,geom_id)
!  implicit none
!  class(p4est_vef_iterator_t), intent(inout) :: this
!  integer(ip)          , intent(in) :: geom_id
!  assert (this%lid >= 1 .and. .not. this%has_finished())
!  this%base_static_triangulation%vefs_geometry(this%lid) = geom_id
!end subroutine p4est_vef_iterator_set_geom_id  

function p4est_vef_iterator_get_set_id(this)
  implicit none
  class(p4est_vef_iterator_t), intent(in) :: this
  integer(ip) :: p4est_vef_iterator_get_set_id
  assert ( this%is_within_valid_range() )
  if ( this%is_at_boundary()) then 
    p4est_vef_iterator_get_set_id = 1
  else 
    p4est_vef_iterator_get_set_id = 0
  end if  
end function p4est_vef_iterator_get_set_id  

!function p4est_vef_iterator_get_geom_id(this)
!  implicit none
!  class(p4est_vef_iterator_t), intent(in) :: this
!  integer(ip) :: p4est_vef_iterator_get_geom_id
!  assert (this%lid >= 1 .and. .not. this%has_finished())
!  p4est_vef_iterator_get_geom_id = this%base_static_triangulation%vefs_geometry(this%lid)
!end function p4est_vef_iterator_get_geom_id  

!subroutine p4est_vef_iterator_set_dimension(this,vef_dim)
!  implicit none
!  class(p4est_vef_iterator_t), intent(inout) :: this
!  integer(ip)          , intent(in)    :: vef_dim
!  assert ( this%lid >= 1 .and. .not. this%has_finished() )
!  this%base_static_triangulation%vefs_type(this%lid) = (this%base_static_triangulation%vefs_type(this%lid)/10) * 10 + vef_dim
!end subroutine p4est_vef_iterator_set_dimension

!subroutine p4est_vef_iterator_set_it_at_boundary(this)
!  implicit none
!  class(p4est_vef_iterator_t), intent(inout) :: this
!  integer(ip) :: vef_dim
!  assert ( this%lid >= 1 .and. .not. this%has_finished() )
!  vef_dim = mod(this%base_static_triangulation%vefs_type(this%lid),10)
!  this%base_static_triangulation%vefs_type(this%lid) = (this%base_static_triangulation%vefs_type(this%lid)/100) * 100 + 10 + vef_dim
!end subroutine p4est_vef_iterator_set_it_at_boundary

!subroutine p4est_vef_iterator_set_it_as_local(this)
!  implicit none
!  class(p4est_vef_iterator_t), intent(inout) :: this
!  integer(ip) :: vef_dim_and_bound
!  assert ( this%lid >= 1 .and. .not. this%has_finished() )
!  vef_dim_and_bound = mod(this%base_static_triangulation%vefs_type(this%lid),100)
!  this%base_static_triangulation%vefs_type(this%lid) = vef_dim_and_bound
!end subroutine p4est_vef_iterator_set_it_as_local

!subroutine p4est_vef_iterator_set_it_at_interface(this)
!  implicit none
!  class(p4est_vef_iterator_t), intent(inout) :: this
!  integer(ip) :: vef_dim_and_bound
!  assert ( this%lid >= 1 .and. .not. this%has_finished() )
!  vef_dim_and_bound = mod(this%base_static_triangulation%vefs_type(this%lid),100)
!  this%base_static_triangulation%vefs_type(this%lid) = 100 + vef_dim_and_bound
!end subroutine p4est_vef_iterator_set_it_at_interface

!subroutine p4est_vef_iterator_set_it_as_ghost(this)
!  implicit none
!  class(p4est_vef_iterator_t), intent(inout) :: this
!  integer(ip) :: vef_dim_and_bound
!  assert ( this%lid >= 1 .and. .not. this%has_finished() )
!  vef_dim_and_bound = mod(this%base_static_triangulation%vefs_type(this%lid),100)
!  this%base_static_triangulation%vefs_type(this%lid) = 200 + vef_dim_and_bound
!end subroutine p4est_vef_iterator_set_it_as_ghost

function p4est_vef_iterator_get_dimension(this)
  implicit none
  class(p4est_vef_iterator_t), intent(in) :: this
  integer(ip) :: p4est_vef_iterator_get_dimension
  assert ( this%is_within_valid_range() )
  if ( this%is_proper() ) then
    p4est_vef_iterator_get_dimension  = this%p4est_triangulation%p4est_proper_vefs_dimension%get(this%get_lid())
  else
    p4est_vef_iterator_get_dimension  = this%p4est_triangulation%p4est_improper_vefs_dimension%get(abs(this%get_lid()))
  end if
end function p4est_vef_iterator_get_dimension

function p4est_vef_iterator_is_at_boundary (this)
  implicit none
  class(p4est_vef_iterator_t), intent(in) :: this
  logical :: p4est_vef_iterator_is_at_boundary 
  assert ( this%is_within_valid_range()  )
  p4est_vef_iterator_is_at_boundary  = .false.
  if ( this%get_lid() > 0 ) then
    p4est_vef_iterator_is_at_boundary = (this%p4est_triangulation%p4est_proper_vefs_at_boundary%get(this%get_lid()) == 1)
  end if  
  
end function p4est_vef_iterator_is_at_boundary

function p4est_vef_iterator_is_local (this)
  implicit none
  class(p4est_vef_iterator_t), intent(in) :: this
  logical :: p4est_vef_iterator_is_local 
  assert ( this%is_within_valid_range() )
  p4est_vef_iterator_is_local  = .true.
end function p4est_vef_iterator_is_local

function p4est_vef_iterator_is_at_interface (this)
  implicit none
  class(p4est_vef_iterator_t), intent(in) :: this
  logical :: p4est_vef_iterator_is_at_interface 
  assert ( this%is_within_valid_range() )
  p4est_vef_iterator_is_at_interface  = .false.
end function p4est_vef_iterator_is_at_interface

!function p4est_vef_iterator_is_face (this)
!  implicit none
!  class(p4est_vef_iterator_t), intent(in) :: this
!  logical :: p4est_vef_iterator_is_face
!  assert ( this%lid >= 1 .and. .not. this%has_finished() )
!  p4est_vef_iterator_is_face  = (this%base_static_triangulation%get_num_dimensions()-1 == this%get_dimension())
!end function p4est_vef_iterator_is_face

function p4est_vef_iterator_is_ghost (this)
  implicit none
  class(p4est_vef_iterator_t), intent(in) :: this
  logical :: p4est_vef_iterator_is_ghost 
  assert ( this%is_within_valid_range() )
  p4est_vef_iterator_is_ghost  = .false.
end function p4est_vef_iterator_is_ghost

function p4est_vef_iterator_is_proper(this)
  implicit none
  class(p4est_vef_iterator_t), intent(in) :: this
  logical :: p4est_vef_iterator_is_proper
  assert ( this%is_within_valid_range() )
  p4est_vef_iterator_is_proper = (this%get_lid() > 0)
end function p4est_vef_iterator_is_proper

function p4est_vef_iterator_is_within_valid_range(this)
  implicit none
  class(p4est_vef_iterator_t), intent(in) :: this
  logical :: p4est_vef_iterator_is_within_valid_range
  p4est_vef_iterator_is_within_valid_range = & 
          (this%get_lid() > 0 .and. this%get_lid() <= this%p4est_triangulation%num_proper_vefs) & 
          .or. (this%get_lid() < 0 .and. this%get_lid() >= -this%p4est_triangulation%num_improper_vefs)
end function p4est_vef_iterator_is_within_valid_range

function p4est_vef_iterator_get_num_cells_around (this)
  implicit none
  class(p4est_vef_iterator_t), intent(in) :: this
  integer(ip) :: p4est_vef_iterator_get_num_cells_around
  assert ( this%is_within_valid_range() )
  if ( this%is_proper() ) then
   p4est_vef_iterator_get_num_cells_around  =  this%p4est_triangulation%p4est_ptr_cells_around_proper_vefs%get(this%get_lid()+1)-&
                                                this%p4est_triangulation%p4est_ptr_cells_around_proper_vefs%get(this%get_lid())
  else                                          
   p4est_vef_iterator_get_num_cells_around  =  this%p4est_triangulation%p4est_ptr_cells_around_improper_vefs%get(abs(this%get_lid())+1)-&
                                                this%p4est_triangulation%p4est_ptr_cells_around_improper_vefs%get(abs(this%get_lid()))
  end if
end function p4est_vef_iterator_get_num_cells_around

subroutine p4est_vef_iterator_get_cell_around (this, icell_around, cell)
  implicit none
  class(p4est_vef_iterator_t) , intent(in)    :: this
  integer(ip)           , intent(in)    :: icell_around
  class(cell_iterator_t), intent(inout) :: cell
  integer(ip)                          :: position_in_lst_cells_around
  integer(ip)                          :: icell 
  assert ( this%is_within_valid_range() )
  assert ( icell_around >= 1 .and. icell_around <= this%get_num_cells_around() )
  if ( this%is_proper() ) then  
    position_in_lst_cells_around = this%p4est_triangulation%p4est_ptr_cells_around_proper_vefs%get(this%get_lid()) + icell_around-1
    icell = this%p4est_triangulation%p4est_lst_cells_around_proper_vefs%get(position_in_lst_cells_around)
  else
    position_in_lst_cells_around = this%p4est_triangulation%p4est_ptr_cells_around_improper_vefs%get(abs(this%get_lid())) + icell_around-1
    icell = this%p4est_triangulation%p4est_lst_cells_around_improper_vefs%get(position_in_lst_cells_around)
  end if
  call cell%set_lid(icell)
end subroutine p4est_vef_iterator_get_cell_around

function p4est_vef_iterator_get_num_improper_cells_around (this)
  implicit none
  class(p4est_vef_iterator_t), intent(in) :: this
  integer(ip) :: p4est_vef_iterator_get_num_improper_cells_around
  assert ( this%is_within_valid_range() )
  if ( this%is_proper() ) then
   p4est_vef_iterator_get_num_improper_cells_around  =  0
  else                                          
   p4est_vef_iterator_get_num_improper_cells_around  =  this%p4est_triangulation%p4est_ptr_improper_cells_around%get(abs(this%get_lid())+1)-&
                                                         this%p4est_triangulation%p4est_ptr_improper_cells_around%get(abs(this%get_lid()))
  end if
end function p4est_vef_iterator_get_num_improper_cells_around

subroutine p4est_vef_iterator_get_improper_cell_around (this, icell_around, cell)
  implicit none
  class(p4est_vef_iterator_t) , intent(in)    :: this
  integer(ip)           , intent(in)    :: icell_around
  class(cell_iterator_t), intent(inout) :: cell
  integer(ip)                          :: position_in_lst_cells_around
  integer(ip)                          :: icell 
  assert ( this%is_within_valid_range() )
  assert ( .not. this%is_proper() )
  assert ( icell_around >= 1 .and. icell_around <= this%get_num_improper_cells_around() )
  position_in_lst_cells_around = this%p4est_triangulation%p4est_ptr_improper_cells_around%get(abs(this%get_lid())) + icell_around-1
  icell = this%p4est_triangulation%p4est_lst_improper_cells_around%get(position_in_lst_cells_around)
  call cell%set_lid(icell)
end subroutine p4est_vef_iterator_get_improper_cell_around

function p4est_vef_iterator_get_improper_cell_around_ivef(this)
  implicit none
  class(p4est_vef_iterator_t) , intent(in)    :: this
  integer(ip) :: p4est_vef_iterator_get_improper_cell_around_ivef
  assert ( this%is_within_valid_range() )
  assert ( .not. this%is_proper() )
  p4est_vef_iterator_get_improper_cell_around_ivef = this%p4est_triangulation%p4est_improper_vefs_improper_cell_around_ivef%get(abs(this%get_lid()))
end function p4est_vef_iterator_get_improper_cell_around_ivef

function p4est_vef_iterator_get_improper_cell_around_subvef(this)
  implicit none
  class(p4est_vef_iterator_t) , intent(in)    :: this
  integer(ip) :: p4est_vef_iterator_get_improper_cell_around_subvef
  assert ( this%is_within_valid_range() )
  assert ( .not. this%is_proper() )
  p4est_vef_iterator_get_improper_cell_around_subvef = this%p4est_triangulation%p4est_improper_vefs_improper_cell_around_subvef%get(abs(this%get_lid()))
end function p4est_vef_iterator_get_improper_cell_around_subvef

