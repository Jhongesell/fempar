! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine par_triangulation_create ( this, par_environment, parameters)
  implicit none
  class(par_triangulation_t)    , intent(inout) :: this
  type(par_environment_t),target, intent(in)    :: par_environment
  type(ParameterList_t)         , intent(in)    :: parameters

  type(mesh_t)              :: mesh
  type(mesh_distribution_t) :: mesh_distribution
  type(p_reference_fe_t)    :: reference_fe_geo_list(1)

  real(rp)    , allocatable :: coordinates(:,:)
  type(list_t), pointer     :: given_vefs
  integer(ip) , pointer     :: lst_vefs_geo(:), lst_vefs_set(:)

  integer(igp), allocatable :: cells_gid(:)
  integer(ip) , allocatable :: cells_set(:)
  integer(igp), allocatable :: vertx_gid(:)
  integer(ip) , allocatable :: ptr_vefs_per_cell(:)
  integer(ip) , allocatable :: lst_vefs_lids(:)
  integer(igp), allocatable :: lst_vefs_gids(:)

  integer(ip)               :: i, ipart,npart
  integer(ip)               :: num_local_cells, num_itfc_cells
  integer(ip) , allocatable :: lst_itfc_cells(:)
  integer(ip) , allocatable :: ptr_ext_neighs_per_itfc_cell(:)
  integer(igp), allocatable :: lst_ext_neighs_gids(:)
  integer(ip) , allocatable :: lst_ext_neighs_part_ids(:)

  integer(igp), allocatable :: lst_vefs_gids_ghost_extended(:)
  integer(ip) , allocatable :: lst_vefs_dimension_ghost_extended(:)

  integer(ip)          :: istat
  integer(ip)          :: triangulation_generate
  logical              :: is_present
  character(len=256)   :: dir_path
  character(len=256)   :: prefix
  integer(ip)          :: geometry_interpolation_order
  character(len=:), allocatable   :: name
  integer(ip)                     :: lunio

  ! Mandatory parameters
  is_present = .true.
  is_present =  is_present.and. parameters%isPresent(key = dir_path_key)
  is_present =  is_present.and. parameters%isPresent(key = prefix_key)
  assert(is_present)

  istat = 0
  istat = istat + parameters%get(key = dir_path_key, value = dir_path)
  istat = istat + parameters%get(key = prefix_key  , value = prefix)
  check(istat==0)

  ! Optional parameters
  if( parameters%isPresent(key = triangulation_generate_key) ) then
     istat = parameters%get(key = triangulation_generate_key, value = triangulation_generate)
     check(istat==0)
  else
     triangulation_generate = triangulation_generate_from_mesh
  end if

  if( parameters%isPresent(key = geometry_interpolation_order_key) ) then
     istat = parameters%get(key = geometry_interpolation_order_key , value = geometry_interpolation_order)
  else
     geometry_interpolation_order = 1
  end if

  call this%free()

  this%p_env => par_environment
  if(this%p_env%am_i_l1_task()) then

     if(geometry_interpolation_order>1) call this%geometry%read(parameters)

     if(triangulation_generate==triangulation_generate_from_mesh) then
        ! Read mesh
        call mesh%compose_name ( prefix, name )
        call par_filename( this%p_env%get_l1_context(), name )
        lunio = io_open( trim(dir_path) // '/' // trim(name), 'read' )
        call mesh%read (lunio) 
        call io_close(lunio)

        ! Extract data from mesh
        call mesh%get_sizes(this%num_dimensions,this%num_vertices,this%max_vefs_per_cell,this%num_local_cells)
        this%num_vefs=this%num_vertices

        call mesh%move_cells(ptr_vefs_per_cell,lst_vefs_lids, cells_set)
        call mesh%get_given_vefs(given_vefs,lst_vefs_geo,lst_vefs_set)

        ! Read mesh distribution 
        call mesh_distribution_compose_name ( prefix, name )
        call par_filename( this%p_env%get_l1_context(), name )
        lunio = io_open (trim(dir_path) // '/' // trim(name))
        call mesh_distribution%read_file(lunio)
        call io_close(lunio)

        call mesh_distribution%get_sizes(ipart,npart)

        ! Extract data from mesh_distribution
        call mesh_distribution%move_gids(cells_gid,vertx_gid)
        call mesh_distribution%move_external_elements_info( num_itfc_cells, &
             &                                              lst_itfc_cells, &
             &                                              ptr_ext_neighs_per_itfc_cell, &
             &                                              lst_ext_neighs_gids, &
             &                                              lst_ext_neighs_part_ids)

        ! Build elementwise vefs_gid and vefs_dim
        call memalloc(ptr_vefs_per_cell(this%num_local_cells+1)-1,lst_vefs_gids,__FILE__,__LINE__)
        do i=1,ptr_vefs_per_cell(this%num_local_cells+1)-1
           lst_vefs_gids(i) = vertx_gid(lst_vefs_lids(i))
        end do

        ! We need to fill the element_import data structure first
        ! in order to determine the number of ghost elements. This
        ! in turn is required as a precondition for the allocate_cell_array
        ! TBP below.
        call this%cell_import%create  ( this%p_env%get_l1_rank()+1, &
                                        this%p_env%get_l1_size(), &
                                        this%num_local_cells, &
                                        num_itfc_cells, &
                                        lst_itfc_cells(1:num_itfc_cells), & ! I was forced to provide l/u bounds to let gfortran 5.3.0 compile
                                        ptr_ext_neighs_per_itfc_cell(1:num_itfc_cells+1), &
                                        lst_ext_neighs_gids(1:ptr_ext_neighs_per_itfc_cell(num_itfc_cells+1)-1), &
                                        lst_ext_neighs_part_ids(1:ptr_ext_neighs_per_itfc_cell(num_itfc_cells+1)-1))
        this%num_ghost_cells = this%cell_import%get_number_ghost_elements()

        ! Allocate + fill cells-related data
        call this%allocate_and_fill_ptr_vefs_per_cell(ptr_vefs_per_cell)
        call this%allocate_cells_gid()
        call this%fill_local_cells_gid(cells_gid)
        call this%allocate_cells_mypart()
        call this%fill_local_cells_mypart()
        call this%fetch_ghost_cells_data(lst_vefs_gids, lst_vefs_gids_ghost_extended)

        ! Extend lids to ghost vefs and update number of vefs (=vertices at this point)
        call this%allocate_and_fill_lst_vefs_lids(lst_vefs_lids,lst_vefs_gids_ghost_extended, vertx_gid)
        this%num_vertices=this%num_vefs

        ! Generate edges and faces
        call this%allocate_and_fill_cells_around()
        call this%generate_vefs(geometry_interpolation_order)
        call this%allocate_and_fill_geometry_and_set(given_vefs,lst_vefs_geo,lst_vefs_set)

        call mesh%move_coordinates(coordinates)

        call memfree (cells_gid,                    __FILE__, __LINE__)
        call memfree (vertx_gid,                    __FILE__, __LINE__)
        call memfree (ptr_vefs_per_cell,            __FILE__, __LINE__)
     else if(triangulation_generate==triangulation_generate_structured) then

        this%num_ghost_cells=0

        ! Get num_dimensions from FPL
        is_present = parameters%isPresent(key = number_of_dimensions_key ) 
        assert(is_present)
        istat = parameters%get(key = number_of_dimensions_key   , value = this%num_dimensions)
        check(istat==0)

        call uniform_hex_mesh_generator_generate_connectivities(parameters,             &
             &                                                  this%num_local_cells,   &
             &                                                  this%num_vefs,          & ! All n_faces
             &                                                  this%num_vertices,      & ! All dim 0 n_faces
             &                                                  this%num_edges,         & ! All faces with 0<dim<n-1
             &                                                  this%num_faces,         & ! All dim n-1 n_faces
             &                                                  this%ptr_vefs_per_cell, &
             &                                                  lst_vefs_lids,     &
             &                                                  this%vefs_set,          &
             &                                                  coordinates,            &
             &                                                  this%num_ghost_cells,   &
             &                                                  this%cells_gid,         &
             &                                                  this%cells_mypart,      &
             &                                                  this%vefs_gid,          &
             &                                                  num_itfc_cells,         &
             &                                                  lst_itfc_cells,         &
             &                                                  ptr_ext_neighs_per_itfc_cell, &
             &                                                  lst_ext_neighs_gids,          &
             &                                                  lst_ext_neighs_part_ids,      &
             &                                                  this%p_env%get_l1_rank()+1)

        ! Allocate and fill to default values cells_set==0 local variable
        call memalloc(this%num_local_cells, cells_set, __FILE__, __LINE__)
        cells_set = 0
        
        ! Generate import
        call this%cell_import%create  ( this%p_env%get_l1_rank()+1, &
                                        this%p_env%get_l1_size(), &
                                        this%num_local_cells, &
                                        num_itfc_cells, &
                                        lst_itfc_cells(1:num_itfc_cells), & ! I was forced to provide l/u bounds to let gfortran 5.3.0 compile
                                        ptr_ext_neighs_per_itfc_cell(1:num_itfc_cells+1), &
                                        lst_ext_neighs_gids(1:ptr_ext_neighs_per_itfc_cell(num_itfc_cells+1)-1), &
                                        lst_ext_neighs_part_ids(1:ptr_ext_neighs_per_itfc_cell(num_itfc_cells+1)-1))
        
        
        ! Build cell-wise vefs_gid and vefs_dim
        call memalloc(this%ptr_vefs_per_cell(this%num_local_cells+1)-1,lst_vefs_gids,__FILE__,__LINE__)
        if(this%p_env%get_l1_size()>1) then
           do i=1,this%ptr_vefs_per_cell(this%num_local_cells+1)-1 
              lst_vefs_gids(i) = this%vefs_gid(lst_vefs_lids(i))
           end do
        else
           lst_vefs_gids = this%lst_vefs_lids
        end if
        call this%fetch_ghost_cells_data(lst_vefs_gids, lst_vefs_gids_ghost_extended)
        call this%allocate_and_fill_lst_vefs_lids(lst_vefs_lids,lst_vefs_gids_ghost_extended, this%vefs_gid)

        ! Generate reference fe
        call this%reference_fe_geo_index%init(1)
        if(this%num_dimensions==2) then
           call this%reference_fe_geo_index%put(key=8,val=1,stat=istat)
           reference_fe_geo_list(1) = &
                &    make_reference_fe ( topology = topology_hex, fe_type = fe_type_lagrangian, &
                &                        number_dimensions = this%num_dimensions, order = geometry_interpolation_order, &
                &                        field_type = field_type_scalar, continuity = .true. )
        else
           call this%reference_fe_geo_index%put(key=26,val=1,stat=istat)
           reference_fe_geo_list(1) = &
                &    make_reference_fe ( topology = topology_hex, fe_type = fe_type_lagrangian, &
                &                        number_dimensions = this%num_dimensions, order = geometry_interpolation_order, &
                &                        field_type = field_type_scalar, continuity = .true. )
        end if
        ! Transfer allocated target from local variable to member variable of base_static_triangulation
        select type(reference_fe => reference_fe_geo_list(1)%p)
           class is(lagrangian_reference_fe_t)
           this%reference_fe_geo_list(1)%p => reference_fe
        end select
     end if

     ! Allocate and fill this%cells_set from cells_set member variable
     call this%allocate_cells_set()
     call this%fill_cells_set(cells_set)

     call this%allocate_and_fill_cells_around()
     call this%compute_vefs_dimension()
     call this%find_vefs_at_boundary()
     call this%find_and_list_vefs_at_interfaces()

     call this%allocate_and_fill_face_orientation_rotation()

     call this%allocate_and_fill_nodes()
     call this%allocate_and_fill_coordinates(coordinates)     
     
     call this%compute_vefs_and_parts_object()
     call this%compute_objects_dimension()
     call this%compute_number_global_objects_and_their_gids()
     
     call mesh%free()
     call mesh_distribution%free()
     call memfree (lst_itfc_cells,               __FILE__, __LINE__)
     call memfree (ptr_ext_neighs_per_itfc_cell, __FILE__, __LINE__)
     call memfree (lst_ext_neighs_gids,          __FILE__, __LINE__)
     call memfree (lst_ext_neighs_part_ids,      __FILE__, __LINE__)
     call memfree (lst_vefs_lids,                __FILE__, __LINE__)
     call memfree (lst_vefs_gids,                __FILE__, __LINE__)
     call memfree (lst_vefs_gids_ghost_extended, __FILE__, __LINE__)
     call memfree(coordinates, __FILE__, __LINE__ )
     call memfree(cells_set, __FILE__, __LINE__)
  end if

  call this%setup_coarse_triangulation()

end subroutine par_triangulation_create

!subroutine par_triangulation_allocate_and_fill_lst_vefs_lids_old ( this, lst_vefs_lids, lst_vefs_gids)                                                     
!  implicit none
!  class(par_triangulation_t), intent(inout) :: this
!  integer(ip)               , intent(in)    :: lst_vefs_lids(this%ptr_vefs_per_cell(this%num_local_cells+1)-1)
!  integer(igp)              , intent(in)    :: lst_vefs_gids(this%ptr_vefs_per_cell(this%num_local_cells+this%num_ghost_cells+1)-1)

!  type(hash_table_igp_ip_t) :: next_vef_lid_avail
!  integer(ip)               :: icell, istat, j, init_pos, end_pos, current              

!  assert ( associated ( this%p_env ) )
!  assert ( this%p_env%am_i_l1_task() )
!  assert ( this%num_local_cells + this%num_ghost_cells >=0 )

!  call this%free_lst_vefs_lids()

!  call memalloc ( this%ptr_vefs_per_cell(this%num_local_cells+this%num_ghost_cells+1)-1, this%lst_vefs_lids, __FILE__, __LINE__ )
!  call next_vef_lid_avail%init ( max(int(real( this%ptr_vefs_per_cell(this%num_local_cells+this%num_ghost_cells+1))*0.1_rp),5) )

!  ! Local cells contain vertices already locally numbered
!  do icell=1, this%num_local_cells
!     init_pos = this%ptr_vefs_per_cell(icell)
!     end_pos  = this%ptr_vefs_per_cell(icell+1)-1
!     do j=init_pos, end_pos
!        call next_vef_lid_avail%put(key=lst_vefs_gids(j), val=lst_vefs_lids(j), stat=istat)
!        this%lst_vefs_lids(j)=lst_vefs_lids(j)
!     end do
!     !write(*,*) icell, this%lst_vefs_lids(init_pos:end_pos)
!  end do

!  ! Ghost cells contain vefs not locally numbered
!  !this%num_ghost_vefs=0
!  !current = this%num_vefs+1
!  do icell = this%num_local_cells +1, this%num_local_cells + this%num_ghost_cells
!     init_pos = this%ptr_vefs_per_cell(icell)
!     end_pos  = this%ptr_vefs_per_cell(icell+1)-1
!     do j=init_pos, end_pos
!        call next_vef_lid_avail%put(key=lst_vefs_gids(j), val=this%num_vefs+1, stat=istat)
!        if (istat == now_stored) then
!           this%num_vefs=this%num_vefs+1
!           !current = current + 1
!           !this%num_ghost_vefs = this%num_ghost_vefs + 1
!        end if
!        call next_vef_lid_avail%get(key=lst_vefs_gids(j), val=this%lst_vefs_lids(j), stat=istat)
!     end do
!     !write(*,*) icell, this%lst_vefs_lids(init_pos:end_pos)
!  end do
!  call next_vef_lid_avail%free()
!  !this%num_vefs = this%num_local_vefs+this%num_ghost_vefs

!end subroutine par_triangulation_allocate_and_fill_lst_vefs_lids_old

subroutine par_triangulation_allocate_and_fill_lst_vefs_lids ( this, lst_vefs_lids, lst_vefs_gids, vefs_gids)                                                     
  implicit none
  class(par_triangulation_t), intent(inout) :: this
  integer(ip)               , intent(in)    :: lst_vefs_lids(this%ptr_vefs_per_cell(this%num_local_cells+1)-1)
  integer(igp)              , intent(in)    :: lst_vefs_gids(this%ptr_vefs_per_cell(this%num_local_cells+this%num_ghost_cells+1)-1)
  integer(igp)              , intent(in)    :: vefs_gids(this%num_vefs)

  type(hash_table_igp_ip_t) :: next_vef_lid_avail
  integer(ip)               :: icell, istat, j, init_pos, end_pos, current, ivef           

  assert ( associated ( this%p_env ) )
  assert ( this%p_env%am_i_l1_task() )
  assert ( this%num_local_cells + this%num_ghost_cells >=0 )

  call this%free_lst_vefs_lids()

  call memalloc ( this%ptr_vefs_per_cell(this%num_local_cells+this%num_ghost_cells+1)-1, this%lst_vefs_lids, __FILE__, __LINE__ )
  call next_vef_lid_avail%init ( max(int(real( this%ptr_vefs_per_cell(this%num_local_cells+this%num_ghost_cells+1))*0.1_rp),5) )
  do ivef =1,this%num_vefs
     call next_vef_lid_avail%put(key=vefs_gids(ivef), val=ivef, stat=istat)
  end do
  
  ! Local cells contain vertices already locally numbered
  do icell=1, this%num_local_cells
     init_pos = this%ptr_vefs_per_cell(icell)
     end_pos  = this%ptr_vefs_per_cell(icell+1)-1
     do j=init_pos, end_pos
        this%lst_vefs_lids(j)=lst_vefs_lids(j)
     end do
  end do

  ! Ghost cells contain vefs not locally numbered
  do icell = this%num_local_cells +1, this%num_local_cells + this%num_ghost_cells
     init_pos = this%ptr_vefs_per_cell(icell)
     end_pos  = this%ptr_vefs_per_cell(icell+1)-1
     do j=init_pos, end_pos
        call next_vef_lid_avail%put(key=lst_vefs_gids(j), val=this%num_vefs+1, stat=istat)
        if (istat == now_stored) then
           this%num_vefs=this%num_vefs+1
        end if
        call next_vef_lid_avail%get(key=lst_vefs_gids(j), val=this%lst_vefs_lids(j), stat=istat)
     end do
  end do
  call next_vef_lid_avail%free()

end subroutine par_triangulation_allocate_and_fill_lst_vefs_lids
