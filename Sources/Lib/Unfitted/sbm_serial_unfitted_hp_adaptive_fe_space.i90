! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!========================================================================================
subroutine suhpafs_create_same_reference_fes_on_all_cells(&
  this, &
  triangulation, &
  conditions, &
  reference_fes )
  implicit none
  class(serial_unfitted_hp_adaptive_fe_space_t)           , intent(inout) :: this
  class(base_static_triangulation_t), target  , intent(in)    :: triangulation
  class(conditions_t)                         , intent(in)    :: conditions
  type(p_reference_fe_t)                      , intent(in)    :: reference_fes(:)
  mcheck(.false.,'You cannot create an unfitted fe space with the same reference fe on all cells (you need void and non void ref elems)')
end subroutine suhpafs_create_same_reference_fes_on_all_cells

!========================================================================================
subroutine suhpafs_space_create_different_between_cells(&
    this, &
    triangulation, &
    conditions, &
    reference_fes, &
    set_ids_to_reference_fes )
  implicit none
  class(serial_unfitted_hp_adaptive_fe_space_t)           , intent(inout) :: this
  class(base_static_triangulation_t), target  , intent(in)    :: triangulation
  class(conditions_t)                         , intent(in)    :: conditions
  type(p_reference_fe_t)                      , intent(in)    :: reference_fes(:)
  integer(ip)                                 , intent(in)    :: set_ids_to_reference_fes(:,:)
  class(marching_cubes_t), pointer :: marching_cubes
  call this%free()
  call this%serial_hp_adaptive_fe_space_t%create(&
    triangulation,conditions,reference_fes,set_ids_to_reference_fes)
  select type(triangulation)
  class is (unfitted_p4est_serial_triangulation_t)
    this%unfitted_triangulation => triangulation
    marching_cubes => triangulation%get_marching_cubes()
    call this%unfitted_integration%create(this,marching_cubes)
  class default
    check(.false.)
  end select
end subroutine suhpafs_space_create_different_between_cells

!========================================================================================
subroutine suhpafs_free(this)
  implicit none
  class(serial_unfitted_hp_adaptive_fe_space_t), intent(inout) :: this
  call this%serial_hp_adaptive_fe_space_t%free()
  this%unfitted_triangulation => null()
  call this%unfitted_integration%free()
end subroutine suhpafs_free

!========================================================================================
subroutine suhpafs_create_fe_iterator(this, fe)
  implicit none
  class(serial_unfitted_hp_adaptive_fe_space_t), intent(in)    :: this
  class(fe_iterator_t), allocatable, intent(inout) :: fe
  call this%unfitted_integration%create_fe_iterator(fe)
end subroutine suhpafs_create_fe_iterator
