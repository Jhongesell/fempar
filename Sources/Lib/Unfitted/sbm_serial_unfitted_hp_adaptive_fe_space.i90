! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!========================================================================================
subroutine suhpafs_create_same_reference_fes_on_all_cells(&
  this, &
  triangulation, &
  reference_fes, &
  conditions )
  implicit none
  class(serial_unfitted_hp_adaptive_fe_space_t)                    , intent(inout) :: this
  class(base_static_triangulation_t), target  , intent(in)    :: triangulation
  type(p_reference_fe_t)                      , intent(in)    :: reference_fes(:)
  class(conditions_t), target       , optional, intent(in)    :: conditions
  mcheck(.false.,'You cannot create an unfitted fe space with the same reference fe on all cells (you need void and non void ref elems)')
end subroutine suhpafs_create_same_reference_fes_on_all_cells

!========================================================================================
subroutine suhpafs_space_create_different_between_cells(&
    this, &
    triangulation,            &
    reference_fes,            &
    set_ids_to_reference_fes, &
    conditions )
  implicit none
  class(serial_unfitted_hp_adaptive_fe_space_t)                    , intent(inout) :: this
  class(base_static_triangulation_t), target  , intent(in)    :: triangulation
  type(p_reference_fe_t)                      , intent(in)    :: reference_fes(:)
  integer(ip)                                 , intent(in)    :: set_ids_to_reference_fes(:,:)
  class(conditions_t), target       , optional, intent(in)    :: conditions
  class(marching_cubes_t), pointer :: marching_cubes
  call this%free()
  call this%serial_hp_adaptive_fe_space_t%create(&
    triangulation,reference_fes,set_ids_to_reference_fes,conditions)
  select type(triangulation)
  class is (unfitted_p4est_serial_triangulation_t)
    this%unfitted_triangulation => triangulation
    marching_cubes => triangulation%get_marching_cubes()
    call this%unfitted_integration%create(this,marching_cubes)
  class default
    check(.false.)
  end select
  call this%allocate_and_fill_aggregate_ids()
end subroutine suhpafs_space_create_different_between_cells

!========================================================================================
subroutine suhpafs_free(this)
  implicit none
  class(serial_unfitted_hp_adaptive_fe_space_t), intent(inout) :: this
  call this%serial_hp_adaptive_fe_space_t%free()
  this%unfitted_triangulation => null()
  call this%unfitted_integration%free()
  if (allocated(this%aggregate_ids)) then
    call memfree(this%aggregate_ids,__FILE__,__LINE__)
  end if
end subroutine suhpafs_free

!========================================================================================
subroutine suhpafs_create_fe_iterator(this, fe)
  implicit none
  class(serial_unfitted_hp_adaptive_fe_space_t), intent(in)    :: this
  class(fe_iterator_t), allocatable, intent(inout) :: fe
  integer(ip) :: istat
  call this%free_fe_iterator(fe)
  allocate(unfitted_hp_adaptive_fe_iterator_t :: fe, stat=istat); check(istat==0)
  call fe%create(this)
end subroutine suhpafs_create_fe_iterator

!========================================================================================
function suhpafs_get_aggregate_ids(this)
  implicit none
  class(serial_unfitted_hp_adaptive_fe_space_t), target, intent(in)    :: this
  integer(ip), pointer :: suhpafs_get_aggregate_ids(:)
  suhpafs_get_aggregate_ids => this%aggregate_ids
end function suhpafs_get_aggregate_ids

!========================================================================================
subroutine suhpafs_allocate_and_fill_aggregate_ids(this)
  implicit none
  class(serial_unfitted_hp_adaptive_fe_space_t), intent(inout)    :: this

  class(cell_iterator_t), allocatable :: cell
  class(cell_iterator_t), allocatable :: cell_arround
  integer(ip), parameter :: max_num_sweeps = 5
  integer(ip) :: isweep
  logical ::  is_needed 
  logical :: has_been_aggregated
  integer(ip) :: icell_arround
  class(base_static_triangulation_t), pointer :: triangulation
  class(vef_iterator_t), allocatable :: vef
  integer(ip) :: ivef

  triangulation => this%get_triangulation()
  call memalloc(triangulation%get_num_local_cells(),this%aggregate_ids,__FILE__,__LINE__)
 
  call triangulation%create_cell_iterator(cell)
  call triangulation%create_cell_iterator(cell_arround)
  call triangulation%create_vef_iterator(vef)

  ! Initialize by setting the roots of the aggregates
  do while (.not. cell%has_finished())
    if (cell%is_local()) then
      if (cell%is_interior()) then
        this%aggregate_ids(cell%get_lid()) = cell%get_lid()
      else
        this%aggregate_ids(cell%get_lid()) = 0
      end if
    end if
    call cell%next()
  end do

  is_needed = .true.
  isweep = 1
  do while (is_needed)

    ! Check that we not reach the max num of sweeps allowed
    wassert(isweep <= max_num_sweeps, 'Max number of sweeps reached in the cut cell agglometarion algorithm. Refine your mesh!')
    if (isweep > max_num_sweeps) exit

    ! Glue to the neighbors
    call cell%first()
    is_needed = .false.
    do while (.not. cell%has_finished())
      if (cell%is_local()) then
        if ( cell%is_cut() .and. (this%aggregate_ids(cell%get_lid()) == 0) ) then

          ! TODO: We try to glue only by true neighbors
          ! For adaptive meshes, shall we look for improper neighbors as well?

          ! First try to glue to full cells
          has_been_aggregated = .false.
          vefsloop: do ivef = 1, cell%get_num_vefs()
            call cell%get_vef(ivef,vef)
            if ( .not. vef%is_face() ) cycle
            do icell_arround = 1,vef%get_num_cells_around()
              call vef%get_cell_around(icell_arround,cell_arround)
              if ( cell_arround%is_interior() ) then
                this%aggregate_ids(cell%get_lid()) = this%aggregate_ids(cell_arround%get_lid())
                has_been_aggregated = .true.
                exit vefsloop
              end if
            end do
          end do vefsloop

          ! If the cut cell has not been aggregated, try to glue to any neighbor cell already aggregated
          if (.not. has_been_aggregated) then
            vefsloop2: do ivef = 1, cell%get_num_vefs()
              call cell%get_vef(ivef,vef)
              if ( .not. vef%is_face() ) cycle
              do icell_arround = 1,vef%get_num_cells_around()
                call vef%get_cell_around(icell_arround,cell_arround)
                if ( this%aggregate_ids(cell_arround%get_lid()) > 0 ) then
                  this%aggregate_ids(cell%get_lid()) = this%aggregate_ids(cell_arround%get_lid())
                  has_been_aggregated = .true.
                  exit vefsloop2
                end if
              end do
            end do vefsloop2
          end if

          if (this%aggregate_ids(cell%get_lid()) == 0) then
            is_needed = .true.
          end if

        end if
      end if
      call cell%next()
    end do

    isweep = isweep + 1
  end do

  call triangulation%free_cell_iterator(cell)
  call triangulation%free_cell_iterator(cell_arround)
  call triangulation%free_vef_iterator(vef)

end subroutine suhpafs_allocate_and_fill_aggregate_ids


