! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!===============================================================================
subroutine unfitted_hp_adaptive_fe_iterator_create ( this, fe_space )
  implicit none
  class(unfitted_hp_adaptive_fe_iterator_t)            , intent(inout) :: this
  class(serial_fe_space_t), target, intent(in)    :: fe_space
  call this%unfitted_fe_iterator_t%create(fe_space)
  call this%adaptive_fe%create(fe_space)
end subroutine unfitted_hp_adaptive_fe_iterator_create

!===============================================================================
subroutine unfitted_hp_adaptive_fe_iterator_free (this)
  implicit none
  class(unfitted_hp_adaptive_fe_iterator_t), intent(inout) :: this
  call this%unfitted_fe_iterator_t%free()
  call this%adaptive_fe%free()
end subroutine unfitted_hp_adaptive_fe_iterator_free

!===============================================================================
subroutine unfitted_hp_adaptive_fe_iterator_next(this)
  implicit none
  class(unfitted_hp_adaptive_fe_iterator_t), intent(inout) :: this
  call this%unfitted_fe_iterator_t%next()
  call this%adaptive_fe%next()
end subroutine unfitted_hp_adaptive_fe_iterator_next

!===============================================================================
subroutine unfitted_hp_adaptive_fe_iterator_first(this)
  implicit none
  class(unfitted_hp_adaptive_fe_iterator_t), intent(inout) :: this
  call this%unfitted_fe_iterator_t%first()
  call this%adaptive_fe%first()
end subroutine unfitted_hp_adaptive_fe_iterator_first

!===============================================================================
subroutine unfitted_hp_adaptive_fe_iterator_last(this)
  implicit none
  class(unfitted_hp_adaptive_fe_iterator_t), intent(inout) :: this
  call this%unfitted_fe_iterator_t%last()
  call this%adaptive_fe%last()
end subroutine unfitted_hp_adaptive_fe_iterator_last

!===============================================================================
subroutine unfitted_hp_adaptive_fe_iterator_set_lid(this, lid)
  implicit none
  class(unfitted_hp_adaptive_fe_iterator_t), intent(inout) :: this
  integer(ip)        , intent(in)    :: lid
  call this%unfitted_fe_iterator_t%set_lid(lid)
  call this%adaptive_fe%set_lid(lid)
end subroutine unfitted_hp_adaptive_fe_iterator_set_lid

!===============================================================================
subroutine unfitted_hp_adaptive_fe_iterator_assemble(this,elmat,elvec,assembler)
  implicit none
  class(unfitted_hp_adaptive_fe_iterator_t), intent(in)    :: this
  real(rp)                        , intent(in)    :: elmat(:,:)
  real(rp)                        , intent(in)    :: elvec(:)
  class(assembler_t) , intent(inout) :: assembler
  call this%adaptive_fe%assemble(elmat,elvec,assembler)
end subroutine unfitted_hp_adaptive_fe_iterator_assemble

