! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!========================================================================================
subroutine unfitted_cell_iterator_create ( this, triangulation )
  implicit none
  class(unfitted_cell_iterator_t)           , intent(inout) :: this
  class(triangulation_t)            , target, intent(in)    :: triangulation

  class(unfitted_boundary_cutter_t), pointer :: boundary_cutter
  call this%free()
  select type (triangulation)
  class is (serial_unfitted_triangulation_t)
    boundary_cutter => triangulation%get_unfitted_boundary_cutter()
    call this%bst_cell_iterator_t%create(triangulation)
  class is (unfitted_p4est_serial_triangulation_t)
    boundary_cutter => triangulation%get_unfitted_boundary_cutter()
    call cell_iterator_create(this,triangulation)
  class is (par_unfitted_triangulation_t)
    boundary_cutter => triangulation%get_unfitted_boundary_cutter()
    call this%bst_cell_iterator_t%create(triangulation)
  class default
    check(.false.)
  end select
  assert(associated(boundary_cutter%get_triangulation()))
  this%boundary_cutter => boundary_cutter
end subroutine unfitted_cell_iterator_create

!========================================================================================
subroutine unfitted_cell_iterator_free ( this )
  implicit none
  class(unfitted_cell_iterator_t), intent(inout) :: this
  call this%bst_cell_iterator_t%free()
  nullify(this%boundary_cutter)
end subroutine unfitted_cell_iterator_free

!========================================================================================
function unfitted_cell_iterator_get_num_subcells( this ) result ( num_subcells )
  implicit none
  class(unfitted_cell_iterator_t), intent(in) :: this
  integer(ip) :: num_subcells
  assert(this%is_local())
  if ( this%is_cut() ) then
    num_subcells = this%boundary_cutter%get_num_subcells(this)
  else 
    num_subcells = 0
  end if
end function unfitted_cell_iterator_get_num_subcells

!========================================================================================
function unfitted_cell_iterator_get_num_subcell_nodes( this ) result ( num_nodes_subcell )
  implicit none
  class(unfitted_cell_iterator_t), intent(in) :: this
  integer(ip) :: num_nodes_subcell
  assert(this%is_local())
  if ( this%is_cut() ) then
    num_nodes_subcell = this%boundary_cutter%get_num_subcell_nodes(this)
  else
    num_nodes_subcell = 0
  end if
end function unfitted_cell_iterator_get_num_subcell_nodes

!========================================================================================
subroutine unfitted_cell_iterator_get_phys_coords_of_subcell( this, subcell, points)
  implicit none
  class(unfitted_cell_iterator_t), intent(in)    :: this
  integer(ip),                     intent(in)    :: subcell
  type(point_t),                   intent(inout) :: points(:)
  assert(this%is_local())
  call this%boundary_cutter%get_phys_coords_of_subcell( this, subcell, points )
end subroutine unfitted_cell_iterator_get_phys_coords_of_subcell

!========================================================================================
subroutine unfitted_cell_iterator_get_ref_coords_of_subcell( this, subcell, points)
  implicit none
  class(unfitted_cell_iterator_t), intent(in)    :: this
  integer(ip),                     intent(in)    :: subcell
  type(point_t),                   intent(inout) :: points(:)
  assert(this%is_local())
  call this%boundary_cutter%get_ref_coords_of_subcell( this, subcell, points)
end subroutine unfitted_cell_iterator_get_ref_coords_of_subcell

!========================================================================================
function unfitted_cell_iterator_get_num_subfacets( this ) result ( num_subfacets )
  implicit none
  class(unfitted_cell_iterator_t), intent(in)    :: this
  integer(ip) :: num_subfacets
  assert(this%is_local())
  if ( this%is_cut() ) then
    num_subfacets = this%boundary_cutter%get_num_subfacets(this)
  else
    num_subfacets = 0
  end if
end function unfitted_cell_iterator_get_num_subfacets

!========================================================================================
function unfitted_cell_iterator_get_num_subfacet_nodes( this ) result ( num_nodes_subfacet )
  implicit none
  class(unfitted_cell_iterator_t), intent(in)    :: this
  integer(ip) :: num_nodes_subfacet
  assert(this%is_local())
  if ( this%is_cut() ) then
    num_nodes_subfacet = this%boundary_cutter%get_num_subfacet_nodes(this)
  else
    num_nodes_subfacet = 0
  end if
end function unfitted_cell_iterator_get_num_subfacet_nodes

!========================================================================================
subroutine unfitted_cell_iterator_get_phys_coords_of_subfacet( this, subfacet, points )
  implicit none
  class(unfitted_cell_iterator_t), intent(in)    :: this
  integer(ip),                     intent(in)    :: subfacet
  type(point_t),                   intent(inout) :: points(:)
  assert(this%is_local())
  call this%boundary_cutter%get_phys_coords_of_subfacet(this,subfacet, points )
end subroutine unfitted_cell_iterator_get_phys_coords_of_subfacet

!========================================================================================
subroutine unfitted_cell_iterator_get_ref_coords_of_subfacet( this, subfacet, points )
  implicit none
  class(unfitted_cell_iterator_t), intent(in)    :: this
  integer(ip),                     intent(in)    :: subfacet
  type(point_t),                   intent(inout) :: points(:)
  assert(this%is_local())
  call this%boundary_cutter%get_ref_coords_of_subfacet( this, subfacet, points )
end subroutine unfitted_cell_iterator_get_ref_coords_of_subfacet

!========================================================================================
function unfitted_cell_iterator_is_cut( this ) result ( is_cut )
  implicit none
  class(unfitted_cell_iterator_t), intent(in)    :: this
  logical :: is_cut
  assert( this%is_local() )
  is_cut = this%boundary_cutter%is_cut(this)
end function unfitted_cell_iterator_is_cut

!========================================================================================
function unfitted_cell_iterator_is_interior( this ) result ( is_interior )
  implicit none
  class(unfitted_cell_iterator_t), intent(in)  :: this
  logical :: is_interior
  assert(this%is_local())
  is_interior = this%boundary_cutter%is_interior(this)
end function unfitted_cell_iterator_is_interior

!========================================================================================
function unfitted_cell_iterator_is_exterior( this ) result ( is_exterior )
  implicit none
  class(unfitted_cell_iterator_t), intent(in)  :: this
  logical :: is_exterior
  assert(this%is_local())
  is_exterior = this%boundary_cutter%is_exterior(this)
end function unfitted_cell_iterator_is_exterior

!========================================================================================
function unfitted_cell_iterator_is_interior_subcell( this, subcell ) result ( is_in )
  implicit none
  class(unfitted_cell_iterator_t), intent(in)  :: this
  integer(ip), intent(in) :: subcell
  logical :: is_in
  assert( this%is_local() )
  is_in = this%boundary_cutter%is_interior_subcell( this, subcell )
end function unfitted_cell_iterator_is_interior_subcell

!========================================================================================
function unfitted_cell_iterator_is_exterior_subcell( this, subcell ) result ( is_out )
  implicit none
  class(unfitted_cell_iterator_t), intent(in)  :: this
  integer(ip), intent(in) :: subcell
  logical :: is_out
  assert(this%is_local())
  is_out = this%boundary_cutter%is_exterior_subcell( this, subcell )
end function unfitted_cell_iterator_is_exterior_subcell
