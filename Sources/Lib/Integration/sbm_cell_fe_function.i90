! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


!**************************************************************************************************
! Methods associated to cell_fe_function_scalar_t
!**************************************************************************************************

!===============================================================================================
subroutine cell_fe_function_scalar_create ( this, ifield, max_nnode, max_npoint )
  implicit none
  class(cell_fe_function_scalar_t), intent(inout) :: this 
  integer(ip)                     , intent(in)    :: ifield, max_nnode, max_npoint
  integer(ip)                                     :: istat

  call this%free()

  this%field_id = ifield

  this%max_number_nodes = max_nnode
  this%max_number_quadrature_points = max_npoint

  allocate ( this%nodal_values(max_nnode), stat = istat )
  check(istat==0)

  allocate ( this%quadrature_points_values(max_npoint), stat = istat )
  check(istat==0)

  allocate ( this%quadrature_points_gradients(max_npoint), stat = istat )
  check(istat==0)

end subroutine cell_fe_function_scalar_create

!===============================================================================================
function cell_fe_function_scalar_get_field_id ( this )
  implicit none
  class(cell_fe_function_scalar_t), intent(in) :: this 
  integer(ip) :: cell_fe_function_scalar_get_field_id
  cell_fe_function_scalar_get_field_id = this%field_id
end function cell_fe_function_scalar_get_field_id

!===============================================================================================
function cell_fe_function_scalar_get_nodal_values ( this )
  implicit none
  class(cell_fe_function_scalar_t), target, intent(in) :: this 
  real(rp), pointer :: cell_fe_function_scalar_get_nodal_values(:)
  cell_fe_function_scalar_get_nodal_values => this%nodal_values
end function cell_fe_function_scalar_get_nodal_values

!===============================================================================================
function cell_fe_function_scalar_get_quadrature_points_values ( this )
  implicit none
  class(cell_fe_function_scalar_t), target, intent(in) :: this 
  real(rp), pointer :: cell_fe_function_scalar_get_quadrature_points_values(:)
  cell_fe_function_scalar_get_quadrature_points_values => this%quadrature_points_values
end function cell_fe_function_scalar_get_quadrature_points_values

!===============================================================================================
function cell_fe_function_scalar_get_quadrature_points_gradients ( this )
  implicit none
  class(cell_fe_function_scalar_t), target, intent(in) :: this 
  type(vector_field_t), pointer :: cell_fe_function_scalar_get_quadrature_points_gradients(:)
  cell_fe_function_scalar_get_quadrature_points_gradients => this%quadrature_points_gradients
end function cell_fe_function_scalar_get_quadrature_points_gradients

!===============================================================================================
subroutine cell_fe_function_scalar_get_value ( this, point, value )
  implicit none
  class(cell_fe_function_scalar_t), intent(in)    :: this 
  integer(ip)                     , intent(in)    :: point
  real(rp)                        , intent(inout) :: value

  assert ( point <= this%current_number_quadrature_points )
  value = this%quadrature_points_values(point)

end subroutine cell_fe_function_scalar_get_value

!===============================================================================================
subroutine cell_fe_function_scalar_get_gradient ( this, point, value )
  implicit none
  class(cell_fe_function_scalar_t), intent(in)    :: this 
  integer(ip)                     , intent(in)    :: point
  type(vector_field_t)            , intent(inout) :: value

  assert ( point <= this%current_number_quadrature_points )
  value = this%quadrature_points_gradients(point)

end subroutine cell_fe_function_scalar_get_gradient

!===============================================================================================
subroutine cell_fe_function_scalar_set_current_number_nodes ( this, value )
  implicit none
  class(cell_fe_function_scalar_t), intent(inout) :: this 
  integer(ip)                     , intent(in)    :: value

  assert ( value <= this%max_number_nodes )
  this%current_number_nodes = value

end subroutine cell_fe_function_scalar_set_current_number_nodes

!===============================================================================================
subroutine cell_fe_function_scalar_set_current_number_quadrature_points ( this, value )
  implicit none
  class(cell_fe_function_scalar_t), intent(inout) :: this 
  integer(ip)                     , intent(in)    :: value
  assert ( value <= this%max_number_quadrature_points ) 
  this%current_number_quadrature_points = value

end subroutine cell_fe_function_scalar_set_current_number_quadrature_points

!===============================================================================================
subroutine cell_fe_function_scalar_free ( this )
  implicit none
  class(cell_fe_function_scalar_t), intent(inout) :: this 
  integer(ip)                                     :: istat

  this%field_id = 0.0_ip

  this%current_number_nodes             = 0.0_ip
  this%current_number_quadrature_points = 0.0_ip

  this%max_number_nodes                 = 0.0_ip
  this%max_number_quadrature_points     = 0.0_ip

  if (allocated(this%nodal_values)) then 
     deallocate ( this%nodal_values, stat = istat )
     check(istat==0)
  end if

  if (allocated(this%quadrature_points_values)) then
     deallocate ( this%quadrature_points_values, stat = istat )
     check(istat==0)
  end if

  if (allocated(this%quadrature_points_gradients)) then
     deallocate ( this%quadrature_points_gradients, stat = istat )
     check(istat==0)
  end if
  
end subroutine cell_fe_function_scalar_free


!**************************************************************************************************
! Methods associated to cell_fe_function_vector_t
!**************************************************************************************************

!===============================================================================================
subroutine cell_fe_function_vector_create ( this, ifield, max_nnode, max_npoint )
  implicit none
  class(cell_fe_function_vector_t), intent(inout) :: this 
  integer(ip)                     , intent(in)    :: ifield, max_nnode, max_npoint
  integer(ip)                                     :: istat

  call this%free()

  this%field_id = ifield

  this%max_number_nodes = max_nnode
  this%max_number_quadrature_points = max_npoint

  allocate ( this%nodal_values(max_nnode), stat = istat )
  check(istat==0)

  allocate ( this%quadrature_points_values(max_npoint), stat = istat )
  check(istat==0)

  allocate ( this%quadrature_points_gradients(max_npoint), stat = istat )
  check(istat==0)
  
end subroutine cell_fe_function_vector_create

!===============================================================================================
function cell_fe_function_vector_get_field_id ( this )
  implicit none
  class(cell_fe_function_vector_t), intent(in) :: this 
  integer(ip) :: cell_fe_function_vector_get_field_id
  cell_fe_function_vector_get_field_id = this%field_id
end function cell_fe_function_vector_get_field_id

!===============================================================================================
function cell_fe_function_vector_get_nodal_values ( this )
  implicit none
  class(cell_fe_function_vector_t), target, intent(in) :: this 
  real(rp), pointer :: cell_fe_function_vector_get_nodal_values(:)
  cell_fe_function_vector_get_nodal_values => this%nodal_values
end function cell_fe_function_vector_get_nodal_values

!===============================================================================================
function cell_fe_function_vector_get_quadrature_points_values ( this )
  implicit none
  class(cell_fe_function_vector_t), target, intent(in) :: this 
  type(vector_field_t), pointer :: cell_fe_function_vector_get_quadrature_points_values(:)
  cell_fe_function_vector_get_quadrature_points_values => this%quadrature_points_values
end function cell_fe_function_vector_get_quadrature_points_values

!===============================================================================================
function cell_fe_function_vector_get_quadrature_points_gradients ( this )
  implicit none
  class(cell_fe_function_vector_t), target, intent(in) :: this 
  type(tensor_field_t), pointer :: cell_fe_function_vector_get_quadrature_points_gradients(:)
  cell_fe_function_vector_get_quadrature_points_gradients => this%quadrature_points_gradients
end function cell_fe_function_vector_get_quadrature_points_gradients

!===============================================================================================
subroutine cell_fe_function_vector_get_value ( this, point, value )
  implicit none
  class(cell_fe_function_vector_t), intent(in)    :: this 
  integer(ip)                     , intent(in)    :: point
  type(vector_field_t)            , intent(inout) :: value

  assert ( point <= this%current_number_quadrature_points )
  value = this%quadrature_points_values(point)

end subroutine cell_fe_function_vector_get_value

!===============================================================================================
subroutine cell_fe_function_vector_get_gradient ( this, point, value )
  implicit none
  class(cell_fe_function_vector_t), intent(in)    :: this 
  integer(ip)                     , intent(in)    :: point
  type(tensor_field_t)            , intent(inout) :: value
  
  assert ( point <= this%current_number_quadrature_points )
  value = this%quadrature_points_gradients(point)

end subroutine cell_fe_function_vector_get_gradient

!===============================================================================================
subroutine cell_fe_function_vector_set_current_number_nodes ( this, value )
  implicit none
  class(cell_fe_function_vector_t), intent(inout) :: this 
  integer(ip)                     , intent(in)    :: value

  assert ( value <= this%max_number_nodes )
  this%current_number_nodes = value

end subroutine cell_fe_function_vector_set_current_number_nodes

!===============================================================================================
subroutine cell_fe_function_vector_set_current_number_quadrature_points ( this, value )
  implicit none
  class(cell_fe_function_vector_t), intent(inout) :: this 
  integer(ip)                     , intent(in)    :: value

  assert ( value <= this%max_number_quadrature_points ) 
  this%current_number_quadrature_points = value

end subroutine cell_fe_function_vector_set_current_number_quadrature_points

!===============================================================================================
subroutine cell_fe_function_vector_free ( this )
  implicit none
  class(cell_fe_function_vector_t), intent(inout) :: this 
  integer(ip)                                     :: istat

  this%field_id = 0.0_ip

  this%current_number_nodes             = 0.0_ip
  this%current_number_quadrature_points = 0.0_ip

  this%max_number_nodes                 = 0.0_ip
  this%max_number_quadrature_points     = 0.0_ip

  if (allocated(this%nodal_values)) then 
     deallocate ( this%nodal_values, stat = istat )
     check(istat==0)
  end if

  if (allocated(this%quadrature_points_values)) then
     deallocate ( this%quadrature_points_values, stat = istat )
     check(istat==0)
  end if

  if (allocated(this%quadrature_points_gradients)) then
     deallocate ( this%quadrature_points_gradients, stat = istat )
     check(istat==0)
  end if

end subroutine cell_fe_function_vector_free


!**************************************************************************************************
! Methods associated to cell_fe_function_tensor_t
!**************************************************************************************************

!===============================================================================================
subroutine cell_fe_function_tensor_create ( this, ifield, max_nnode, max_npoint )
  implicit none
  class(cell_fe_function_tensor_t), intent(inout) :: this 
  integer(ip)                     , intent(in)    :: ifield, max_nnode, max_npoint
  integer(ip)                                     :: istat

  call this%free()

  this%field_id = ifield

  this%max_number_nodes = max_nnode
  this%max_number_quadrature_points = max_npoint

  allocate ( this%nodal_values(max_nnode), stat = istat )
  check(istat==0)

  allocate ( this%quadrature_points_values(max_npoint), stat = istat )
  check(istat==0)

end subroutine cell_fe_function_tensor_create

!===============================================================================================
function cell_fe_function_tensor_get_field_id ( this )
  implicit none
  class(cell_fe_function_tensor_t), intent(in) :: this 
  integer(ip) :: cell_fe_function_tensor_get_field_id
  cell_fe_function_tensor_get_field_id = this%field_id
end function cell_fe_function_tensor_get_field_id

!===============================================================================================
function cell_fe_function_tensor_get_nodal_values ( this )
  implicit none
  class(cell_fe_function_tensor_t), target, intent(in) :: this 
  real(rp), pointer :: cell_fe_function_tensor_get_nodal_values(:)
  cell_fe_function_tensor_get_nodal_values => this%nodal_values
end function cell_fe_function_tensor_get_nodal_values

!===============================================================================================
function cell_fe_function_tensor_get_quadrature_points_values ( this )
  implicit none
  class(cell_fe_function_tensor_t), target, intent(in) :: this 
  type(tensor_field_t), pointer :: cell_fe_function_tensor_get_quadrature_points_values(:)
  cell_fe_function_tensor_get_quadrature_points_values => this%quadrature_points_values
end function cell_fe_function_tensor_get_quadrature_points_values

!===============================================================================================
subroutine cell_fe_function_tensor_get_value ( this, point, value )
  implicit none
  class(cell_fe_function_tensor_t), intent(in)    :: this 
  integer(ip)                     , intent(in)    :: point
  type(tensor_field_t)            , intent(inout) :: value

  assert ( point <= this%current_number_quadrature_points )
  value = this%quadrature_points_values(point)

end subroutine cell_fe_function_tensor_get_value

!===============================================================================================
subroutine cell_fe_function_tensor_set_current_number_nodes ( this, value )
  implicit none
  class(cell_fe_function_tensor_t), intent(inout) :: this 
  integer(ip)                     , intent(in)    :: value

  assert ( value <= this%max_number_nodes )
  this%current_number_nodes = value

end subroutine cell_fe_function_tensor_set_current_number_nodes

!===============================================================================================
subroutine cell_fe_function_tensor_set_current_number_quadrature_points ( this, value )
  implicit none
  class(cell_fe_function_tensor_t), intent(inout) :: this 
  integer(ip)                     , intent(in)    :: value

  assert ( value <= this%max_number_quadrature_points ) 
  this%current_number_quadrature_points = value

end subroutine cell_fe_function_tensor_set_current_number_quadrature_points

!===============================================================================================
subroutine cell_fe_function_tensor_free ( this )
  implicit none
  class(cell_fe_function_tensor_t), intent(inout) :: this 
  integer(ip)                                     :: istat

  this%field_id = 0.0_ip

  this%current_number_nodes             = 0.0_ip
  this%current_number_quadrature_points = 0.0_ip

  this%max_number_nodes                 = 0.0_ip
  this%max_number_quadrature_points     = 0.0_ip


  if (allocated(this%nodal_values)) then 
     deallocate ( this%nodal_values, stat = istat )
     check(istat==0)
  end if

  if (allocated(this%quadrature_points_values)) then
     deallocate ( this%quadrature_points_values, stat = istat )
     check(istat==0)
  end if

end subroutine cell_fe_function_tensor_free
