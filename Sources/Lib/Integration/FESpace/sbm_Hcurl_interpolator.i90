! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
! ================================================================================
subroutine Hcurl_interpolator_evaluate_scalar_function_moments(this, fe, scalar_function, dof_values, n_face_mask, time ) 
  implicit none
  class(Hcurl_interpolator_t)           , intent(inout) :: this
  class(fe_cell_iterator_t)             , intent(in)    :: fe
  class(scalar_function_t)              , intent(in)    :: scalar_function
  real(rp) , allocatable                , intent(inout) :: dof_values(:) 
  logical  , optional                   , intent(in)    :: n_face_mask(:)
  real(rp) , optional                   , intent(in)    :: time 
  ! Does not apply for vector FEs
  assert(.false.) 
end subroutine Hcurl_interpolator_evaluate_scalar_function_moments

! ================================================================================
subroutine Hcurl_interpolator_update_edge_map_coordinates( this, reference_fe, cell_coordinates, edge_id, edge_map ) 
  implicit none 
  class(Hcurl_interpolator_t)           , intent(inout) :: this
  class(reference_fe_t)                 , intent(in)    :: reference_fe
  type(point_t)                         , intent(in)    :: cell_coordinates(:)
  integer(ip)                           , intent(in)    :: edge_id 
  type(edge_map_t)                      , intent(inout) :: edge_map 
  type(point_t), pointer    :: edge_map_coordinates(:)
  type(list_iterator_t)     :: vertex_iterator
  integer(ip)               :: vertex_within_edge_id
  integer(ip)               :: vertex_within_cell_id 

  edge_map_coordinates => edge_map%get_coordinates()   

  vertex_within_edge_id = 1
  vertex_iterator = reference_fe%create_vertices_n_face_iterator(edge_id)
  do while ( .not. vertex_iterator%is_upper_bound () )
     vertex_within_cell_id = vertex_iterator%get_current()
     call edge_map_coordinates(vertex_within_edge_id)%init( cell_coordinates(vertex_within_cell_id)%get_value() )
     call vertex_iterator%next()
     vertex_within_edge_id = vertex_within_edge_id + 1
  end do

end subroutine Hcurl_interpolator_update_edge_map_coordinates

! ================================================================================
subroutine Hcurl_interpolator_update_facet_map_coordinates( this, reference_fe, cell_coordinates, facet_id, facet_map ) 
  implicit none 
  class(Hcurl_interpolator_t)           , intent(inout) :: this
  class(reference_fe_t)                 , intent(in)    :: reference_fe
  type(point_t)                         , intent(in)    :: cell_coordinates(:)
  integer(ip)                           , intent(in)    :: facet_id 
  type(facet_map_t)                     , intent(inout) :: facet_map 
  type(point_t), pointer   :: facet_map_coordinates(:)
  type(list_iterator_t)    :: vertex_iterator
  integer(ip)              :: vertex_within_facet_id
  integer(ip)               :: vertex_within_cell_id 

  facet_map_coordinates => facet_map%get_coordinates()

  vertex_within_facet_id = 1
  vertex_iterator = reference_fe%create_vertices_n_face_iterator(facet_id)
  do while ( .not. vertex_iterator%is_upper_bound () )
     vertex_within_cell_id = vertex_iterator%get_current()
     call facet_map_coordinates(vertex_within_facet_id)%init( cell_coordinates(vertex_within_cell_id)%get_value() )
     call vertex_iterator%next()
     vertex_within_facet_id = vertex_within_facet_id + 1
  end do

end subroutine Hcurl_interpolator_update_facet_map_coordinates

! ================================================================================
subroutine Hcurl_interpolator_reallocate_function_arrays( this, fe, dof_values, edge_function_values, & 
     facet_function_values, cell_function_values ) 
  implicit none 
  class(Hcurl_interpolator_t )      , intent(inout) :: this 
  class(fe_cell_iterator_t)         , intent(in)    :: fe 
  real(rp)            , allocatable , intent(inout) :: dof_values(:) 
  type(vector_field_t), allocatable , intent(inout) :: edge_function_values(:,:) 
  type(vector_field_t), allocatable , intent(inout) :: facet_function_values(:,:) 
  type(vector_field_t), allocatable , intent(inout) :: cell_function_values(:,:)

  class(reference_fe_t) , pointer :: reference_fe 
  integer(ip)                     :: reference_fe_id 

  integer(ip) :: num_quad_points
  logical     :: reallocate 
  integer(ip) :: istat 

  reference_fe_id  =  fe%get_reference_fe_id(this%field_id)
  reference_fe     => fe%get_reference_fe(this%field_id)

  ! Reallocate arrays if necessary 
  reallocate = .false.
  if (allocated(dof_values)) reallocate = ( size(dof_values) < reference_fe%get_num_shape_functions() )                                      
  if ( (.not. allocated(dof_values)) .or. reallocate) then
     if (allocated(dof_values)) call memfree(dof_values, __FILE__,__LINE__); 
     call memalloc(reference_fe%get_num_shape_functions(), dof_values, __FILE__,__LINE__);
  end if

  ! Realloc vector function edge values 
  reallocate = .false.
  num_quad_points = this%edge_quadratures(reference_fe_id)%get_num_quadrature_points()
  if (allocated(edge_function_values)) reallocate = ( size(edge_function_values,1) < num_quad_points )                                      
  if ( (.not. allocated(edge_function_values)) .or. reallocate) then
     if (allocated(edge_function_values)) then 
        deallocate( edge_function_values, stat=istat); check(istat==0) 
     end if
     allocate( edge_function_values(num_quad_points,1), stat=istat ); check(istat==0) 
  end if

  ! Realloc vector function facet values 
  reallocate = .false.
  num_quad_points = this%facet_quadratures(reference_fe_id)%get_num_quadrature_points()
  if (allocated(facet_function_values)) reallocate = ( size(facet_function_values,1) < num_quad_points )                                      
  if ( (.not. allocated(facet_function_values)) .or. reallocate) then
     if (allocated(facet_function_values)) then 
        deallocate( this%facet_function_values, stat=istat); check(istat==0) 
     end if
     allocate( facet_function_values(num_quad_points,1), stat=istat ); check(istat==0) 
  end if

  ! Realloc vector cell function values 
  reallocate = .false.
  num_quad_points = this%cell_quadratures(reference_fe_id)%num_quadrature_points
  if (allocated(cell_function_values)) reallocate = ( size(cell_function_values,1) < num_quad_points )                                      
  if ( (.not. allocated(this%cell_function_values)) .or. reallocate) then
     if (allocated(cell_function_values)) then 
        deallocate( cell_function_values, stat=istat); check(istat==0) 
     end if
     allocate( cell_function_values(num_quad_points,1), stat=istat ); check(istat==0) 
  end if

end subroutine Hcurl_interpolator_reallocate_function_arrays

! ================================================================================
subroutine Hcurl_interpolator_reallocate_boundary_function_arrays( this, fe, dof_values, &
     scalar_function_values_on_edge, scalar_function_values_on_facet ) 
  implicit none 
  class(Hcurl_interpolator_t )      , intent(inout) :: this 
  class(fe_cell_iterator_t)         , intent(in)    :: fe 
  real(rp)            , allocatable , intent(inout) :: dof_values(:) 
  real(rp)            , allocatable , intent(inout) :: scalar_function_values_on_edge(:,:)
  real(rp)            , allocatable , intent(inout) :: scalar_function_values_on_facet(:,:)

  class(reference_fe_t) , pointer :: reference_fe 
  integer(ip)                     :: reference_fe_id 

  integer(ip) :: num_quad_points
  logical     :: reallocate 
  integer(ip) :: istat 

  reference_fe_id  =  fe%get_reference_fe_id(this%field_id)
  reference_fe     => fe%get_reference_fe(this%field_id)

  ! Reallocate arrays if necessary 
  reallocate = .false.
  if (allocated(dof_values)) reallocate = ( size(dof_values) < reference_fe%get_num_shape_functions() )                                      
  if ( (.not. allocated(dof_values)) .or. reallocate) then
     if (allocated(dof_values)) call memfree(dof_values, __FILE__,__LINE__); 
     call memalloc(reference_fe%get_num_shape_functions(), dof_values, __FILE__,__LINE__);
  end if

  ! Realloc scalar_function_values on edge if necessary 
  reallocate = .false.
  num_quad_points      = this%edge_quadratures(reference_fe_id)%get_num_quadrature_points()
  if (allocated(scalar_function_values_on_edge)) reallocate = ( size(scalar_function_values_on_edge,1) < num_quad_points )                                      
  if ( (.not. allocated(scalar_function_values_on_edge)) .or. reallocate) then
     if (allocated(scalar_function_values_on_edge)) then 
        call memfree(scalar_function_values_on_edge, __FILE__, __LINE__)
     end if
     call memalloc(num_quad_points, 1, scalar_function_values_on_edge, __FILE__, __LINE__); 
  end if

  ! Realloc scalar_function_values on face if necessary 
  reallocate = .false.
  num_quad_points = this%facet_quadratures(reference_fe_id)%get_num_quadrature_points()
  if (allocated(scalar_function_values_on_facet)) reallocate = ( size(scalar_function_values_on_facet,1) < num_quad_points )                                      
  if ( (.not. allocated(scalar_function_values_on_facet)) .or. reallocate) then
     if (allocated(scalar_function_values_on_facet)) then 
        call memfree(scalar_function_values_on_facet, __FILE__, __LINE__)
     end if
     call memalloc(num_quad_points, 1, scalar_function_values_on_facet, __FILE__, __LINE__); 
  end if

end subroutine Hcurl_interpolator_reallocate_boundary_function_arrays
