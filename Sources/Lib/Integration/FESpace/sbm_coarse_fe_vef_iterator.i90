! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine coarse_fe_vef_iterator_create ( this, coarse_fe_space )
  implicit none
  class(coarse_fe_vef_iterator_t)     , intent(inout) :: this
  type(coarse_fe_space_t), target     , intent(in)    :: coarse_fe_space
  integer(ip) :: istat
  call this%free()
  allocate(vef_iterator_t :: this%vef, stat=istat); check(istat==0)
  call this%vef%create(coarse_fe_space%coarse_triangulation)
  this%coarse_fe_space => coarse_fe_space
end subroutine coarse_fe_vef_iterator_create

subroutine coarse_fe_vef_iterator_free ( this)
  implicit none
  class(coarse_fe_vef_iterator_t), intent(inout) :: this
  integer(ip) :: istat
  if(allocated(this%vef)) then
     call this%vef%free()
     deallocate(this%vef, stat=istat); check(istat==0)
  end if
  nullify(this%coarse_fe_space)
end subroutine coarse_fe_vef_iterator_free

subroutine coarse_fe_vef_iterator_final(this)
  implicit none
  type(coarse_fe_vef_iterator_t), intent(inout) :: this
  assert ( .not. associated(this%coarse_fe_space) ) 
end subroutine coarse_fe_vef_iterator_final  

subroutine coarse_fe_vef_iterator_get_coarse_fe_around (this, icoarse_fe_around, coarse_fe)
  implicit none
  class(coarse_fe_vef_iterator_t), intent(in)    :: this
  integer(ip)                    , intent(in)    :: icoarse_fe_around
  type(coarse_fe_cell_iterator_t)     , intent(inout) :: coarse_fe
  assert(allocated(this%vef))
  assert(allocated(coarse_fe%cell))
  call this%vef%get_cell_around(icoarse_fe_around,coarse_fe%cell)
end subroutine coarse_fe_vef_iterator_get_coarse_fe_around

