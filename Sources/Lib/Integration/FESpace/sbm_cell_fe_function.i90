! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


!**************************************************************************************************
! Methods associated to cell_fe_function_scalar_t
!**************************************************************************************************

!===============================================================================================
subroutine cell_fe_function_scalar_create ( this, fe_space, field_id )
  implicit none
  class(cell_fe_function_scalar_t), intent(inout) :: this 
  class(serial_fe_space_t)        , intent(in)    :: fe_space
  integer(ip)                     , intent(in)    :: field_id
  integer(ip)                                     :: istat
  class(environment_t)            , pointer       :: environment  
  integer(ip) :: max_number_nodes
  
  call this%free()
  assert ( field_id >=1 .and. field_id <= fe_space%get_number_fields() )

  this%field_id = field_id
  environment => fe_space%get_environment()
  if ( environment%am_i_l1_task() ) then 
     assert ( fe_space%get_field_type(field_id) == field_type_scalar )
     max_number_nodes = fe_space%get_max_number_shape_functions() 
     allocate ( this%nodal_values(max_number_nodes), stat = istat )
     check(istat==0)
  end if

end subroutine cell_fe_function_scalar_create

subroutine cell_fe_function_scalar_move_alloc_values_in ( this, values )
  implicit none
  class(cell_fe_function_scalar_t), intent(inout) :: this 
  real(rp), allocatable           , intent(inout) :: values(:)
  assert ( allocated(values) ) 
  assert ( .not. allocated(this%quadrature_points_values))
  call move_alloc( from=values, to=this%quadrature_points_values)
end subroutine cell_fe_function_scalar_move_alloc_values_in

subroutine cell_fe_function_scalar_move_alloc_values_out ( this, values )
  implicit none
  class(cell_fe_function_scalar_t), intent(inout) :: this 
  real(rp), allocatable           , intent(inout) :: values(:)
  assert ( .not. allocated(values) ) 
  assert ( allocated(this%quadrature_points_values))
  call move_alloc( to=values, from=this%quadrature_points_values)
end subroutine cell_fe_function_scalar_move_alloc_values_out

subroutine cell_fe_function_scalar_move_alloc_gradients_in ( this, gradients )
  implicit none
  class(cell_fe_function_scalar_t)   , intent(inout) :: this 
  type(vector_field_t), allocatable  , intent(inout) :: gradients(:)
  assert ( allocated(gradients) ) 
  assert ( .not. allocated(this%quadrature_points_gradients))
  call move_alloc( from=gradients, to=this%quadrature_points_gradients)
end subroutine cell_fe_function_scalar_move_alloc_gradients_in

subroutine cell_fe_function_scalar_move_alloc_gradients_out ( this, gradients )
  implicit none
  class(cell_fe_function_scalar_t)  , intent(inout) :: this 
  type(vector_field_t), allocatable , intent(inout) :: gradients(:)
  assert ( .not. allocated(gradients) ) 
  assert ( allocated(this%quadrature_points_gradients))
  call move_alloc( to=gradients, from=this%quadrature_points_gradients)
end subroutine cell_fe_function_scalar_move_alloc_gradients_out


subroutine cell_fe_function_scalar_update ( this, fe_accessor, fe_function )
  implicit none
  class(cell_fe_function_scalar_t), intent(inout) :: this
  type(fe_accessor_t)             , intent(in)    :: fe_accessor
  type(fe_function_t)             , intent(in)    :: fe_function
  integer(ip)                        :: inode, field_id
  integer(ip)                        :: number_nodes_field, number_quadrature_points
  class(reference_fe_t)      , pointer :: reference_fe
  type(quadrature_t)         , pointer :: quadrature
  type(volume_integrator_t)  , pointer :: volume_integrator
  class(environment_t)       , pointer :: environment
  class(serial_fe_space_t)   , pointer :: serial_fe_space  
  
  serial_fe_space => fe_accessor%get_fe_space()
  environment     => serial_fe_space%get_environment()
  
  if ( environment%am_i_l1_task() ) then
     field_id                 =  this%get_field_id()
     reference_fe             => fe_accessor%get_reference_fe(field_id)
     quadrature               => fe_accessor%get_quadrature()
     volume_integrator        => fe_accessor%get_volume_integrator(field_id)
     number_nodes_field       =  reference_fe%get_number_shape_functions()
     number_quadrature_points =  quadrature%get_number_quadrature_points()

     call this%set_current_number_quadrature_points( number_quadrature_points )
     call this%set_current_number_nodes( number_nodes_field )

     ! Gather DoFs of current cell + field_id on nodal_values 
     call fe_function%gather_nodal_values(fe_accessor, field_id, this%nodal_values)
     
     ! Evaluate values and gradients at quadrature points
     call volume_integrator%evaluate_fe_function ( this%nodal_values, & 
                                                   this%quadrature_points_values )

     call volume_integrator%evaluate_gradient_fe_function ( this%nodal_values, & 
                                                            this%quadrature_points_gradients )
  end if
end subroutine cell_fe_function_scalar_update


!===============================================================================================
function cell_fe_function_scalar_get_field_id ( this )
  implicit none
  class(cell_fe_function_scalar_t), intent(in) :: this 
  integer(ip) :: cell_fe_function_scalar_get_field_id
  cell_fe_function_scalar_get_field_id = this%field_id
end function cell_fe_function_scalar_get_field_id

!===============================================================================================
function cell_fe_function_scalar_get_nodal_values ( this )
  implicit none
  class(cell_fe_function_scalar_t), target, intent(in) :: this 
  real(rp), pointer :: cell_fe_function_scalar_get_nodal_values(:)
  cell_fe_function_scalar_get_nodal_values => this%nodal_values
end function cell_fe_function_scalar_get_nodal_values

!===============================================================================================
function cell_fe_function_scalar_get_quadrature_points_values ( this )
  implicit none
  class(cell_fe_function_scalar_t), target, intent(in) :: this 
  real(rp), pointer :: cell_fe_function_scalar_get_quadrature_points_values(:)
  cell_fe_function_scalar_get_quadrature_points_values => this%quadrature_points_values
end function cell_fe_function_scalar_get_quadrature_points_values

!===============================================================================================
function cell_fe_function_scalar_get_quadrature_points_gradients ( this )
  implicit none
  class(cell_fe_function_scalar_t), target, intent(in) :: this 
  type(vector_field_t), pointer :: cell_fe_function_scalar_get_quadrature_points_gradients(:)
  cell_fe_function_scalar_get_quadrature_points_gradients => this%quadrature_points_gradients
end function cell_fe_function_scalar_get_quadrature_points_gradients

!===============================================================================================
subroutine cell_fe_function_scalar_get_value ( this, point, value )
  implicit none
  class(cell_fe_function_scalar_t), intent(in)    :: this 
  integer(ip)                     , intent(in)    :: point
  real(rp)                        , intent(inout) :: value
  assert ( point <= this%current_number_quadrature_points )
  value = this%quadrature_points_values(point)
end subroutine cell_fe_function_scalar_get_value

!===============================================================================================
subroutine cell_fe_function_scalar_get_gradient ( this, point, value )
  implicit none
  class(cell_fe_function_scalar_t), intent(in)    :: this 
  integer(ip)                     , intent(in)    :: point
  type(vector_field_t)            , intent(inout) :: value
  assert ( point <= this%current_number_quadrature_points )
  value = this%quadrature_points_gradients(point)
end subroutine cell_fe_function_scalar_get_gradient

!===============================================================================================
subroutine cell_fe_function_scalar_set_current_number_nodes ( this, value )
  implicit none
  class(cell_fe_function_scalar_t), intent(inout) :: this 
  integer(ip)                     , intent(in)    :: value
  this%current_number_nodes = value
end subroutine cell_fe_function_scalar_set_current_number_nodes

!===============================================================================================
subroutine cell_fe_function_scalar_set_current_number_quadrature_points ( this, value )
  implicit none
  class(cell_fe_function_scalar_t), intent(inout) :: this 
  integer(ip)                     , intent(in)    :: value
  this%current_number_quadrature_points = value
end subroutine cell_fe_function_scalar_set_current_number_quadrature_points

!===============================================================================================
subroutine cell_fe_function_scalar_free ( this )
  implicit none
  class(cell_fe_function_scalar_t), intent(inout) :: this 
  integer(ip)                                     :: istat
  this%field_id = 0
  this%current_number_nodes = 0
  this%current_number_quadrature_points = 0
  if (allocated(this%nodal_values)) then 
     deallocate ( this%nodal_values, stat = istat )
     check(istat==0)
  end if
  if (allocated(this%quadrature_points_values)) then
     call memfree ( this%quadrature_points_values, __FILE__, __LINE__)
  end if
  if (allocated(this%quadrature_points_gradients)) then
     deallocate ( this%quadrature_points_gradients, stat = istat )
     check(istat==0)
  end if
end subroutine cell_fe_function_scalar_free


!**************************************************************************************************
! Methods associated to cell_fe_function_vector_t
!**************************************************************************************************
!===============================================================================================
subroutine cell_fe_function_vector_create ( this, fe_space, field_id )
  implicit none
  class(cell_fe_function_vector_t), intent(inout) :: this 
  class(serial_fe_space_t)        , intent(in)    :: fe_space
  integer(ip)                     , intent(in)    :: field_id
  integer(ip)                                     :: istat
  class(environment_t)            , pointer       :: environment 
  integer(ip) :: max_number_nodes
  assert ( field_id >=1 .and. field_id <= fe_space%get_number_fields() )
  environment => fe_space%get_environment()
  if ( environment%am_i_l1_task() ) then 
     assert ( fe_space%get_field_type(field_id) == field_type_vector )
     call this%free()
     this%field_id = field_id
     max_number_nodes = fe_space%get_max_number_shape_functions()
     allocate ( this%nodal_values(max_number_nodes), stat = istat )
     check(istat==0)
  end if
  
end subroutine cell_fe_function_vector_create

subroutine cell_fe_function_vector_update ( this, fe_accessor, fe_function)
  implicit none
  class(cell_fe_function_vector_t), intent(inout) :: this
  type(fe_accessor_t)             , intent(in)    :: fe_accessor
  type(fe_function_t)             , intent(in)    :: fe_function
  
  integer(ip)                        :: field_id
  integer(ip)                        :: number_nodes_field, number_quadrature_points
  class(reference_fe_t)      , pointer :: reference_fe
  type(quadrature_t)         , pointer :: quadrature
  type(volume_integrator_t)  , pointer :: volume_integrator
  class(environment_t)       , pointer :: environment
  class(serial_fe_space_t)   , pointer :: serial_fe_space  
  
  serial_fe_space => fe_accessor%get_fe_space()
  environment     => serial_fe_space%get_environment()
  if ( environment%am_i_l1_task() ) then
     field_id                 =  this%get_field_id()
     reference_fe             => fe_accessor%get_reference_fe(field_id)
     quadrature               => fe_accessor%get_quadrature()
     volume_integrator        => fe_accessor%get_volume_integrator(field_id)
     number_nodes_field       =  reference_fe%get_number_shape_functions()
     number_quadrature_points =  quadrature%get_number_quadrature_points()

     call this%set_current_number_quadrature_points( number_quadrature_points )
     call this%set_current_number_nodes( number_nodes_field )

     ! Gather DoFs of current cell + field_id on nodal_values 
     call fe_function%gather_nodal_values(fe_accessor, field_id, this%nodal_values)

     ! Evaluate values, gradients at quadrature points
     call volume_integrator%evaluate_fe_function ( this%nodal_values, & 
                                                   this%quadrature_points_values )

     call volume_integrator%evaluate_gradient_fe_function ( this%nodal_values, & 
                                                            this%quadrature_points_gradients )

  end if
end subroutine cell_fe_function_vector_update

subroutine cell_fe_function_vector_move_alloc_values_in ( this, values )
  implicit none
  class(cell_fe_function_vector_t) , intent(inout) :: this 
  type(vector_field_t), allocatable, intent(inout) :: values(:)
  assert ( allocated(values) ) 
  assert ( .not. allocated(this%quadrature_points_values))
  call move_alloc( from=values, to=this%quadrature_points_values)
end subroutine cell_fe_function_vector_move_alloc_values_in

subroutine cell_fe_function_vector_move_alloc_values_out ( this, values )
  implicit none
  class(cell_fe_function_vector_t) , intent(inout) :: this 
  type(vector_field_t), allocatable, intent(inout) :: values(:)
  assert ( .not. allocated(values) ) 
  assert ( allocated(this%quadrature_points_values))
  call move_alloc( to=values, from=this%quadrature_points_values)
end subroutine cell_fe_function_vector_move_alloc_values_out

subroutine cell_fe_function_vector_move_alloc_gradients_in ( this, gradients )
  implicit none
  class(cell_fe_function_vector_t)   , intent(inout) :: this 
  type(tensor_field_t), allocatable  , intent(inout) :: gradients(:)
  assert ( allocated(gradients) ) 
  assert ( .not. allocated(this%quadrature_points_gradients))
  call move_alloc( from=gradients, to=this%quadrature_points_gradients)
end subroutine cell_fe_function_vector_move_alloc_gradients_in

subroutine cell_fe_function_vector_move_alloc_gradients_out ( this, gradients )
  implicit none
  class(cell_fe_function_vector_t)  , intent(inout) :: this 
  type(tensor_field_t), allocatable , intent(inout) :: gradients(:)
  assert ( .not. allocated(gradients) ) 
  assert ( allocated(this%quadrature_points_gradients))
  call move_alloc( to=gradients, from=this%quadrature_points_gradients)
end subroutine cell_fe_function_vector_move_alloc_gradients_out

!===============================================================================================
function cell_fe_function_vector_get_field_id ( this )
  implicit none
  class(cell_fe_function_vector_t), intent(in) :: this 
  integer(ip) :: cell_fe_function_vector_get_field_id
  cell_fe_function_vector_get_field_id = this%field_id
end function cell_fe_function_vector_get_field_id

!===============================================================================================
function cell_fe_function_vector_get_nodal_values ( this )
  implicit none
  class(cell_fe_function_vector_t), target, intent(in) :: this 
  real(rp), pointer :: cell_fe_function_vector_get_nodal_values(:)
  cell_fe_function_vector_get_nodal_values => this%nodal_values
end function cell_fe_function_vector_get_nodal_values

!===============================================================================================
function cell_fe_function_vector_get_quadrature_points_values ( this )
  implicit none
  class(cell_fe_function_vector_t), target, intent(in) :: this 
  type(vector_field_t), pointer :: cell_fe_function_vector_get_quadrature_points_values(:)
  cell_fe_function_vector_get_quadrature_points_values => this%quadrature_points_values
end function cell_fe_function_vector_get_quadrature_points_values

!===============================================================================================
function cell_fe_function_vector_get_quadrature_points_gradients ( this )
  implicit none
  class(cell_fe_function_vector_t), target, intent(in) :: this 
  type(tensor_field_t), pointer :: cell_fe_function_vector_get_quadrature_points_gradients(:)
  cell_fe_function_vector_get_quadrature_points_gradients => this%quadrature_points_gradients
end function cell_fe_function_vector_get_quadrature_points_gradients

!===============================================================================================
subroutine cell_fe_function_vector_compute_quadrature_points_curl_values ( this, quad_points_curl_values )
  implicit none
  class(cell_fe_function_vector_t),         intent(in)     :: this 
  type(vector_field_t), allocatable,        intent(inout)  :: quad_points_curl_values(:)
  integer(ip)    :: qpoin 
 
  assert(allocated(quad_points_curl_values)) 
  ! Build curl values from gradients 
    do qpoin=1, this%current_number_quadrature_points
    call quad_points_curl_values(qpoin)%set(1, this%quadrature_points_gradients(qpoin)%get(2,3) - this%quadrature_points_gradients(qpoin)%get(3,2) )
    call quad_points_curl_values(qpoin)%set(2, this%quadrature_points_gradients(qpoin)%get(3,1) - this%quadrature_points_gradients(qpoin)%get(1,3) )
    call quad_points_curl_values(qpoin)%set(3, this%quadrature_points_gradients(qpoin)%get(1,2) - this%quadrature_points_gradients(qpoin)%get(2,1) )
    end do
  
end subroutine cell_fe_function_vector_compute_quadrature_points_curl_values

!===============================================================================================
subroutine cell_fe_function_vector_get_value ( this, point, value )
  implicit none
  class(cell_fe_function_vector_t), intent(in)    :: this 
  integer(ip)                     , intent(in)    :: point
  type(vector_field_t)            , intent(inout) :: value
  assert ( point <= this%current_number_quadrature_points )
  value = this%quadrature_points_values(point)
end subroutine cell_fe_function_vector_get_value

!===============================================================================================
subroutine cell_fe_function_vector_get_gradient ( this, point, value )
  implicit none
  class(cell_fe_function_vector_t), intent(in)    :: this 
  integer(ip)                     , intent(in)    :: point
  type(tensor_field_t)            , intent(inout) :: value
  assert ( point <= this%current_number_quadrature_points )
  value = this%quadrature_points_gradients(point)
end subroutine cell_fe_function_vector_get_gradient

!===============================================================================================
subroutine cell_fe_function_vector_compute_curl ( this, point, value )
  implicit none
  class(cell_fe_function_vector_t), intent(in)    :: this 
  integer(ip)                     , intent(in)    :: point
  type(vector_field_t)            , intent(inout) :: value
 
   assert ( point <= this%current_number_quadrature_points )
  ! Build curl values from gradients 
    call value%set(1, this%quadrature_points_gradients(point)%get(2,3) - this%quadrature_points_gradients(point)%get(3,2) )
    call value%set(2, this%quadrature_points_gradients(point)%get(3,1) - this%quadrature_points_gradients(point)%get(1,3) )
    call value%set(3, this%quadrature_points_gradients(point)%get(1,2) - this%quadrature_points_gradients(point)%get(2,1) )

end subroutine cell_fe_function_vector_compute_curl 

!===============================================================================================
subroutine cell_fe_function_vector_set_current_number_nodes ( this, value )
  implicit none
  class(cell_fe_function_vector_t), intent(inout) :: this 
  integer(ip)                     , intent(in)    :: value
  this%current_number_nodes = value
end subroutine cell_fe_function_vector_set_current_number_nodes

!===============================================================================================
subroutine cell_fe_function_vector_set_current_number_quadrature_points ( this, value )
  implicit none
  class(cell_fe_function_vector_t), intent(inout) :: this 
  integer(ip)                     , intent(in)    :: value
  this%current_number_quadrature_points = value
end subroutine cell_fe_function_vector_set_current_number_quadrature_points

!===============================================================================================
subroutine cell_fe_function_vector_free ( this )
  implicit none
  class(cell_fe_function_vector_t), intent(inout) :: this 
  integer(ip)                                     :: istat

  this%field_id = 0
  this%current_number_nodes             = 0
  this%current_number_quadrature_points = 0
  if (allocated(this%nodal_values)) then 
     deallocate ( this%nodal_values, stat = istat )
     check(istat==0)
  end if

  if (allocated(this%quadrature_points_values)) then
     deallocate ( this%quadrature_points_values, stat = istat )
     check(istat==0)
  end if

  if (allocated(this%quadrature_points_gradients)) then
     deallocate ( this%quadrature_points_gradients, stat = istat )
     check(istat==0)
  end if

end subroutine cell_fe_function_vector_free

!**************************************************************************************************
! Methods associated to cell_fe_function_tensor_t
!**************************************************************************************************
!===============================================================================================
subroutine cell_fe_function_tensor_create ( this, fe_space, field_id )
  implicit none
  class(cell_fe_function_tensor_t), intent(inout) :: this 
  class(serial_fe_space_t)        , intent(in)    :: fe_space
  integer(ip)                     , intent(in)    :: field_id
  integer(ip)                                     :: istat
  class(environment_t)            , pointer       :: environment
  integer(ip) :: max_number_nodes
  assert ( field_id >=1 .and. field_id <= fe_space%get_number_fields() )
  environment => fe_space%get_environment()
  if ( environment%am_i_l1_task() ) then 
     assert ( fe_space%get_field_type(field_id) == field_type_tensor )
     call this%free()
     this%field_id = field_id
     max_number_nodes = fe_space%get_max_number_shape_functions()
     allocate ( this%nodal_values(max_number_nodes), stat = istat )
     check(istat==0)
  end if

end subroutine cell_fe_function_tensor_create

subroutine cell_fe_function_tensor_update ( this, fe_accessor, fe_function )
  implicit none
  class(cell_fe_function_tensor_t), intent(inout) :: this
  type(fe_accessor_t)             , intent(in)    :: fe_accessor
  type(fe_function_t)             , intent(in)    :: fe_function

  integer(ip)                        :: inode, field_id
  integer(ip)                        :: number_nodes_field, number_quadrature_points
  class(reference_fe_t)    , pointer :: reference_fe
  type(quadrature_t)       , pointer :: quadrature
  type(volume_integrator_t), pointer :: volume_integrator
  class(environment_t)       , pointer :: environment
  class(serial_fe_space_t)   , pointer :: serial_fe_space  
  
  serial_fe_space => fe_accessor%get_fe_space()
  environment     => serial_fe_space%get_environment()

  if ( environment%am_i_l1_task() ) then
     field_id                 =  this%get_field_id()
     reference_fe             => fe_accessor%get_reference_fe(field_id)
     quadrature               => fe_accessor%get_quadrature()
     volume_integrator        => fe_accessor%get_volume_integrator(field_id)
     number_nodes_field       =  reference_fe%get_number_shape_functions()
     number_quadrature_points =  quadrature%get_number_quadrature_points()

     call this%set_current_number_quadrature_points( number_quadrature_points )
     call this%set_current_number_nodes( number_nodes_field )

     ! Gather DoFs of current cell + field_id on nodal_values 
     call fe_function%gather_nodal_values(fe_accessor, field_id, this%nodal_values)
     
     ! Interpolate nodal values at quadrature points
     call volume_integrator%evaluate_fe_function ( this%nodal_values, & 
                                                   this%quadrature_points_values )
  end if

end subroutine cell_fe_function_tensor_update

subroutine cell_fe_function_tensor_move_alloc_values_in ( this, values )
  implicit none
  class(cell_fe_function_tensor_t) , intent(inout) :: this 
  type(tensor_field_t), allocatable, intent(inout) :: values(:)
  assert ( allocated(values) ) 
  assert ( .not. allocated(this%quadrature_points_values))
  call move_alloc( from=values, to=this%quadrature_points_values)
end subroutine cell_fe_function_tensor_move_alloc_values_in

subroutine cell_fe_function_tensor_move_alloc_values_out ( this, values )
  implicit none
  class(cell_fe_function_tensor_t) , intent(inout) :: this 
  type(tensor_field_t), allocatable, intent(inout) :: values(:)
  assert ( .not. allocated(values) ) 
  assert ( allocated(this%quadrature_points_values))
  call move_alloc( to=values, from=this%quadrature_points_values)
end subroutine cell_fe_function_tensor_move_alloc_values_out

!===============================================================================================
function cell_fe_function_tensor_get_field_id ( this )
  implicit none
  class(cell_fe_function_tensor_t), intent(in) :: this 
  integer(ip) :: cell_fe_function_tensor_get_field_id
  cell_fe_function_tensor_get_field_id = this%field_id
end function cell_fe_function_tensor_get_field_id

!===============================================================================================
function cell_fe_function_tensor_get_nodal_values ( this )
  implicit none
  class(cell_fe_function_tensor_t), target, intent(in) :: this 
  real(rp), pointer :: cell_fe_function_tensor_get_nodal_values(:)
  cell_fe_function_tensor_get_nodal_values => this%nodal_values
end function cell_fe_function_tensor_get_nodal_values

!===============================================================================================
function cell_fe_function_tensor_get_quadrature_points_values ( this )
  implicit none
  class(cell_fe_function_tensor_t), target, intent(in) :: this 
  type(tensor_field_t), pointer :: cell_fe_function_tensor_get_quadrature_points_values(:)
  cell_fe_function_tensor_get_quadrature_points_values => this%quadrature_points_values
end function cell_fe_function_tensor_get_quadrature_points_values

!===============================================================================================
subroutine cell_fe_function_tensor_get_value ( this, point, value )
  implicit none
  class(cell_fe_function_tensor_t), intent(in)    :: this 
  integer(ip)                     , intent(in)    :: point
  type(tensor_field_t)            , intent(inout) :: value
  assert ( point <= this%current_number_quadrature_points )
  value = this%quadrature_points_values(point)
end subroutine cell_fe_function_tensor_get_value

!===============================================================================================
subroutine cell_fe_function_tensor_set_current_number_nodes ( this, value )
  implicit none
  class(cell_fe_function_tensor_t), intent(inout) :: this 
  integer(ip)                     , intent(in)    :: value
  this%current_number_nodes = value
end subroutine cell_fe_function_tensor_set_current_number_nodes

!===============================================================================================
subroutine cell_fe_function_tensor_set_current_number_quadrature_points ( this, value )
  implicit none
  class(cell_fe_function_tensor_t), intent(inout) :: this 
  integer(ip)                     , intent(in)    :: value
  this%current_number_quadrature_points = value
end subroutine cell_fe_function_tensor_set_current_number_quadrature_points

!===============================================================================================
subroutine cell_fe_function_tensor_free ( this )
  implicit none
  class(cell_fe_function_tensor_t), intent(inout) :: this 
  integer(ip)                                     :: istat
  this%field_id = 0
  this%current_number_nodes             = 0
  this%current_number_quadrature_points = 0
  if (allocated(this%nodal_values)) then 
     deallocate ( this%nodal_values, stat = istat )
     check(istat==0)
  end if
  if (allocated(this%quadrature_points_values)) then
     deallocate ( this%quadrature_points_values, stat = istat )
     check(istat==0)
  end if
end subroutine cell_fe_function_tensor_free






