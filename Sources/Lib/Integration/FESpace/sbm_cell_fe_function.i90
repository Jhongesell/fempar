! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


!**************************************************************************************************
! Methods associated to cell_fe_function_scalar_t
!**************************************************************************************************

!===============================================================================================
subroutine cell_fe_function_scalar_create ( this, fe_space, field_id )
  implicit none
  class(cell_fe_function_scalar_t), intent(inout) :: this 
  class(serial_fe_space_t)        , intent(in)    :: fe_space
  integer(ip)                     , intent(in)    :: field_id
  integer(ip)                                     :: istat
  class(environment_t)            , pointer       :: environment  
  call this%free()
  assert ( field_id >=1 .and. field_id <= fe_space%get_number_fields() )

  this%field_id = field_id
  environment => fe_space%get_environment()
  if ( environment%am_i_l1_task() ) then 
     assert ( fe_space%get_field_type(field_id) == field_type_scalar )
     this%max_number_nodes = fe_space%get_max_number_shape_functions()
     this%max_number_quadrature_points = fe_space%get_max_number_quadrature_points() 
     allocate ( this%nodal_values(this%max_number_nodes), stat = istat )
     check(istat==0)
     allocate ( this%quadrature_points_values(this%max_number_quadrature_points), stat = istat )
     check(istat==0)
     allocate ( this%quadrature_points_gradients(this%max_number_quadrature_points), stat = istat )
     check(istat==0)
  end if

end subroutine cell_fe_function_scalar_create

subroutine cell_fe_function_scalar_update ( this, fe_accessor, fe_function )
  implicit none
  class(cell_fe_function_scalar_t), intent(inout) :: this
  type(fe_accessor_t)             , intent(in)    :: fe_accessor
  type(fe_function_t)             , intent(in)    :: fe_function

  
  integer(ip)                        :: inode, field_id, block_id
  integer(ip)                        :: number_nodes_field, number_quadrature_points
  integer(ip)                , pointer :: elem2dof(:)
  integer(ip)                , pointer :: field_blocks(:)
  class(reference_fe_t)      , pointer :: reference_fe
  type(quadrature_t)         , pointer :: quadrature
  type(volume_integrator_t)  , pointer :: volume_integrator
  type(serial_scalar_array_t), pointer :: strong_dirichlet_values
  class(vector_t)            , pointer :: dof_values
  real(rp)                   , pointer :: strong_dirichlet_values_entries(:)
  real(rp)                   , pointer :: nodal_values(:)
  real(rp)                   , pointer :: quadrature_points_values(:)
  type(vector_field_t)       , pointer :: quadrature_points_gradients(:)
  class(environment_t)       , pointer :: environment
  class(serial_fe_space_t)   , pointer :: serial_fe_space  
  
  serial_fe_space => fe_accessor%get_fe_space()
  environment     => serial_fe_space%get_environment()
  
  if ( environment%am_i_l1_task() ) then

     field_id                 =  this%get_field_id()
     field_blocks             => fe_accessor%get_field_blocks()
     reference_fe             => fe_accessor%get_reference_fe(field_id)
     quadrature               => fe_accessor%get_quadrature()
     volume_integrator        => fe_accessor%get_volume_integrator(field_id)
     number_nodes_field       =  reference_fe%get_number_shape_functions()
     number_quadrature_points =  quadrature%get_number_quadrature_points()

     call this%set_current_number_quadrature_points( number_quadrature_points )
     call this%set_current_number_nodes( number_nodes_field )

     block_id = field_blocks(field_id)
     nodal_values                => this%get_nodal_values()
     quadrature_points_values    => this%get_quadrature_points_values()
     quadrature_points_gradients => this%get_quadrature_points_gradients()

     call fe_accessor%get_field_elem2dof(field_id,elem2dof)

     ! Extract nodal values associated to dirichlet bcs
     strong_dirichlet_values         => fe_function%get_strong_dirichlet_values()
     strong_dirichlet_values_entries => strong_dirichlet_values%get_entries()
     do inode = 1, number_nodes_field
        if ( elem2dof(inode) < 0 ) then
           nodal_values(inode) = strong_dirichlet_values_entries(-elem2dof(inode))
        end if
     end do

     ! Extract nodal values associated to dofs
     dof_values => fe_function%get_dof_values()
     call dof_values%extract_subvector ( block_id, &
          number_nodes_field, &
          elem2dof, &
          nodal_values )

     ! Evaluate values and gradients at quadrature points
     call volume_integrator%evaluate_fe_function ( nodal_values, & 
          quadrature_points_values )

     call volume_integrator%evaluate_gradient_fe_function ( nodal_values, & 
          quadrature_points_gradients )

  end if
end subroutine cell_fe_function_scalar_update


!===============================================================================================
function cell_fe_function_scalar_get_field_id ( this )
  implicit none
  class(cell_fe_function_scalar_t), intent(in) :: this 
  integer(ip) :: cell_fe_function_scalar_get_field_id
  cell_fe_function_scalar_get_field_id = this%field_id
end function cell_fe_function_scalar_get_field_id

!===============================================================================================
function cell_fe_function_scalar_get_nodal_values ( this )
  implicit none
  class(cell_fe_function_scalar_t), target, intent(in) :: this 
  real(rp), pointer :: cell_fe_function_scalar_get_nodal_values(:)
  cell_fe_function_scalar_get_nodal_values => this%nodal_values
end function cell_fe_function_scalar_get_nodal_values

!===============================================================================================
function cell_fe_function_scalar_get_quadrature_points_values ( this )
  implicit none
  class(cell_fe_function_scalar_t), target, intent(in) :: this 
  real(rp), pointer :: cell_fe_function_scalar_get_quadrature_points_values(:)
  cell_fe_function_scalar_get_quadrature_points_values => this%quadrature_points_values
end function cell_fe_function_scalar_get_quadrature_points_values

!===============================================================================================
function cell_fe_function_scalar_get_quadrature_points_gradients ( this )
  implicit none
  class(cell_fe_function_scalar_t), target, intent(in) :: this 
  type(vector_field_t), pointer :: cell_fe_function_scalar_get_quadrature_points_gradients(:)
  cell_fe_function_scalar_get_quadrature_points_gradients => this%quadrature_points_gradients
end function cell_fe_function_scalar_get_quadrature_points_gradients

!===============================================================================================
subroutine cell_fe_function_scalar_get_value ( this, point, value )
  implicit none
  class(cell_fe_function_scalar_t), intent(in)    :: this 
  integer(ip)                     , intent(in)    :: point
  real(rp)                        , intent(inout) :: value

  assert ( point <= this%current_number_quadrature_points )
  value = this%quadrature_points_values(point)

end subroutine cell_fe_function_scalar_get_value

!===============================================================================================
subroutine cell_fe_function_scalar_get_gradient ( this, point, value )
  implicit none
  class(cell_fe_function_scalar_t), intent(in)    :: this 
  integer(ip)                     , intent(in)    :: point
  type(vector_field_t)            , intent(inout) :: value

  assert ( point <= this%current_number_quadrature_points )
  value = this%quadrature_points_gradients(point)

end subroutine cell_fe_function_scalar_get_gradient

!===============================================================================================
subroutine cell_fe_function_scalar_set_current_number_nodes ( this, value )
  implicit none
  class(cell_fe_function_scalar_t), intent(inout) :: this 
  integer(ip)                     , intent(in)    :: value

  assert ( value <= this%max_number_nodes )
  this%current_number_nodes = value

end subroutine cell_fe_function_scalar_set_current_number_nodes

!===============================================================================================
subroutine cell_fe_function_scalar_set_current_number_quadrature_points ( this, value )
  implicit none
  class(cell_fe_function_scalar_t), intent(inout) :: this 
  integer(ip)                     , intent(in)    :: value
  assert ( value <= this%max_number_quadrature_points ) 
  this%current_number_quadrature_points = value

end subroutine cell_fe_function_scalar_set_current_number_quadrature_points

!===============================================================================================
subroutine cell_fe_function_scalar_free ( this )
  implicit none
  class(cell_fe_function_scalar_t), intent(inout) :: this 
  integer(ip)                                     :: istat

  this%field_id = 0.0_ip

  this%current_number_nodes             = 0.0_ip
  this%current_number_quadrature_points = 0.0_ip

  this%max_number_nodes                 = 0.0_ip
  this%max_number_quadrature_points     = 0.0_ip

  if (allocated(this%nodal_values)) then 
     deallocate ( this%nodal_values, stat = istat )
     check(istat==0)
  end if

  if (allocated(this%quadrature_points_values)) then
     deallocate ( this%quadrature_points_values, stat = istat )
     check(istat==0)
  end if

  if (allocated(this%quadrature_points_gradients)) then
     deallocate ( this%quadrature_points_gradients, stat = istat )
     check(istat==0)
  end if
  
end subroutine cell_fe_function_scalar_free


!**************************************************************************************************
! Methods associated to cell_fe_function_vector_t
!**************************************************************************************************

!===============================================================================================
subroutine cell_fe_function_vector_create ( this, fe_space, field_id )
  implicit none
  class(cell_fe_function_vector_t), intent(inout) :: this 
  class(serial_fe_space_t)        , intent(in)    :: fe_space
  integer(ip)                     , intent(in)    :: field_id
  integer(ip)                                     :: istat
  class(environment_t)            , pointer       :: environment  

  assert ( field_id >=1 .and. field_id <= fe_space%get_number_fields() )

  environment => fe_space%get_environment()
  if ( environment%am_i_l1_task() ) then 

     assert ( fe_space%get_field_type(field_id) == field_type_vector )

     call this%free()

     this%field_id = field_id

     this%max_number_nodes = fe_space%get_max_number_shape_functions()
     this%max_number_quadrature_points = fe_space%get_max_number_quadrature_points() 

     allocate ( this%nodal_values(this%max_number_nodes), stat = istat )
     check(istat==0)

     allocate ( this%quadrature_points_values(this%max_number_quadrature_points), stat = istat )
     check(istat==0)

     allocate ( this%quadrature_points_gradients(this%max_number_quadrature_points), stat = istat )
     check(istat==0)

  end if
  
end subroutine cell_fe_function_vector_create

subroutine cell_fe_function_vector_update ( this, fe_accessor, fe_function)
  implicit none
  class(cell_fe_function_vector_t), intent(inout) :: this
  type(fe_accessor_t)             , intent(in)    :: fe_accessor
  type(fe_function_t)             , intent(in)    :: fe_function
  
  integer(ip)                        :: inode, field_id, block_id
  integer(ip)                        :: number_nodes_field, number_quadrature_points
  integer(ip)                , pointer :: elem2dof(:)
  integer(ip)                , pointer :: field_blocks(:)
  class(reference_fe_t)      , pointer :: reference_fe
  type(quadrature_t)         , pointer :: quadrature
  type(volume_integrator_t)  , pointer :: volume_integrator
  type(serial_scalar_array_t), pointer :: strong_dirichlet_values
  class(vector_t)            , pointer :: dof_values
  real(rp)                   , pointer :: strong_dirichlet_values_entries(:)
  real(rp)                   , pointer :: nodal_values(:)
  type(vector_field_t)       , pointer :: quadrature_points_values(:)
  type(tensor_field_t)       , pointer :: quadrature_points_gradients(:)
  class(environment_t)       , pointer :: environment
  class(serial_fe_space_t)   , pointer :: serial_fe_space  
  
  serial_fe_space => fe_accessor%get_fe_space()
  environment     => serial_fe_space%get_environment()
  if ( environment%am_i_l1_task() ) then
     field_id                 =  this%get_field_id()
     field_blocks             => fe_accessor%get_field_blocks()
     reference_fe             => fe_accessor%get_reference_fe(field_id)
     quadrature               => fe_accessor%get_quadrature()
     volume_integrator        => fe_accessor%get_volume_integrator(field_id)
     number_nodes_field       =  reference_fe%get_number_shape_functions()
     number_quadrature_points =  quadrature%get_number_quadrature_points()

     call this%set_current_number_quadrature_points( number_quadrature_points )
     call this%set_current_number_nodes( number_nodes_field )

     block_id = field_blocks(field_id)
     nodal_values                => this%get_nodal_values()
     quadrature_points_values    => this%get_quadrature_points_values()
     quadrature_points_gradients => this%get_quadrature_points_gradients()

     call fe_accessor%get_field_elem2dof(field_id,elem2dof)

     ! Extract nodal values associated to dirichlet bcs
     strong_dirichlet_values         => fe_function%get_strong_dirichlet_values()
     strong_dirichlet_values_entries => strong_dirichlet_values%get_entries()
     do inode = 1, number_nodes_field
        if ( elem2dof(inode) < 0 ) then
           nodal_values(inode) = strong_dirichlet_values_entries(-elem2dof(inode))
        end if
     end do

     ! Extract nodal values associated to dofs
     dof_values => fe_function%get_dof_values()
     call dof_values%extract_subvector ( block_id, &
          number_nodes_field, &
          elem2dof, &
          nodal_values )

     ! Evaluate values and gradients at quadrature points
     call volume_integrator%evaluate_fe_function ( nodal_values, & 
          quadrature_points_values )

     call volume_integrator%evaluate_gradient_fe_function ( nodal_values, & 
          quadrature_points_gradients )
  end if
end subroutine cell_fe_function_vector_update



!===============================================================================================
function cell_fe_function_vector_get_field_id ( this )
  implicit none
  class(cell_fe_function_vector_t), intent(in) :: this 
  integer(ip) :: cell_fe_function_vector_get_field_id
  cell_fe_function_vector_get_field_id = this%field_id
end function cell_fe_function_vector_get_field_id

!===============================================================================================
function cell_fe_function_vector_get_nodal_values ( this )
  implicit none
  class(cell_fe_function_vector_t), target, intent(in) :: this 
  real(rp), pointer :: cell_fe_function_vector_get_nodal_values(:)
  cell_fe_function_vector_get_nodal_values => this%nodal_values
end function cell_fe_function_vector_get_nodal_values

!===============================================================================================
function cell_fe_function_vector_get_quadrature_points_values ( this )
  implicit none
  class(cell_fe_function_vector_t), target, intent(in) :: this 
  type(vector_field_t), pointer :: cell_fe_function_vector_get_quadrature_points_values(:)
  cell_fe_function_vector_get_quadrature_points_values => this%quadrature_points_values
end function cell_fe_function_vector_get_quadrature_points_values

!===============================================================================================
function cell_fe_function_vector_get_quadrature_points_gradients ( this )
  implicit none
  class(cell_fe_function_vector_t), target, intent(in) :: this 
  type(tensor_field_t), pointer :: cell_fe_function_vector_get_quadrature_points_gradients(:)
  cell_fe_function_vector_get_quadrature_points_gradients => this%quadrature_points_gradients
end function cell_fe_function_vector_get_quadrature_points_gradients

!===============================================================================================
subroutine cell_fe_function_vector_get_value ( this, point, value )
  implicit none
  class(cell_fe_function_vector_t), intent(in)    :: this 
  integer(ip)                     , intent(in)    :: point
  type(vector_field_t)            , intent(inout) :: value

  assert ( point <= this%current_number_quadrature_points )
  value = this%quadrature_points_values(point)

end subroutine cell_fe_function_vector_get_value

!===============================================================================================
subroutine cell_fe_function_vector_get_gradient ( this, point, value )
  implicit none
  class(cell_fe_function_vector_t), intent(in)    :: this 
  integer(ip)                     , intent(in)    :: point
  type(tensor_field_t)            , intent(inout) :: value
  
  assert ( point <= this%current_number_quadrature_points )
  value = this%quadrature_points_gradients(point)

end subroutine cell_fe_function_vector_get_gradient

!===============================================================================================
subroutine cell_fe_function_vector_set_current_number_nodes ( this, value )
  implicit none
  class(cell_fe_function_vector_t), intent(inout) :: this 
  integer(ip)                     , intent(in)    :: value

  assert ( value <= this%max_number_nodes )
  this%current_number_nodes = value

end subroutine cell_fe_function_vector_set_current_number_nodes

!===============================================================================================
subroutine cell_fe_function_vector_set_current_number_quadrature_points ( this, value )
  implicit none
  class(cell_fe_function_vector_t), intent(inout) :: this 
  integer(ip)                     , intent(in)    :: value

  assert ( value <= this%max_number_quadrature_points ) 
  this%current_number_quadrature_points = value

end subroutine cell_fe_function_vector_set_current_number_quadrature_points

!===============================================================================================
subroutine cell_fe_function_vector_free ( this )
  implicit none
  class(cell_fe_function_vector_t), intent(inout) :: this 
  integer(ip)                                     :: istat

  this%field_id = 0.0_ip

  this%current_number_nodes             = 0.0_ip
  this%current_number_quadrature_points = 0.0_ip

  this%max_number_nodes                 = 0.0_ip
  this%max_number_quadrature_points     = 0.0_ip

  if (allocated(this%nodal_values)) then 
     deallocate ( this%nodal_values, stat = istat )
     check(istat==0)
  end if

  if (allocated(this%quadrature_points_values)) then
     deallocate ( this%quadrature_points_values, stat = istat )
     check(istat==0)
  end if

  if (allocated(this%quadrature_points_gradients)) then
     deallocate ( this%quadrature_points_gradients, stat = istat )
     check(istat==0)
  end if

end subroutine cell_fe_function_vector_free


!**************************************************************************************************
! Methods associated to cell_fe_function_tensor_t
!**************************************************************************************************

!===============================================================================================
subroutine cell_fe_function_tensor_create ( this, fe_space, field_id )
  implicit none
  class(cell_fe_function_tensor_t), intent(inout) :: this 
  class(serial_fe_space_t)        , intent(in)    :: fe_space
  integer(ip)                     , intent(in)    :: field_id
  integer(ip)                                     :: istat
  class(environment_t)            , pointer       :: environment  

  assert ( field_id >=1 .and. field_id <= fe_space%get_number_fields() )
  
  environment => fe_space%get_environment()
  if ( environment%am_i_l1_task() ) then 
     assert ( fe_space%get_field_type(field_id) == field_type_tensor )

     call this%free()

     this%field_id = field_id

     this%max_number_nodes = fe_space%get_max_number_shape_functions()
     this%max_number_quadrature_points = fe_space%get_max_number_quadrature_points() 

     allocate ( this%nodal_values(this%max_number_nodes), stat = istat )
     check(istat==0)

     allocate ( this%quadrature_points_values(this%max_number_quadrature_points), stat = istat )
     check(istat==0)

  end if

end subroutine cell_fe_function_tensor_create

subroutine cell_fe_function_tensor_update ( this, fe_accessor, fe_function )
  implicit none
  class(cell_fe_function_tensor_t), intent(inout) :: this
  type(fe_accessor_t)             , intent(in)    :: fe_accessor
  type(fe_function_t)             , intent(in)    :: fe_function

  integer(ip)                        :: inode, field_id, block_id
  integer(ip)                        :: number_nodes_field, number_quadrature_points
  integer(ip)              , pointer :: elem2dof(:)
  integer(ip)              , pointer :: field_blocks(:)
  class(reference_fe_t)    , pointer :: reference_fe
  type(quadrature_t)       , pointer :: quadrature
  type(volume_integrator_t), pointer :: volume_integrator
  type(serial_scalar_array_t), pointer :: strong_dirichlet_values
  class(vector_t)            , pointer :: dof_values
  real(rp)                 , pointer :: strong_dirichlet_values_entries(:)
  real(rp)                 , pointer :: nodal_values(:)
  type(tensor_field_t)     , pointer :: quadrature_points_values(:)
  class(environment_t)       , pointer :: environment
  class(serial_fe_space_t)   , pointer :: serial_fe_space  
  
  serial_fe_space => fe_accessor%get_fe_space()
  environment     => serial_fe_space%get_environment()

  if ( environment%am_i_l1_task() ) then


     field_id                 =  this%get_field_id()
     field_blocks             => fe_accessor%get_field_blocks()
     reference_fe             => fe_accessor%get_reference_fe(field_id)
     quadrature               => fe_accessor%get_quadrature()
     volume_integrator        => fe_accessor%get_volume_integrator(field_id)
     number_nodes_field       =  reference_fe%get_number_shape_functions()
     number_quadrature_points =  quadrature%get_number_quadrature_points()

     call this%set_current_number_quadrature_points( number_quadrature_points )
     call this%set_current_number_nodes( number_nodes_field )

     block_id = field_blocks(field_id)
     nodal_values             => this%get_nodal_values()
     quadrature_points_values => this%get_quadrature_points_values()

     call fe_accessor%get_field_elem2dof(field_id,elem2dof)

     ! Extract nodal values associated to dirichlet bcs
     strong_dirichlet_values         => fe_function%get_strong_dirichlet_values()
     strong_dirichlet_values_entries => strong_dirichlet_values%get_entries()
     do inode = 1, number_nodes_field
        if ( elem2dof(inode) < 0 ) then
           nodal_values(inode) = strong_dirichlet_values_entries(-elem2dof(inode))
        end if
     end do

     ! Extract nodal values associated to dofs
     dof_values => fe_function%get_dof_values()
     call dof_values%extract_subvector ( block_id, &
          number_nodes_field, &
          elem2dof, &
          nodal_values )

     ! Interpolate nodal values at quadrature points
     call volume_integrator%evaluate_fe_function ( nodal_values, & 
          quadrature_points_values )

  end if

end subroutine cell_fe_function_tensor_update


!===============================================================================================
function cell_fe_function_tensor_get_field_id ( this )
  implicit none
  class(cell_fe_function_tensor_t), intent(in) :: this 
  integer(ip) :: cell_fe_function_tensor_get_field_id
  cell_fe_function_tensor_get_field_id = this%field_id
end function cell_fe_function_tensor_get_field_id

!===============================================================================================
function cell_fe_function_tensor_get_nodal_values ( this )
  implicit none
  class(cell_fe_function_tensor_t), target, intent(in) :: this 
  real(rp), pointer :: cell_fe_function_tensor_get_nodal_values(:)
  cell_fe_function_tensor_get_nodal_values => this%nodal_values
end function cell_fe_function_tensor_get_nodal_values

!===============================================================================================
function cell_fe_function_tensor_get_quadrature_points_values ( this )
  implicit none
  class(cell_fe_function_tensor_t), target, intent(in) :: this 
  type(tensor_field_t), pointer :: cell_fe_function_tensor_get_quadrature_points_values(:)
  cell_fe_function_tensor_get_quadrature_points_values => this%quadrature_points_values
end function cell_fe_function_tensor_get_quadrature_points_values

!===============================================================================================
subroutine cell_fe_function_tensor_get_value ( this, point, value )
  implicit none
  class(cell_fe_function_tensor_t), intent(in)    :: this 
  integer(ip)                     , intent(in)    :: point
  type(tensor_field_t)            , intent(inout) :: value

  assert ( point <= this%current_number_quadrature_points )
  value = this%quadrature_points_values(point)

end subroutine cell_fe_function_tensor_get_value

!===============================================================================================
subroutine cell_fe_function_tensor_set_current_number_nodes ( this, value )
  implicit none
  class(cell_fe_function_tensor_t), intent(inout) :: this 
  integer(ip)                     , intent(in)    :: value

  assert ( value <= this%max_number_nodes )
  this%current_number_nodes = value

end subroutine cell_fe_function_tensor_set_current_number_nodes

!===============================================================================================
subroutine cell_fe_function_tensor_set_current_number_quadrature_points ( this, value )
  implicit none
  class(cell_fe_function_tensor_t), intent(inout) :: this 
  integer(ip)                     , intent(in)    :: value

  assert ( value <= this%max_number_quadrature_points ) 
  this%current_number_quadrature_points = value

end subroutine cell_fe_function_tensor_set_current_number_quadrature_points

!===============================================================================================
subroutine cell_fe_function_tensor_free ( this )
  implicit none
  class(cell_fe_function_tensor_t), intent(inout) :: this 
  integer(ip)                                     :: istat

  this%field_id = 0.0_ip

  this%current_number_nodes             = 0.0_ip
  this%current_number_quadrature_points = 0.0_ip

  this%max_number_nodes                 = 0.0_ip
  this%max_number_quadrature_points     = 0.0_ip


  if (allocated(this%nodal_values)) then 
     deallocate ( this%nodal_values, stat = istat )
     check(istat==0)
  end if

  if (allocated(this%quadrature_points_values)) then
     deallocate ( this%quadrature_points_values, stat = istat )
     check(istat==0)
  end if

end subroutine cell_fe_function_tensor_free






