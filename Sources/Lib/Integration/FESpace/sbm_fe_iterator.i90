! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

subroutine fe_iterator_create ( this, fe_space )
  implicit none
  class(fe_iterator_t)            , intent(inout) :: this
  class(serial_fe_space_t), target, intent(in)    :: fe_space
  call this%free()
  this%fe_space => fe_space
  call this%fe_space%triangulation%create_cell_iterator(this%cell)
end subroutine fe_iterator_create

subroutine fe_iterator_free (this)
  implicit none
  class(fe_iterator_t), intent(inout) :: this
  if ( associated(this%fe_space) ) then
    if ( associated(this%fe_space%triangulation) ) then
      call this%fe_space%triangulation%free_cell_iterator(this%cell)
    end if
  end if
  nullify(this%fe_space)
end subroutine fe_iterator_free

subroutine fe_iterator_free_final(this)
  implicit none
  type(fe_iterator_t), intent(inout) :: this
  assert ( .not. allocated(this%cell) )
  assert ( .not. associated(this%fe_space))
end subroutine fe_iterator_free_final

subroutine fe_iterator_fill_own_dofs ( this, field_id, current_dof )
  implicit none
  ! Parameters
  class(fe_iterator_t), intent(inout)   :: this
  integer(ip)         , intent(in)      :: field_id
  integer(ip)         , intent(inout)   :: current_dof

  ! Local variables
  integer(ip) :: ivef
  integer(ip) :: base_pos_lst_dofs_lids
  class(reference_fe_t), pointer :: reference_fe
  type(list_iterator_t) :: own_dofs_on_vef_iterator
  
  assert ( field_id <= this%get_number_fields() )
  ivef = this%get_num_vefs()+1
  
  reference_fe => this%get_reference_fe(field_id)
  
  ! Determine position in lst_dofs_lids of the first dof associated to the
  ! field "field_id" within the current fe
  base_pos_lst_dofs_lids = this%fe_space%ptr_dofs_per_fe(field_id, this%get_lid())-1
  
  ! Iterate over all DoFs associated to field "field_id" on top of the vef
  ! with local identifier ivef within current fe
  own_dofs_on_vef_iterator = reference_fe%create_own_dofs_on_n_face_iterator(ivef)
  do while (.not. own_dofs_on_vef_iterator%is_upper_bound())
    current_dof = current_dof + 1
    this%fe_space%lst_dofs_lids(base_pos_lst_dofs_lids+own_dofs_on_vef_iterator%get_current()) = current_dof
    call own_dofs_on_vef_iterator%next()
  end do
end subroutine fe_iterator_fill_own_dofs

subroutine fe_iterator_fill_own_dofs_on_vef ( this, ivef, field_id, current_dof )
  implicit none
  class(fe_iterator_t) , intent(inout) :: this
  integer(ip)          , intent(in)    :: ivef
  integer(ip)          , intent(in)    :: field_id
  integer(ip)          , intent(inout) :: current_dof
  
  integer(ip) :: base_pos_lst_dofs_lids
  class(reference_fe_t), pointer :: reference_fe
  type(list_iterator_t) :: own_dofs_on_vef_iterator
  
  assert ( ivef <= this%get_num_vefs() )
  assert ( field_id <= this%get_number_fields() )
  
  ! Determine position in lst_dofs_lids of the first dof associated to the
  ! field "field_id" within the current fe
  base_pos_lst_dofs_lids = this%fe_space%ptr_dofs_per_fe(field_id, this%get_lid())-1
  
  reference_fe => this%get_reference_fe(field_id)
  
  ! Iterate over all DoFs associated to field "field_id" on top of the vef
  ! with local identifier ivef within current fe
  own_dofs_on_vef_iterator = reference_fe%create_own_dofs_on_n_face_iterator(ivef)
  do while (.not. own_dofs_on_vef_iterator%is_upper_bound())
    assert ( this%fe_space%lst_dofs_lids(base_pos_lst_dofs_lids+own_dofs_on_vef_iterator%get_current())  <= 0 )
    if ( this%fe_space%lst_dofs_lids(base_pos_lst_dofs_lids+own_dofs_on_vef_iterator%get_current()) == 0 ) then
      current_dof = current_dof + 1
      this%fe_space%lst_dofs_lids(base_pos_lst_dofs_lids+own_dofs_on_vef_iterator%get_current()) = current_dof
    end if  
    call own_dofs_on_vef_iterator%next()
  end do
end subroutine fe_iterator_fill_own_dofs_on_vef

subroutine fe_iterator_fill_own_strong_dirichlet_dofs_on_vef ( this, ivef, field_id, current_dof )
  implicit none
  class(fe_iterator_t) , intent(inout) :: this
  integer(ip)          , intent(in)    :: ivef
  integer(ip)          , intent(in)    :: field_id
  integer(ip)          , intent(inout) :: current_dof
  integer(ip) :: current_dof_
  integer(ip), pointer :: elem2dof(:)
  
  current_dof_ = current_dof
  call this%get_field_elem2dof(field_id, elem2dof)
  
  elem2dof = -elem2dof
  call this%fill_own_dofs_on_vef (ivef, field_id, current_dof)
  elem2dof = -elem2dof
  
  if (current_dof_ /= current_dof) then
    call this%set_at_strong_dirichlet_boundary(field_id)
  end if
end subroutine fe_iterator_fill_own_strong_dirichlet_dofs_on_vef


subroutine fe_iterator_fill_own_dofs_on_vef_from_source_fe ( this, target_ivef, source_fe, source_ivef, field_id )
  implicit none
  class(fe_iterator_t) , intent(inout) :: this
  integer(ip)          , intent(in)    :: target_ivef
  class(fe_iterator_t) , intent(in)    :: source_fe
  integer(ip)          , intent(in)    :: source_ivef
  integer(ip)          , intent(in)    :: field_id

  class(reference_fe_t), pointer :: reference_fe_source 
  integer(ip)                    :: base_pos_lst_dofs_lids_source
  type(list_iterator_t)          :: own_dofs_on_vef_iterator_target
  
  class(reference_fe_t), pointer :: reference_fe_target 
  integer(ip)                    :: base_pos_lst_dofs_lids_target
  
  integer(ip)                    :: idof_source, idof_target
  integer(ip)                    :: own_dof_within_vef_target_fe
  integer(ip)                    :: relative_orientation, relative_rotation
  logical                        :: strong_dirichlet_dof_found

  assert ( target_ivef <= this%get_num_vefs() )
  assert ( source_ivef <= source_fe%get_num_vefs() )
  assert ( field_id <= this%get_number_fields() )
  
  reference_fe_target => this%get_reference_fe(field_id)
  base_pos_lst_dofs_lids_target = this%fe_space%ptr_dofs_per_fe(field_id, this%get_lid())-1
  
  reference_fe_source => source_fe%get_reference_fe(field_id)
  base_pos_lst_dofs_lids_source = this%fe_space%ptr_dofs_per_fe(field_id, source_fe%get_lid())-1
  ! Iterate over all DoFs associated to field "field_id" on top of the vef
  ! with local identifier ivef within target fe
  own_dofs_on_vef_iterator_target = reference_fe_target%create_own_dofs_on_n_face_iterator(target_ivef)
  strong_dirichlet_dof_found = .false.
  if ( own_dofs_on_vef_iterator_target%get_size() > 0 ) then
       assert (reference_fe_source%check_compatibility_of_n_faces(reference_fe_target,target_ivef,source_ivef))
       relative_rotation = reference_fe_source%compute_relative_rotation( reference_fe_target, &
                                                                          target_ivef, &
                                                                          source_ivef, &
                                                                          this%get_vef_lids(), &
                                                                          source_fe%get_vef_lids())
       relative_orientation = reference_fe_source%compute_relative_orientation( reference_fe_target, &
                                                                                target_ivef, &
                                                                                source_ivef)
       
      own_dof_within_vef_target_fe = 1
      do while (.not. own_dofs_on_vef_iterator_target%is_upper_bound())
        idof_target = own_dofs_on_vef_iterator_target%get_current()
        idof_source = reference_fe_source%get_permuted_own_node_n_face(own_dof_within_vef_target_fe, &
                                                                    source_ivef, & 
                                                                    relative_orientation, &
                                                                    relative_rotation)
        
        assert (this%fe_space%lst_dofs_lids(base_pos_lst_dofs_lids_target + idof_target) <= 0)
        if (this%fe_space%lst_dofs_lids(base_pos_lst_dofs_lids_target + idof_target)  == 0) then
          this%fe_space%lst_dofs_lids(base_pos_lst_dofs_lids_target+idof_target) = &
            this%fe_space%lst_dofs_lids(base_pos_lst_dofs_lids_source+idof_source)
        else
          strong_dirichlet_dof_found = .true.
        end if
        
        call own_dofs_on_vef_iterator_target%next()
        own_dof_within_vef_target_fe = own_dof_within_vef_target_fe + 1
     end do
  end if
  if (strong_dirichlet_dof_found) call this%set_at_strong_dirichlet_boundary(field_id)
end subroutine fe_iterator_fill_own_dofs_on_vef_from_source_fe

subroutine fe_iterator_fill_dofs_face_integration_coupling ( this, ivef, field_id, dof_count )
  implicit none
  ! Parameters
  class(fe_iterator_t), intent(inout)   :: this
  integer(ip)         , intent(in)      :: ivef
  integer(ip)         , intent(in)      :: field_id
  integer(ip)         , intent(inout)   :: dof_count

  ! Local variables
  integer(ip)                    :: idof, base_pos_lst_dofs_lids
  class(reference_fe_t), pointer :: reference_fe
  type(list_iterator_t)          :: face_integration_coupling_dofs 
  
  reference_fe => this%get_reference_fe(field_id)
  assert ( reference_fe%get_n_face_dimension(ivef) == reference_fe%get_number_dimensions()-1 )
  
  face_integration_coupling_dofs = reference_fe%create_facet_integration_coupling_dofs_iterator(ivef)
  base_pos_lst_dofs_lids = this%fe_space%ptr_dofs_per_fe(field_id, this%get_lid())-1
  do while (.not. face_integration_coupling_dofs%is_upper_bound())
    idof = face_integration_coupling_dofs%get_current()
    dof_count = dof_count +1 
    this%fe_space%lst_dofs_lids(base_pos_lst_dofs_lids+idof) = dof_count
    call face_integration_coupling_dofs%next()
  end do
end subroutine fe_iterator_fill_dofs_face_integration_coupling



! Renumbers the DoF identifiers corresponding to all fields mapped to block with identifier block_id
subroutine fe_iterator_renumber_dofs_block ( this, block_id, perm_old2new )
  implicit none
  ! Parameters
  class(fe_iterator_t)      , intent(inout) :: this
  integer(ip)               , intent(in)    :: block_id
  ! No way to know the size of perm_old2new() within the local scope
  ! of class(fe_iterator_t). This is why I used an assumed-size dummy
  ! argument in this context. This will be solved in the future whenever
  ! class(fe_iterator_t) also has access to the whole mesh-like container.
  integer(ip)               , intent(in)    :: perm_old2new(*)
  integer(ip)                            :: field_id
  assert ( block_id >= 1 .and. block_id <= this%fe_space%get_number_blocks() )
  do field_id=1, this%fe_space%get_number_fields()
    if ( this%fe_space%field_blocks(field_id) == block_id ) then
      call this%renumber_dofs_field( field_id, perm_old2new )
    end if
  end do 
end subroutine fe_iterator_renumber_dofs_block

! Renumbers the DoF identifiers corresponding to field with identifier field_id
subroutine fe_iterator_renumber_dofs_field ( this, field_id, perm_old2new )
  implicit none
  ! Parameters
  class(fe_iterator_t), intent(inout) :: this
  integer(ip)         , intent(in) :: field_id
  ! No way to know the size of perm_old2new() within the local scope
  ! of class(fe_iterator_t). This is why I used an assumed-size dummy
  ! argument in this context. This will be solved in the future whenever
  ! class(fe_iterator_t) also has access to the whole mesh-like container.
  integer(ip)         , intent(in) :: perm_old2new(*)
  integer(ip) :: i, start_pos_lst_dofs_lids, end_pos_lst_dofs_lids
  
  start_pos_lst_dofs_lids = this%fe_space%ptr_dofs_per_fe(field_id,this%get_lid())
  
  if ( field_id == this%fe_space%get_number_fields() ) then
    end_pos_lst_dofs_lids = this%fe_space%ptr_dofs_per_fe(1, this%get_lid()+1)-1
  else  
    end_pos_lst_dofs_lids   = this%fe_space%ptr_dofs_per_fe(field_id+1, this%get_lid())
  end if  
  
  assert ( field_id >= 1 .and. field_id <= this%fe_space%get_number_fields() )
  do i = start_pos_lst_dofs_lids, end_pos_lst_dofs_lids
    if ( this%fe_space%lst_dofs_lids(i) > 0 ) then
      this%fe_space%lst_dofs_lids(i) = perm_old2new(this%fe_space%lst_dofs_lids(i))
    end if
  end do
end subroutine fe_iterator_renumber_dofs_field

subroutine fe_iterator_update_integration( this )
  implicit none
  class(fe_iterator_t), intent(inout) :: this 
  integer(ip) :: field_id
  type(point_t)            , pointer :: coordinates(:)
  type(fe_map_t)           , pointer :: fe_map
  type(quadrature_t)       , pointer :: quadrature
  type(volume_integrator_t), pointer :: volume_integrator

  fe_map      => this%get_fe_map()
  coordinates => fe_map%get_coordinates()
  call this%get_coordinates(coordinates)

  quadrature => this%get_quadrature()
  call fe_map%update(quadrature)
  do field_id = 1, this%get_number_fields()
     volume_integrator => this%get_volume_integrator(field_id) 
     call volume_integrator%update(fe_map)
  end do
  
end subroutine fe_iterator_update_integration

function fe_iterator_get_fe_space(this)
  implicit none
  class(fe_iterator_t), target, intent(in) :: this
  class(serial_fe_space_t), pointer :: fe_iterator_get_fe_space
  fe_iterator_get_fe_space => this%fe_space
end function fe_iterator_get_fe_space

function fe_iterator_get_number_fields(this)
  implicit none
  class(fe_iterator_t), intent(in) :: this
  integer(ip) :: fe_iterator_get_number_fields
  fe_iterator_get_number_fields = this%fe_space%number_fields
end function fe_iterator_get_number_fields

function fe_iterator_get_fe_space_type(this, field_id)
  implicit none
  class(fe_iterator_t), intent(in) :: this
  integer(ip)         , intent(in) :: field_id
  integer(ip)                      :: fe_iterator_get_fe_space_type
  class(reference_fe_t), pointer   :: reference_fe
  reference_fe => this%get_reference_fe(field_id)
  if ( reference_fe%get_continuity() ) then
    fe_iterator_get_fe_space_type = fe_space_type_cg
  else if ( reference_fe%get_conformity() ) then
    fe_iterator_get_fe_space_type = fe_space_type_dg_conforming
  else
    fe_iterator_get_fe_space_type = fe_space_type_dg
  end if
end function fe_iterator_get_fe_space_type

function fe_iterator_get_field_type(this, field_id)
  implicit none
  class(fe_iterator_t), intent(in) :: this
  integer(ip)         , intent(in) :: field_id
  character(:), pointer :: fe_iterator_get_field_type
  class(reference_fe_t), pointer :: reference_fe
  reference_fe => this%get_reference_fe(field_id)
  fe_iterator_get_field_type => reference_fe%get_field_type()
end function fe_iterator_get_field_type

function fe_iterator_get_field_blocks(this)
  implicit none
  class(fe_iterator_t), intent(in) :: this
  integer(ip), pointer             :: fe_iterator_get_field_blocks(:)
  fe_iterator_get_field_blocks => this%fe_space%field_blocks
end function fe_iterator_get_field_blocks


function fe_iterator_get_number_dofs(this)
  implicit none
  class(fe_iterator_t), intent(in) :: this
  integer(ip) :: fe_iterator_get_number_dofs
  fe_iterator_get_number_dofs = this%fe_space%ptr_dofs_per_fe(1, this%get_lid()+1)- &
                                this%fe_space%ptr_dofs_per_fe(1, this%get_lid())
end function fe_iterator_get_number_dofs

subroutine fe_iterator_get_number_dofs_per_field (this, number_dofs_per_field )
  implicit none
  class(fe_iterator_t), intent(in)    :: this
  integer(ip)         , intent(inout) :: number_dofs_per_field(this%fe_space%number_fields)
  
  integer(ip) :: field_id
  do field_id = 1, this%get_number_fields()-1
    number_dofs_per_field(field_id) = this%fe_space%ptr_dofs_per_fe(field_id+1, this%get_lid())- &
                                      this%fe_space%ptr_dofs_per_fe(field_id  , this%get_lid())
  end do
  number_dofs_per_field(field_id) = this%fe_space%ptr_dofs_per_fe(1, this%get_lid()+1)- &
                                    this%fe_space%ptr_dofs_per_fe(field_id, this%get_lid())
end subroutine fe_iterator_get_number_dofs_per_field

subroutine fe_iterator_get_field_elem2dof( this, field_id, elem2dof )
  implicit none
  class(fe_iterator_t), intent(in)    :: this
  integer(ip)         , intent(in)    :: field_id
  integer(ip), pointer, intent(inout) :: elem2dof(:)
  integer(ip) :: spos, epos
 
  spos = this%fe_space%ptr_dofs_per_fe(field_id  ,this%get_lid())
  if ( field_id == this%fe_space%get_number_fields() ) then
     epos = this%fe_space%ptr_dofs_per_fe(1,this%get_lid()+1)-1
  else
     epos = this%fe_space%ptr_dofs_per_fe(field_id+1,this%get_lid())-1
  end if
  elem2dof => this%fe_space%lst_dofs_lids(spos:epos)
end subroutine fe_iterator_get_field_elem2dof

subroutine fe_iterator_get_elem2dof( this, elem2dof )
  implicit none
  class(fe_iterator_t), intent(in)    :: this
  type(i1p_t)         , intent(inout) :: elem2dof(:)
  integer(ip) :: field_id, j, spos, epos
  
  assert ( size(elem2dof) == this%fe_space%number_fields )
  do field_id = 1, this%get_number_fields()-1
    spos = this%fe_space%ptr_dofs_per_fe(field_id  ,this%get_lid())
    epos = this%fe_space%ptr_dofs_per_fe(field_id+1,this%get_lid())-1
    elem2dof(field_id)%p => this%fe_space%lst_dofs_lids(spos:epos)
  end do
  spos = this%fe_space%ptr_dofs_per_fe(field_id  , this%get_lid())
  epos = this%fe_space%ptr_dofs_per_fe(1         , this%get_lid()+1)-1
  elem2dof(field_id)%p => this%fe_space%lst_dofs_lids(spos:epos)
end subroutine fe_iterator_get_elem2dof

function fe_iterator_get_order( this, field_id )
  implicit none
  class(fe_iterator_t), intent(in) :: this
  integer(ip)         , intent(in) :: field_id
  integer(ip) :: fe_iterator_get_order
  class(reference_fe_t), pointer :: reference_fe
  reference_fe => this%get_reference_fe(field_id)
  fe_iterator_get_order = reference_fe%get_order()
end function fe_iterator_get_order

function fe_iterator_get_max_order_single_field( this, field_id )
  implicit none
  class(fe_iterator_t), intent(in) :: this
  integer(ip)         , intent(in) :: field_id
  integer(ip) :: fe_iterator_get_max_order_single_field
  class(reference_fe_t), pointer :: reference_fe
  reference_fe => this%get_reference_fe(field_id)
  fe_iterator_get_max_order_single_field = reference_fe%get_max_order()
end function fe_iterator_get_max_order_single_field

function fe_iterator_get_max_order_all_fields( this )
  implicit none
  class(fe_iterator_t), intent(in) :: this
  integer(ip) :: fe_iterator_get_max_order_all_fields
  integer(ip) :: field_id
  fe_iterator_get_max_order_all_fields = -1
  do field_id=1, this%get_number_fields()
   if ( fe_iterator_get_max_order_all_fields < this%get_max_order_single_field(field_id) ) then
        fe_iterator_get_max_order_all_fields = this%get_max_order_single_field(field_id)
   end if
  end do
end function fe_iterator_get_max_order_all_fields

function fe_iterator_at_strong_dirichlet_boundary ( this, field_id )
  implicit none
  class(fe_iterator_t)   , intent(in) :: this
  integer(ip)            , intent(in) :: field_id
  logical                             :: fe_iterator_at_strong_dirichlet_boundary
  fe_iterator_at_strong_dirichlet_boundary = this%fe_space%at_strong_dirichlet_boundary_per_fe(field_id,this%get_lid())
end function fe_iterator_at_strong_dirichlet_boundary

subroutine fe_iterator_set_at_strong_dirichlet_boundary ( this, field_id )
  implicit none
  class(fe_iterator_t)   , intent(inout) :: this
  integer(ip)            , intent(in)    :: field_id
  this%fe_space%at_strong_dirichlet_boundary_per_fe(field_id,this%get_lid()) = .true.
end subroutine fe_iterator_set_at_strong_dirichlet_boundary

subroutine fe_iterator_unset_at_strong_dirichlet_boundary ( this, field_id )
  implicit none
  class(fe_iterator_t)   , intent(inout) :: this
  integer(ip)            , intent(in)    :: field_id
  this%fe_space%at_strong_dirichlet_boundary_per_fe(field_id,this%get_lid()) = .false.
end subroutine fe_iterator_unset_at_strong_dirichlet_boundary


function fe_iterator_compute_volume ( this )
  implicit none
  class(fe_iterator_t), intent(in) :: this
  real(rp) :: fe_iterator_compute_volume
  integer(ip)                 :: q_poin, number_quadrature_points
  
  type(quadrature_t), pointer :: quadrature
  type(fe_map_t)    , pointer :: fe_map
  
  quadrature => this%get_quadrature()
  fe_map     => this%get_fe_map()
  
  number_quadrature_points = quadrature%get_number_quadrature_points()
  fe_iterator_compute_volume = 0.0_rp
  do q_poin = 1, number_quadrature_points
     fe_iterator_compute_volume = fe_iterator_compute_volume + &
          &                          fe_map%get_det_jacobian(q_poin) * &
          &                          quadrature%get_weight(q_poin)
  end do
end function fe_iterator_compute_volume


function fe_iterator_get_quadrature ( this )
  implicit none
  class(fe_iterator_t), intent(in) :: this
  type(quadrature_t), pointer      :: fe_iterator_get_quadrature
  integer(ip) :: fe_quadratures_position
  integer(ip) :: istat
  call this%fe_space%fe_quadratures_and_maps_position%get(key=this%fe_space%max_order_reference_fe_id_per_fe(this%get_lid()), &
                                                          val=fe_quadratures_position, &
                                                          stat=istat)
  assert ( .not. istat == key_not_found )
  fe_iterator_get_quadrature => this%fe_space%fe_quadratures(fe_quadratures_position)
end function fe_iterator_get_quadrature

function fe_iterator_get_fe_map ( this )
  implicit none
  class(fe_iterator_t), intent(in) :: this
  type(fe_map_t), pointer :: fe_iterator_get_fe_map
  integer(ip) :: fe_maps_position
  integer(ip) :: istat
  call this%fe_space%fe_quadratures_and_maps_position%get(key=this%fe_space%max_order_reference_fe_id_per_fe(this%get_lid()), &
                                                          val=fe_maps_position, &
                                                          stat=istat)
  assert ( .not. istat == key_not_found )
  fe_iterator_get_fe_map => this%fe_space%fe_maps(fe_maps_position)
end function fe_iterator_get_fe_map

function fe_iterator_get_volume_integrator ( this, field_id )
  implicit none
  class(fe_iterator_t), intent(in)   :: this
  integer(ip)         , intent(in)   :: field_id
  type(volume_integrator_t), pointer :: fe_iterator_get_volume_integrator
  integer(ip) :: fe_volume_integrators_position_key
  integer(ip) :: fe_volume_integrators_position
  integer(ip) :: istat
  
  fe_volume_integrators_position_key = &
        this%fe_space%generate_fe_volume_integrators_position_key(this%fe_space%max_order_reference_fe_id_per_fe(this%get_lid()), &
                                                                  this%fe_space%reference_fe_id_per_fe(field_id, this%get_lid()))
  
  call this%fe_space%fe_volume_integrators_position%get(key=fe_volume_integrators_position_key, &
                                                        val=fe_volume_integrators_position, &
                                                        stat=istat)
  assert ( .not. istat == key_not_found )
  fe_iterator_get_volume_integrator => this%fe_space%fe_volume_integrators(fe_volume_integrators_position)
end function fe_iterator_get_volume_integrator

subroutine fe_iterator_get_fe_vef(this, ivef, fe_vef)
  implicit none
  class(fe_iterator_t)   , intent(in)    :: this
  integer(ip)            , intent(in)    :: ivef
  type(fe_vef_iterator_t), intent(inout) :: fe_vef
  call fe_vef%set_lid(this%cell%get_vef_lid(ivef))
end subroutine fe_iterator_get_fe_vef

function fe_iterator_get_reference_fe(this, field_id)
  implicit none
  class(fe_iterator_t), target   , intent(in)    :: this
  integer(ip)                    , intent(in)    :: field_id
  class(reference_fe_t), pointer :: fe_iterator_get_reference_fe
  fe_iterator_get_reference_fe => this%fe_space%reference_fes(this%fe_space%reference_fe_id_per_fe(field_id,this%get_lid()))%p
end function fe_iterator_get_reference_fe

function fe_iterator_get_max_order_reference_fe(this)
  implicit none
  class(fe_iterator_t),  intent(in)      :: this
  class(reference_fe_t), pointer         :: fe_iterator_get_max_order_reference_fe
  class(reference_fe_t), pointer         :: reference_fe
  integer(ip)                            :: max_order
  integer(ip)                            :: field_id
  max_order = -1
  do field_id=1, this%get_number_fields()
    reference_fe => this%get_reference_fe(field_id)
    if ( reference_fe%get_max_order() > max_order ) then
      max_order = reference_fe%get_max_order()
      fe_iterator_get_max_order_reference_fe => reference_fe
    end if
  end do
end function fe_iterator_get_max_order_reference_fe

function fe_iterator_get_max_order_reference_fe_id(this)
  implicit none
  class(fe_iterator_t),  intent(in)      :: this
  integer(ip)                            :: fe_iterator_get_max_order_reference_fe_id
  class(reference_fe_t), pointer         :: reference_fe
  integer(ip)                            :: max_order
  integer(ip)                            :: field_id
  max_order = -1
  fe_iterator_get_max_order_reference_fe_id = -1
  do field_id=1, this%get_number_fields()
    reference_fe => this%get_reference_fe(field_id)
    if ( reference_fe%get_max_order() > max_order ) then
      max_order = reference_fe%get_max_order()
      fe_iterator_get_max_order_reference_fe_id = this%get_reference_fe_id(field_id)
    end if
  end do
end function fe_iterator_get_max_order_reference_fe_id

function fe_iterator_get_reference_fe_id(this, field_id)
  implicit none
  class(fe_iterator_t), target   , intent(in)    :: this
  integer(ip)                    , intent(in)    :: field_id
  integer(ip) :: fe_iterator_get_reference_fe_id
  fe_iterator_get_reference_fe_id = this%fe_space%reference_fe_id_per_fe(field_id,this%get_lid())
end function fe_iterator_get_reference_fe_id

function fe_iterator_create_own_dofs_on_vef_iterator ( this, ivef, field_id ) result(list_iterator)
  implicit none
  class(fe_iterator_t), intent(in) :: this
  integer(ip)                , intent(in) :: ivef
  integer(ip)                , intent(in) :: field_id
  type(list_iterator_t)                   :: list_iterator
  class(reference_fe_t), pointer          :: reference_fe
  
  reference_fe => this%get_reference_fe(field_id)
  list_iterator = reference_fe%create_own_dofs_on_n_face_iterator(ivef)
end function fe_iterator_create_own_dofs_on_vef_iterator

subroutine fe_iterator_impose_strong_dirichlet_bcs ( this, elmat, elvec )
 implicit none
 class(fe_iterator_t), intent(in)    :: this
 real(rp)            , intent(in)    :: elmat(:,:)
 real(rp)            , intent(inout) :: elvec(:)  
 integer(ip)                         :: idof, elmat_col, field_id, spos
 
 class(reference_fe_t), pointer :: reference_fe
 real(rp)             , pointer :: strong_dirichlet_values_entries(:)
 
 strong_dirichlet_values_entries => this%fe_space%strong_dirichlet_values%get_entries()
 elmat_col = 0
 do field_id = 1, this%fe_space%get_number_fields()
   reference_fe => this%get_reference_fe(field_id)
   spos = this%fe_space%ptr_dofs_per_fe(field_id, this%get_lid())
   do idof = 1, reference_fe%get_number_shape_functions()
       elmat_col = elmat_col + 1
       if ( this%fe_space%lst_dofs_lids(spos+idof-1) < 0 ) then
          elvec = elvec - elmat(:,elmat_col)*strong_dirichlet_values_entries(-this%fe_space%lst_dofs_lids(spos+idof-1))
       end if
   end do
 end do
 
end subroutine fe_iterator_impose_strong_dirichlet_bcs
