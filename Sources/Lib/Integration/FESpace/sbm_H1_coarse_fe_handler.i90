! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine H1_l1_setup_constraint_matrix(this, par_fe_space, constraint_matrix) 
  implicit none
  class(H1_l1_coarse_fe_handler_t), intent(in)    :: this
  type(par_fe_space_t)                  , intent(in)    :: par_fe_space
  type(coo_sparse_matrix_t)             , intent(inout) :: constraint_matrix
  type(par_environment_t), pointer :: par_environment
  type(fe_object_iterator_t) :: object_iterator
  type(fe_object_accessor_t) :: object
  type(fe_vefs_on_object_iterator_t)     :: vefs_on_object_iterator
  type(fe_vef_accessor_t)                :: vef
  type(fe_accessor_t)                    :: fe
  type(list_iterator_t)                  :: own_coarse_dofs_iterator
  type(list_iterator_t)                  :: own_dofs_on_vef_iterator 
  integer(ip)                            :: off
  integer(ip) :: field_id
  integer(ip) :: num_rows, num_cols
  integer(ip) :: num_fine_dofs_on_coarse_dof
  integer(ip) :: ivef, idof, dof_lid, coarse_dof_lid

  class(base_static_triangulation_t), pointer :: triangulation

  ! FE space traversal-related data types
  type(fe_faces_on_object_iterator_t) :: fe_faces_on_object_iterator
  type(fe_face_accessor_t)            :: fe_face

  ! Face integration-related data types
  type(quadrature_t)     , pointer :: quad
  type(face_map_t)       , pointer :: face_map
  type(face_integrator_t), pointer :: face_int
  real(rp)                         :: shape_trial
  integer(ip)            , pointer :: elem2dof(:)
  type(i1p_t)        , allocatable :: test_elem2dof(:)

  ! FACE vector
  real(rp), allocatable            :: facevec(:)

  integer(ip)  :: istat
  integer(ip)  :: qpoint, num_quad_points
  real(rp)     :: factor


  par_environment => par_fe_space%get_par_environment()
  assert (associated(par_environment))
  assert (par_environment%am_i_l1_task())

  triangulation => par_fe_space%get_triangulation()

  allocate (test_elem2dof(1), stat=istat); check(istat==0);

  ! To-think where field_id should come from? Temporarily let us assume that we have
  ! a single-field PDE problem
  field_id = 1

  ! Free any dynamic memory that constraint_matrix may have inside
  call constraint_matrix%free()

  num_rows = par_fe_space%number_dofs_per_field(field_id)
  num_cols = par_fe_space%ptr_coarse_dofs_per_field(field_id+1)- &
       par_fe_space%ptr_coarse_dofs_per_field(field_id) 

  call memalloc(par_fe_space%get_max_number_shape_functions(), facevec, __FILE__, __LINE__ )

  ! Create constraint matrix (transposed)
  call constraint_matrix%create ( num_rows, num_cols )

  ! Fill constraint matrix entries (transposed)
  object_iterator = par_fe_space%create_fe_object_iterator()
  do while ( .not. object_iterator%has_finished() )
     call object_iterator%current(object)

     if ( object%get_number_coarse_dofs(field_id) > 0 ) then

        own_coarse_dofs_iterator = object%create_own_coarse_dofs_iterator(field_id)
        assert ( own_coarse_dofs_iterator%get_size() == 1 )

        coarse_dof_lid = own_coarse_dofs_iterator%get_current() 

        ! Face coarse DoF
        if ( object%get_dimension () == triangulation%get_num_dimensions()-1) then

           fe_faces_on_object_iterator = object%create_fe_faces_on_object_iterator()
           do while ( .not. fe_faces_on_object_iterator%has_finished() )

              call fe_faces_on_object_iterator%current(fe_face)
              
              quad     => fe_face%get_quadrature()
              face_int => fe_face%get_face_integrator(1)
              face_map => fe_face%get_face_map()

              call fe_face%get_cell_around(1,fe)
              facevec = 0.0_rp
              call fe_face%update_integration() 
              do qpoint = 1, quad%get_number_quadrature_points()
                 factor = face_map%get_det_jacobian(qpoint) * quad%get_weight(qpoint)
                 do idof = 1, fe%get_number_dofs()
                    call face_int%get_value(idof,qpoint,1,shape_trial)
                    facevec(idof) = facevec(idof) + shape_trial*factor
                 end do
              end do

              call fe_face%get_elem2dof(1, test_elem2dof)
              call constraint_matrix%insert(fe%get_number_dofs(), &
                   test_elem2dof(1)%p, &
                   coarse_dof_lid, &
                   facevec)

              call fe_faces_on_object_iterator%next()
           end do

        else    

           ! Either corner or edge coarse DoF


           num_fine_dofs_on_coarse_dof = 0 
           ! Count how many fine DoFs current coarse DoF aggregates
           vefs_on_object_iterator = object%create_fe_vefs_on_object_iterator()
           do while ( .not. vefs_on_object_iterator%has_finished() )
              call vefs_on_object_iterator%current(vef)
              call vef%get_cell_around(1,fe)
              call fe%get_field_elem2dof(field_id, elem2dof)
              ivef = fe%find_lpos_vef_lid(vef%get_lid())
              own_dofs_on_vef_iterator = fe%create_own_dofs_on_vef_iterator(ivef, field_id)
              do while ( .not. own_dofs_on_vef_iterator%is_upper_bound() )
                 idof    = own_dofs_on_vef_iterator%get_current()
                 dof_lid = elem2dof(idof)
                 if ( dof_lid > 0 ) then
                    num_fine_dofs_on_coarse_dof = num_fine_dofs_on_coarse_dof + 1
                 end if
                 call own_dofs_on_vef_iterator%next()
              end do
              call vefs_on_object_iterator%next()
           end do

           vefs_on_object_iterator = object%create_fe_vefs_on_object_iterator()
           do while ( .not. vefs_on_object_iterator%has_finished() )
              call vefs_on_object_iterator%current(vef)
              call vef%get_cell_around(1,fe)
              call fe%get_field_elem2dof(field_id, elem2dof)
              ivef = fe%find_lpos_vef_lid(vef%get_lid())
              own_dofs_on_vef_iterator = fe%create_own_dofs_on_vef_iterator(ivef, field_id)
              do while ( .not. own_dofs_on_vef_iterator%is_upper_bound() )
                 idof    = own_dofs_on_vef_iterator%get_current()
                 dof_lid = elem2dof(idof)
                 if ( dof_lid > 0 ) then
                    call constraint_matrix%insert(dof_lid, coarse_dof_lid, 1.0_rp/real(num_fine_dofs_on_coarse_dof,rp))
                 end if
                 call own_dofs_on_vef_iterator%next()
              end do
              call vefs_on_object_iterator%next()
           end do

        end if
     end if
     call object_iterator%next()
  end do
  deallocate (test_elem2dof, stat=istat); check(istat==0);
  call memfree(facevec, __FILE__, __LINE__ )
  call constraint_matrix%sort_and_compress()
  !call constraint_matrix%print(6)
end subroutine H1_l1_setup_constraint_matrix

!subroutine H1_l1_setup_weighting_operator(this, par_fe_space, weighting_operator) 
!  implicit none
!  class(H1_l1_coarse_fe_handler_t), intent(in)    :: this
!  type(par_fe_space_t)                  , intent(in)    :: par_fe_space
!  real(rp), allocatable                 , intent(inout) :: weighting_operator(:)
!  integer(ip) :: field_id
!  type(par_environment_t), pointer :: par_environment
!  type(fe_object_iterator_t) :: object_iterator
!  type(fe_object_accessor_t) :: object
!  type(fe_vefs_on_object_iterator_t)     :: vefs_on_object_iterator
!  type(fe_vef_accessor_t)                :: vef
!  type(fe_accessor_t)                    :: fe
!  type(list_iterator_t)                  :: own_coarse_dofs_iterator
!  type(list_iterator_t)                  :: own_dofs_on_vef_iterator 
!  integer(ip), pointer                   :: elem2dof(:)
!  integer(ip)                            :: off
!  integer(ip) :: num_rows, num_cols
!  integer(ip) :: num_fine_dofs_on_coarse_dof
!  integer(ip) :: ivef, idof, dof_lid, coarse_dof_lid

!  if (allocated(weighting_operator) ) then
!     call memfree ( weighting_operator, __FILE__, __LINE__ )
!  end if

!  ! To-think where field_id should come from? Temporarily let us assume that we have
!  ! a single-field PDE problem
!  field_id = 1

!  call memalloc ( par_fe_space%number_dofs_per_field(field_id), &
!       weighting_operator, __FILE__, __LINE__ )

!  weighting_operator = 1.0_rp

!  ! Fill constraint matrix entries (transposed)
!  object_iterator = par_fe_space%create_fe_object_iterator()
!  do while ( .not. object_iterator%has_finished() )
!     call object_iterator%current(object)

!     ! Count how many fine DoFs current coarse DoF aggregates
!     vefs_on_object_iterator = object%create_fe_vefs_on_object_iterator()
!     do while ( .not. vefs_on_object_iterator%has_finished() )
!        call vefs_on_object_iterator%current(vef)
!        call vef%get_cell_around(1,fe)
!        call fe%get_field_elem2dof(field_id, elem2dof)
!        ivef = fe%find_lpos_vef_lid(vef%get_lid())
!        own_dofs_on_vef_iterator = fe%create_own_dofs_on_vef_iterator(ivef, field_id)
!        do while ( .not. own_dofs_on_vef_iterator%is_upper_bound() )
!           idof    = own_dofs_on_vef_iterator%get_current()
!           dof_lid = elem2dof(idof)
!           if ( dof_lid > 0 ) then
!              weighting_operator(dof_lid) = weighting_operator(dof_lid)/real(object%get_number_parts_around(),rp)
!           end if
!           call own_dofs_on_vef_iterator%next()
!        end do
!        call vefs_on_object_iterator%next()
!     end do
!     call object_iterator%next()
!  end do
!end subroutine H1_l1_setup_weighting_operator

subroutine H1_l1_setup_weighting_operator(this, par_fe_space, weighting_operator) 
  implicit none
  class(H1_l1_coarse_fe_handler_t), intent(in)    :: this
  type(par_fe_space_t)                  , intent(in)    :: par_fe_space
  real(rp), allocatable                 , intent(inout) :: weighting_operator(:)
  integer(ip) :: field_id
  type(par_environment_t), pointer :: par_environment
  type(fe_object_iterator_t) :: object_iterator
  type(fe_object_accessor_t) :: object
  type(fe_vefs_on_object_iterator_t)     :: vefs_on_object_iterator
  type(fe_vef_accessor_t)                :: vef
  type(fe_accessor_t)                    :: fe
  type(list_iterator_t)                  :: own_coarse_dofs_iterator
  type(list_iterator_t)                  :: own_dofs_on_vef_iterator 
  integer(ip), pointer                   :: elem2dof(:)
  integer(ip)                            :: off
  integer(ip) :: num_rows, num_cols
  integer(ip) :: num_fine_dofs_on_coarse_dof
  integer(ip) :: ivef, idof, dof_lid, coarse_dof_lid
  type(par_environment_t), pointer  :: par_env
  class(base_static_triangulation_t), pointer :: triangulation
  integer(ip) :: subpart
  real(rp) :: weigh, denom
  type(list_iterator_t)                  :: subparts_iterator 
  logical, allocatable :: is_subpart_local(:), touch_subpart(:)
  real(rp), allocatable :: subpart_viscosity(:)
  type(fe_iterator_t)                    :: fe_iterator
  

  if (allocated(weighting_operator) ) then
     call memfree ( weighting_operator, __FILE__, __LINE__ )
  end if

  ! To-think where field_id should come from? Temporarily let us assume that we have
  ! a single-field PDE problem
  field_id = 1

  call memalloc ( par_fe_space%number_dofs_per_field(field_id), &
       weighting_operator, __FILE__, __LINE__ )

  weighting_operator = 1.0_rp
    
  ! Fill constraint matrix entries (transposed)
  
  triangulation => par_fe_space%get_triangulation()
  call memalloc( triangulation%get_number_subparts(), is_subpart_local, __FILE__ , __LINE__ )
  call memalloc( triangulation%get_number_subparts(), touch_subpart, __FILE__ , __LINE__ )
  call memalloc( triangulation%get_number_subparts(), subpart_viscosity, __FILE__ , __LINE__ )
  
  is_subpart_local = .false.
  touch_subpart = .false.
  subpart_viscosity = 0.0_rp
  
  par_env =>  par_fe_space%get_par_environment()
    
  fe_iterator = par_fe_space%create_fe_iterator()
  do while ( .not. fe_iterator%has_finished() )
     call fe_iterator%current(fe)
     subpart = fe%get_my_subpart()
     subpart = fe%get_my_subpart_lid()
     if ( .not. touch_subpart(subpart)) then
        touch_subpart(subpart) = .true.
        is_subpart_local(subpart) = ( fe%get_my_part() == par_env%get_l1_rank() + 1 ) 
        subpart_viscosity(subpart) = fe%get_set_id()
     end if
     call fe_iterator%next()
  end do
  
  object_iterator = par_fe_space%create_fe_object_iterator()
  do while ( .not. object_iterator%has_finished() )
     call object_iterator%current(object)
     weigh = 0.0_rp
     denom = 0.0_rp
     ! Compute the weighting operator based on the physical coefficient for
     ! the physics based partition
     subparts_iterator = object%create_subparts_around_iterator()
     do  while ( .not. subparts_iterator%is_upper_bound() )
        subpart = subparts_iterator%get_current()
        subpart = triangulation%get_subpart_lid(subpart)
        if ( is_subpart_local(subpart) ) weigh = weigh + subpart_viscosity(subpart)
        denom = denom + subpart_viscosity(subpart)
        call subparts_iterator%next()
     end do
     weigh = weigh/denom
     
     vefs_on_object_iterator = object%create_fe_vefs_on_object_iterator()
     
     ! Count how many fine DoFs current coarse DoF aggregates
     do while ( .not. vefs_on_object_iterator%has_finished() )
        call vefs_on_object_iterator%current(vef)
        call vef%get_cell_around(1,fe)
        call fe%get_field_elem2dof(field_id, elem2dof)
        ivef = fe%find_lpos_vef_lid(vef%get_lid())
        own_dofs_on_vef_iterator = fe%create_own_dofs_on_vef_iterator(ivef, field_id)
        do while ( .not. own_dofs_on_vef_iterator%is_upper_bound() )
           idof    = own_dofs_on_vef_iterator%get_current()
           dof_lid = elem2dof(idof)
           if ( dof_lid > 0 ) then
              weighting_operator(dof_lid) = weigh
           end if
           call own_dofs_on_vef_iterator%next()
        end do
        call vefs_on_object_iterator%next()
     end do
     call object_iterator%next()
  end do
end subroutine H1_l1_setup_weighting_operator
