! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine H1_l1_setup_constraint_matrix(this, field_id, par_fe_space, parameter_list, constraint_matrix) 
  implicit none
  class(H1_l1_coarse_fe_handler_t), intent(in)    :: this
  integer(ip)                           , intent(in)    :: field_id
  type(par_fe_space_t)                  , intent(in)    :: par_fe_space
  type(parameterlist_t)                 , intent(in)    :: parameter_list
  type(coo_sparse_matrix_t)             , intent(inout) :: constraint_matrix
  type(environment_t), pointer :: par_environment
  type(fe_object_iterator_t) :: object
  type(fe_vef_iterator_t)                :: vef
  class(fe_cell_iterator_t), allocatable      :: fe
  type(list_iterator_t)                  :: own_coarse_dofs_iterator
  type(list_iterator_t)                  :: own_dofs_on_vef_iterator 
  integer(ip)                            :: off
  integer(ip) :: num_rows, num_cols
  integer(ip) :: num_fine_dofs_on_coarse_dof
  integer(ip) :: ivef_within_cell, ivef_within_object, idof, dof_lid, coarse_dof_lid

  class(triangulation_t), pointer :: triangulation

  ! FE space traversal-related data types
  type(list_iterator_t)                  :: faces_object_iterator
  class(fe_facet_iterator_t), allocatable :: fe_face

  ! Face integration-related data types
  type(quadrature_t)     , pointer :: quad
  type(facet_maps_t)       , pointer :: facet_map
  type(facet_integrator_t), pointer :: facet_int
  real(rp)                         :: shape_trial
  integer(ip)            , pointer :: fe_dofs(:)
  type(i1p_t)        , allocatable :: test_fe_dofs(:)

  ! FACE vector
  real(rp), allocatable            :: facevec(:)

  integer(ip)  :: istat
  integer(ip)  :: qpoint, num_quad_points
  real(rp)     :: factor


  par_environment => par_fe_space%get_environment()
  assert (associated(par_environment))
  assert (par_environment%am_i_l1_task())

  triangulation => par_fe_space%get_triangulation()

  allocate (test_fe_dofs(1), stat=istat); check(istat==0);
  call memalloc(par_fe_space%get_max_num_shape_functions(), facevec, __FILE__, __LINE__ )

  ! Fill constraint matrix entries (transposed)
  call par_fe_space%create_fe_object_iterator(object)
  call par_fe_space%create_fe_cell_iterator(fe)
  call par_fe_space%create_fe_facet_iterator(fe_face)
  call par_fe_space%create_fe_vef_iterator(vef)
  do while ( .not. object%has_finished() )
     if ( object%get_num_coarse_dofs(field_id) > 0 ) then

        own_coarse_dofs_iterator = object%create_own_coarse_dofs_iterator(field_id)
        assert ( own_coarse_dofs_iterator%get_size() == 1 )

        coarse_dof_lid = own_coarse_dofs_iterator%get_current() 

        ! Face coarse DoF
        if ( object%get_dim () == triangulation%get_num_dims()-1) then
           faces_object_iterator = object%create_faces_object_iterator()
           do while ( .not. faces_object_iterator%is_upper_bound() )
              call object%get_face(faces_object_iterator%get_current(),fe_face)
              quad     => fe_face%get_quadrature()
              facet_int => fe_face%get_facet_integrator(1)
              facet_map => fe_face%get_facet_maps()

              call fe_face%get_cell_around(1,fe)
              facevec = 0.0_rp
              call fe_face%update_integration() 
              do qpoint = 1, quad%get_num_quadrature_points()
                 factor = facet_map%get_det_jacobian(qpoint) * quad%get_weight(qpoint)
                 do idof = 1, fe%get_num_dofs()
                    call facet_int%get_value(idof,qpoint,1,shape_trial)
                    facevec(idof) = facevec(idof) + shape_trial*factor
                 end do
              end do

              call fe_face%get_fe_dofs(1, test_fe_dofs)
              call constraint_matrix%insert(fe%get_num_dofs(), &
                                            test_fe_dofs(1)%p, &
                                            coarse_dof_lid, &
                                            facevec)
              call faces_object_iterator%next()
           end do
        else    
           ! Either corner or edge coarse DoF
           num_fine_dofs_on_coarse_dof = 0 
           ! Count how many fine DoFs current coarse DoF aggregates
           do ivef_within_object=1, object%get_num_vefs()
              call object%get_vef(ivef_within_object,vef)
              call vef%get_cell_around(1,fe)
              call fe%get_field_fe_dofs(field_id, fe_dofs)
              ivef_within_cell = fe%get_vef_lid_from_gid(vef%get_gid())
              own_dofs_on_vef_iterator = fe%create_own_dofs_on_vef_iterator(ivef_within_cell, field_id)
              do while ( .not. own_dofs_on_vef_iterator%is_upper_bound() )
                 idof    = own_dofs_on_vef_iterator%get_current()
                 dof_lid = fe_dofs(idof)
                 if ( dof_lid > 0 ) then
                    num_fine_dofs_on_coarse_dof = num_fine_dofs_on_coarse_dof + 1
                 end if
                 call own_dofs_on_vef_iterator%next()
              end do
           end do

           do ivef_within_object=1, object%get_num_vefs()
              call object%get_vef(ivef_within_object,vef)
              call vef%get_cell_around(1,fe)
              call fe%get_field_fe_dofs(field_id, fe_dofs)
              ivef_within_cell = fe%get_vef_lid_from_gid(vef%get_gid())
              own_dofs_on_vef_iterator = fe%create_own_dofs_on_vef_iterator(ivef_within_cell, field_id)
              do while ( .not. own_dofs_on_vef_iterator%is_upper_bound() )
                 idof    = own_dofs_on_vef_iterator%get_current()
                 dof_lid = fe_dofs(idof)
                 if ( dof_lid > 0 ) then
                    call constraint_matrix%insert(dof_lid, coarse_dof_lid, 1.0_rp/real(num_fine_dofs_on_coarse_dof,rp))
                 end if
                 call own_dofs_on_vef_iterator%next()
              end do
           end do
        end if
     end if
     call object%next()
  end do
  call faces_object_iterator%free()
  call par_fe_space%free_fe_cell_iterator(fe)
  call par_fe_space%free_fe_object_iterator(object)
  call par_fe_space%free_fe_facet_iterator(fe_face)
  call par_fe_space%free_fe_vef_iterator(vef)
  deallocate (test_fe_dofs, stat=istat); check(istat==0);
  call memfree(facevec, __FILE__, __LINE__ )
end subroutine H1_l1_setup_constraint_matrix

subroutine H1_l1_setup_weighting_operator(this, field_id, par_fe_space, parameter_list, weighting_operator) 
  implicit none
  class(H1_l1_coarse_fe_handler_t), intent(in)    :: this
  integer(ip)                           , intent(in)    :: field_id
  type(par_fe_space_t)                  , intent(in)    :: par_fe_space
  type(parameterlist_t)                 , intent(in)    :: parameter_list
  real(rp), allocatable                 , intent(inout) :: weighting_operator(:)
  type(fe_object_iterator_t) :: object
  type(fe_vef_iterator_t)                :: vef
  type(list_iterator_t)                  :: own_coarse_dofs_iterator
  type(list_iterator_t)                  :: own_dofs_on_vef_iterator 
  integer(ip), pointer                   :: fe_dofs(:)
  integer(ip)                            :: off
  integer(ip) :: num_rows, num_cols
  integer(ip) :: num_fine_dofs_on_coarse_dof
  integer(ip) :: ivef_within_cell, ivef_within_object, idof, dof_lid, coarse_dof_lid
  type(environment_t), pointer  :: par_env
  class(triangulation_t), pointer :: triangulation
  integer(ip) :: subpart
  real(rp) :: weigh, denom
  type(list_iterator_t)                  :: subparts_iterator 
  logical, allocatable :: is_subpart_local(:), touch_subpart(:)
  real(rp), allocatable :: subpart_viscosity(:)
  class(fe_cell_iterator_t), allocatable :: fe  

    
  ! Fill constraint matrix entries (transposed)
  triangulation => par_fe_space%get_triangulation()
  call memalloc( triangulation%get_num_subparts(), is_subpart_local, __FILE__ , __LINE__ )
  call memalloc( triangulation%get_num_subparts(), touch_subpart, __FILE__ , __LINE__ )
  call memalloc( triangulation%get_num_subparts(), subpart_viscosity, __FILE__ , __LINE__ )
  
  is_subpart_local = .false.
  touch_subpart = .false.
  subpart_viscosity = 0.0_rp
  
  par_env =>  par_fe_space%get_environment()

  call par_fe_space%create_fe_cell_iterator(fe)
  do while ( .not. fe%has_finished())
     subpart = fe%get_my_subpart()
     subpart = fe%get_my_subpart_lid()
     if ( .not. touch_subpart(subpart)) then
        touch_subpart(subpart) = .true.
        is_subpart_local(subpart) = ( fe%get_my_part() == par_env%get_l1_rank() + 1 ) 
        if ( fe%get_set_id() <= 1 ) then
             subpart_viscosity(subpart) = 1.0_rp
          else 
             subpart_viscosity(subpart) = this%diffusion_inclusion
        end if
     end if
     call fe%next()
  end do
  
  call par_fe_space%create_fe_object_iterator(object)
  call par_fe_space%create_fe_vef_iterator(vef)
  do while ( .not. object%has_finished() )
     weigh = 0.0_rp
     denom = 0.0_rp
     ! Compute the weighting operator based on the physical coefficient for
     ! the physics based partition
     subparts_iterator = object%create_subparts_around_iterator()
     do  while ( .not. subparts_iterator%is_upper_bound() )
        subpart = subparts_iterator%get_current()
        subpart = triangulation%get_subpart_lid(subpart)
        if ( is_subpart_local(subpart) ) weigh = weigh + subpart_viscosity(subpart)
        denom = denom + subpart_viscosity(subpart)
        call subparts_iterator%next()
     end do
     weigh = weigh/denom
          
     ! Count how many fine DoFs current coarse DoF aggregates
     do ivef_within_object=1, object%get_num_vefs()
        call object%get_vef(ivef_within_object,vef)
        call vef%get_cell_around(1,fe)
        call fe%get_field_fe_dofs(field_id, fe_dofs)
        ivef_within_cell = fe%get_vef_lid_from_gid(vef%get_gid())
        own_dofs_on_vef_iterator = fe%create_own_dofs_on_vef_iterator(ivef_within_cell, field_id)
        do while ( .not. own_dofs_on_vef_iterator%is_upper_bound() )
           idof    = own_dofs_on_vef_iterator%get_current()
           dof_lid = fe_dofs(idof)
           if ( dof_lid > 0 ) then
              weighting_operator(dof_lid) = weigh
           end if
           call own_dofs_on_vef_iterator%next()
        end do
     end do
     call object%next()
  end do
  call par_fe_space%free_fe_cell_iterator(fe)
  call par_fe_space%free_fe_object_iterator(object)
  call par_fe_space%free_fe_vef_iterator(vef)
  call memfree( is_subpart_local, __FILE__ , __LINE__ )
  call memfree( touch_subpart, __FILE__ , __LINE__ )
  call memfree( subpart_viscosity, __FILE__ , __LINE__ )
end subroutine H1_l1_setup_weighting_operator
