! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine fe_vef_iterator_create ( this, fe_space, vef )
  implicit none
  class(fe_vef_iterator_t) , target, intent(inout) :: this
  class(serial_fe_space_t) , target, intent(in)    :: fe_space
  class(vef_iterator_t)            , intent(in)    :: vef
  integer(ip) :: istat
  call this%free()
  this%fe_space => fe_space
  allocate(this%vef, mold=vef, stat=istat); check(istat==0)
  call this%vef%create(fe_space%triangulation)
end subroutine fe_vef_iterator_create

subroutine fe_vef_iterator_free ( this)
  implicit none
  class(fe_vef_iterator_t), intent(inout) :: this
  integer(ip) :: istat
  if(allocated(this%vef)) then
     call this%vef%free()
     deallocate(this%vef, stat=istat); check(istat==0)
  end if
  nullify(this%fe_space)
end subroutine fe_vef_iterator_free

subroutine fe_vef_iterator_final ( this )
  implicit none
  type(fe_vef_iterator_t), intent(inout) :: this
  assert (.not. associated(this%fe_space)) 
end subroutine fe_vef_iterator_final 

subroutine fe_vef_iterator_set_vef_lid_of_fe_face ( this, facet_lid )
  implicit none
  class(fe_vef_iterator_t), intent(inout) :: this
  integer(ip)             , intent(in)    :: facet_lid
  assert ( facet_lid >= 1 .and. facet_lid <= this%fe_space%vef_lids_of_fe_faces%size() )
  call this%fe_space%vef_lids_of_fe_faces%set(facet_lid,this%get_lid())
end subroutine fe_vef_iterator_set_vef_lid_of_fe_face

subroutine fe_vef_iterator_push_back_vef_lid_of_fe_face ( this )
  implicit none
  class(fe_vef_iterator_t), intent(inout) :: this
  call this%fe_space%vef_lids_of_fe_faces%push_back(this%get_lid())
end subroutine fe_vef_iterator_push_back_vef_lid_of_fe_face

function fe_vef_iterator_is_proper ( this ) 
  implicit none
  class(fe_vef_iterator_t), intent(in) :: this
  logical :: fe_vef_iterator_is_proper 
  fe_vef_iterator_is_proper = this%vef%is_proper()
end function fe_vef_iterator_is_proper 

subroutine fe_vef_iterator_get_fe_around (this, ife_around, fe)
  implicit none
  class(fe_vef_iterator_t)          , intent(in)     :: this
  integer(ip)                       , intent(in)     :: ife_around
  class(fe_cell_iterator_t)              , intent(inout)  :: fe
  assert(allocated(this%vef))
  assert(allocated(fe%cell))
  call this%vef%get_cell_around(ife_around,fe%cell)
end subroutine fe_vef_iterator_get_fe_around

function fe_vef_iterator_get_num_improper_cells_around(this)
  implicit none
  class(fe_vef_iterator_t)          , intent(in)     :: this
  integer(ip) :: fe_vef_iterator_get_num_improper_cells_around
  fe_vef_iterator_get_num_improper_cells_around =  this%vef%get_num_improper_cells_around()
end function fe_vef_iterator_get_num_improper_cells_around

subroutine fe_vef_iterator_get_improper_cell_around (this, icell_around, cell)
  implicit none
  class(fe_vef_iterator_t)          , intent(in)     :: this
  integer(ip)                       , intent(in)     :: icell_around
  class(cell_iterator_t)            , intent(inout)  :: cell
  assert(allocated(this%vef))
  call this%vef%get_improper_cell_around(icell_around,cell)
end subroutine fe_vef_iterator_get_improper_cell_around

subroutine fe_vef_iterator_get_improper_fe_around (this, ife_around, fe)
  implicit none
  class(fe_vef_iterator_t)          , intent(in)     :: this
  integer(ip)                       , intent(in)     :: ife_around
  class(fe_iterator_t)              , intent(inout)  :: fe
  assert(allocated(this%vef))
  assert(allocated(fe%cell))
  call this%vef%get_improper_cell_around(ife_around,fe%cell)
end subroutine fe_vef_iterator_get_improper_fe_around

function fe_vef_iterator_get_improper_cell_around_ivef(this)
  implicit none
  class(fe_vef_iterator_t) , intent(in)    :: this
  integer(ip) :: fe_vef_iterator_get_improper_cell_around_ivef
  fe_vef_iterator_get_improper_cell_around_ivef = this%vef%get_improper_cell_around_ivef()
end function fe_vef_iterator_get_improper_cell_around_ivef

function fe_vef_iterator_get_improper_cell_around_subvef(this)
  implicit none
  class(fe_vef_iterator_t) , intent(in)    :: this
  integer(ip) :: fe_vef_iterator_get_improper_cell_around_subvef
  fe_vef_iterator_get_improper_cell_around_subvef = this%vef%get_improper_cell_around_subvef()
end function fe_vef_iterator_get_improper_cell_around_subvef

