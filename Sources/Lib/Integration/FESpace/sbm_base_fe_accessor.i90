! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine base_fe_accessor_next(this)
  implicit none
  class(base_fe_accessor_t), intent(inout) :: this
  assert(allocated(this%cell))
  call this%cell%next()
end subroutine base_fe_accessor_next

subroutine base_fe_accessor_first(this)
  implicit none
  class(base_fe_accessor_t), intent(inout) :: this
  assert(allocated(this%cell))
  call this%cell%first()
end subroutine base_fe_accessor_first

subroutine base_fe_accessor_last(this)
  implicit none
  class(base_fe_accessor_t), intent(inout) :: this
  assert(allocated(this%cell))
  call this%cell%last()
end subroutine base_fe_accessor_last

subroutine base_fe_accessor_set_lid(this, lid)
  implicit none
  class(base_fe_accessor_t), intent(inout) :: this
  integer(ip)        , intent(in)    :: lid
  assert(allocated(this%cell))
  call this%cell%set_lid(lid)
end subroutine base_fe_accessor_set_lid

function base_fe_accessor_past_the_end(this)
  implicit none
  class(base_fe_accessor_t), intent(in) :: this
  logical :: base_fe_accessor_past_the_end
  assert(allocated(this%cell))
  base_fe_accessor_past_the_end = this%cell%past_the_end()
end function base_fe_accessor_past_the_end

function base_fe_accessor_get_reference_fe_geo (this)
  implicit none
  class(base_fe_accessor_t), intent(in) :: this
  class(lagrangian_reference_fe_t), pointer :: base_fe_accessor_get_reference_fe_geo
  assert(allocated(this%cell))
  base_fe_accessor_get_reference_fe_geo => this%cell%get_reference_fe_geo()
end function base_fe_accessor_get_reference_fe_geo

function base_fe_accessor_get_reference_fe_geo_id (this) 
  implicit none
  class(base_fe_accessor_t), intent(in) :: this
  integer(ip) :: base_fe_accessor_get_reference_fe_geo_id
  integer(ip) :: istat
  assert(allocated(this%cell))
  base_fe_accessor_get_reference_fe_geo_id = this%cell%get_reference_fe_geo_id()
end function base_fe_accessor_get_reference_fe_geo_id

subroutine base_fe_accessor_get_coordinates (this, cell_coordinates)
  implicit none
  class(base_fe_accessor_t), intent(in)     :: this
  type(point_t)       ,  intent(inout) :: cell_coordinates(:)
  assert(allocated(this%cell))
  call this%cell%get_coordinates(cell_coordinates)
end subroutine base_fe_accessor_get_coordinates

subroutine base_fe_accessor_set_coordinates (this, cell_coordinates)
  implicit none
  class(base_fe_accessor_t), intent(inout) :: this
  type(point_t)       ,  intent(in)   :: cell_coordinates(:)
  assert(allocated(this%cell))
  call this%cell%set_coordinates(cell_coordinates)
end subroutine base_fe_accessor_set_coordinates

pure function base_fe_accessor_get_lid (this)
  implicit none
  class(base_fe_accessor_t), intent(in) :: this
  integer(ip) :: base_fe_accessor_get_lid
  !assert(allocated(this%cell))
  base_fe_accessor_get_lid = this%cell%get_lid()
end function base_fe_accessor_get_lid

function base_fe_accessor_get_gid (this)
  implicit none
  class(base_fe_accessor_t), intent(in) :: this
  integer(igp) :: base_fe_accessor_get_gid
  assert(allocated(this%cell))
  base_fe_accessor_get_gid = this%cell%get_gid()
end function base_fe_accessor_get_gid

pure function base_fe_accessor_get_mypart (this)
  implicit none
  class(base_fe_accessor_t), intent(in) :: this
  integer(ip) :: base_fe_accessor_get_mypart
  !assert(allocated(this%cell))
  base_fe_accessor_get_mypart = this%cell%get_my_part()
end function base_fe_accessor_get_mypart

function base_fe_accessor_get_mysubpart ( this )
  implicit none
  class(base_fe_accessor_t), intent(in) :: this
  integer(ip) :: base_fe_accessor_get_mysubpart
  assert(allocated(this%cell))
  base_fe_accessor_get_mysubpart = this%cell%get_my_subpart()
end function base_fe_accessor_get_mysubpart

function base_fe_accessor_get_mysubpart_lid ( this )
  implicit none
  class(base_fe_accessor_t), intent(in) :: this
  integer(ip) :: base_fe_accessor_get_mysubpart_lid
  assert(allocated(this%cell))
  base_fe_accessor_get_mysubpart_lid = this%cell%get_my_subpart_lid ()
end function base_fe_accessor_get_mysubpart_lid

function base_fe_accessor_get_set_id(this)
  implicit none
  class(base_fe_accessor_t), intent(in) :: this
  integer(ip) :: base_fe_accessor_get_set_id
  assert(allocated(this%cell))
  base_fe_accessor_get_set_id = this%cell%get_set_id()
end function base_fe_accessor_get_set_id

pure function base_fe_accessor_get_num_vefs (this)
  implicit none
  class(base_fe_accessor_t), intent(in) :: this
  integer(ip)                        :: base_fe_accessor_get_num_vefs
  !assert(allocated(this%cell))
  base_fe_accessor_get_num_vefs = this%cell%get_num_vefs ()
end function base_fe_accessor_get_num_vefs

function base_fe_accessor_get_vef_lid (this, ivef)
  implicit none
  class(base_fe_accessor_t), intent(in) :: this
  integer(ip)                      :: ivef
  integer(ip)                      :: base_fe_accessor_get_vef_lid
  assert(allocated(this%cell))
  base_fe_accessor_get_vef_lid = this%cell%get_vef_lid (ivef)
end function base_fe_accessor_get_vef_lid

function base_fe_accessor_get_vef_lids (this)
  implicit none
  class(base_fe_accessor_t), intent(in) :: this
  integer(ip)                        :: ivef
  integer(ip), pointer               :: base_fe_accessor_get_vef_lids(:)
  assert(allocated(this%cell))
  base_fe_accessor_get_vef_lids => this%cell%get_vef_lids()
end function base_fe_accessor_get_vef_lids

function base_fe_accessor_get_vef_gid (this, ivef)
  implicit none
  class(base_fe_accessor_t), intent(in) :: this
  integer(ip)                        :: ivef
  integer(igp)                       :: base_fe_accessor_get_vef_gid
  assert(allocated(this%cell))
  base_fe_accessor_get_vef_gid = this%cell%get_vef_gid (ivef)
end function base_fe_accessor_get_vef_gid

function base_fe_accessor_find_lpos_vef_lid (this, vef_lid)
  implicit none
  class(base_fe_accessor_t), intent(in) :: this
  integer(ip)                      :: vef_lid
  integer(ip)                      :: base_fe_accessor_find_lpos_vef_lid
  assert(allocated(this%cell))
  base_fe_accessor_find_lpos_vef_lid = this%cell%find_lpos_vef_lid (vef_lid)
end function base_fe_accessor_find_lpos_vef_lid

function base_fe_accessor_find_lpos_vef_gid (this, vef_gid)
  implicit none
  class(base_fe_accessor_t), intent(in) :: this
  integer(igp)                     :: vef_gid
  integer(ip)                      :: base_fe_accessor_find_lpos_vef_gid
  assert(allocated(this%cell))
  base_fe_accessor_find_lpos_vef_gid = this%cell%find_lpos_vef_gid (vef_gid)
end function base_fe_accessor_find_lpos_vef_gid

function base_fe_accessor_is_local (this)
  implicit none
  class(base_fe_accessor_t), intent(in) :: this
  logical                          :: base_fe_accessor_is_local
  assert(allocated(this%cell))
  base_fe_accessor_is_local = this%cell%is_local()
end function base_fe_accessor_is_local

function base_fe_accessor_is_ghost (this)
  implicit none
  class(base_fe_accessor_t), intent(in) :: this
  logical                          :: base_fe_accessor_is_ghost
  assert(allocated(this%cell))
  base_fe_accessor_is_ghost = this%cell%is_ghost()
end function base_fe_accessor_is_ghost

! Returns the sum of num_vefs over all cells up-to the present one (exclusive, i.e.,
! without considering the present one), with the cells being ordered consistently 
! with the iterator sequential traversal over all cells. At the moment of writing this
! comment (commit 0907e7b9d07e122ba69e02e0d72bac46546acc04), type(coarse_fe_space_t) needs 
! this TBP to efficiently locate a vef in the global type(list_t) data type which associates 
! DoFs to vefs. 
function base_fe_accessor_get_scan_sum_number_vefs(this)
  implicit none
  class(base_fe_accessor_t), intent(in) :: this
  integer(ip) :: base_fe_accessor_get_scan_sum_number_vefs
  assert(allocated(this%cell))
  base_fe_accessor_get_scan_sum_number_vefs = this%cell%scan_sum_number_vefs()
end function base_fe_accessor_get_scan_sum_number_vefs

subroutine base_fe_accessor_get_vef (this, ivef, vef)
  implicit none
  class(base_fe_accessor_t), intent(in)    :: this
  integer(ip),            intent(in)    :: ivef
  type(vef_accessor_t),   intent(inout) :: vef
  assert(allocated(this%cell))
  call this%cell%get_vef(ivef, vef)
end subroutine base_fe_accessor_get_vef

