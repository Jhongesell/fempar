! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


!**************************************************************************************************
! Methods associated to face_fe_function_scalar_t
!**************************************************************************************************

!===============================================================================================
subroutine face_fe_function_scalar_create ( this, fe_space, field_id )
  implicit none
  class(face_fe_function_scalar_t), intent(inout) :: this 
  class(serial_fe_space_t)        , intent(in)    :: fe_space
  integer(ip)                     , intent(in)    :: field_id
  call this%free()
  call this%cell_fe_function(1)%create(fe_space, field_id)
  call this%cell_fe_function(2)%create(fe_space, field_id)
end subroutine face_fe_function_scalar_create

!==================================================================================================
subroutine face_fe_function_scalar_update ( this, face_accessor, fe_function )
  implicit none
  class(face_fe_function_scalar_t), intent(inout) :: this
  class(fe_face_accessor_t)       , intent(in)    :: face_accessor
  type(fe_function_t)             , intent(in)    :: fe_function
  
  integer(ip)                      :: inode, field_id
  integer(ip)                      :: number_nodes_field, number_quadrature_points
  integer(ip)                      :: icell_around
  type(fe_accessor_t)              :: fe
  class(reference_fe_t)      , pointer     :: reference_fe
  type(quadrature_t)         , pointer     :: quadrature
  type(face_integrator_t)    , pointer     :: face_integrator
  real(rp)                   , pointer     :: nodal_values(:)
  real(rp)                   , allocatable :: quadrature_points_values(:)
  type(vector_field_t)       , allocatable :: quadrature_points_gradients(:)
  class(environment_t)       , pointer     :: environment
  class(serial_fe_space_t)   , pointer     :: serial_fe_space  
  
  serial_fe_space => face_accessor%get_fe_space()
  environment     => serial_fe_space%get_environment()
  if ( environment%am_i_l1_task() ) then

     this%is_boundary = face_accessor%is_at_boundary()

     field_id = this%get_field_id()
     quadrature => face_accessor%get_quadrature()
     number_quadrature_points =  quadrature%get_number_quadrature_points()
     face_integrator => face_accessor%get_face_integrator(field_id)

     do icell_around=1, face_accessor%get_num_cells_around()

        this%quadrature_points_permutation(icell_around)%p => &
             face_integrator%get_current_qpoints_perm(icell_around)

        call face_accessor%get_cell_around(icell_around, fe)

        reference_fe => fe%get_reference_fe(field_id)  
        number_nodes_field =  reference_fe%get_number_shape_functions()  

        call this%set_current_number_quadrature_points( icell_around, number_quadrature_points )
        call this%set_current_number_nodes( icell_around, number_nodes_field )  

        nodal_values                => this%get_nodal_values(icell_around)
        call this%cell_fe_function(icell_around)%move_alloc_values_out(quadrature_points_values) 
        call this%cell_fe_function(icell_around)%move_alloc_gradients_out(quadrature_points_gradients) 
        
        ! Gather DoFs of current cell + field_id on nodal_values 
        call fe_function%gather_nodal_values(fe, field_id, nodal_values)

        ! Evaluate values and gradients at quadrature points
        call face_integrator%evaluate_fe_function ( icell_around, &
                                                    nodal_values, & 
                                                    quadrature_points_values )

        call face_integrator%evaluate_gradient_fe_function ( icell_around, &
                                                             nodal_values, & 
                                                             quadrature_points_gradients )
        
        call this%cell_fe_function(icell_around)%move_alloc_values_in(quadrature_points_values) 
        call this%cell_fe_function(icell_around)%move_alloc_gradients_in(quadrature_points_gradients) 

     end do
  end if
end subroutine face_fe_function_scalar_update


!===============================================================================================
function face_fe_function_scalar_get_field_id ( this )
  implicit none
  class(face_fe_function_scalar_t), intent(in) :: this 
  integer(ip) :: face_fe_function_scalar_get_field_id
  face_fe_function_scalar_get_field_id = this%cell_fe_function(1)%get_field_id()
end function face_fe_function_scalar_get_field_id

!===============================================================================================
function face_fe_function_scalar_get_nodal_values ( this, ineigh ) 
  implicit none
  class(face_fe_function_scalar_t), intent(in) :: this 
  integer(ip)                     , intent(in) :: ineigh
  real(rp), pointer :: face_fe_function_scalar_get_nodal_values(:)
  assert ( ineigh == 1 .or. (ineigh == 2 .and. .not. this%is_boundary) )
  face_fe_function_scalar_get_nodal_values => this%cell_fe_function(ineigh)%get_nodal_values()
end function face_fe_function_scalar_get_nodal_values

!===============================================================================================
function face_fe_function_scalar_get_quadrature_points_values ( this, ineigh )
  implicit none
  class(face_fe_function_scalar_t), intent(in) :: this 
  integer(ip)                     , intent(in) :: ineigh
  real(rp), pointer :: face_fe_function_scalar_get_quadrature_points_values(:)
  assert ( ineigh == 1 .or. (ineigh == 2 .and. .not. this%is_boundary) )
  face_fe_function_scalar_get_quadrature_points_values => this%cell_fe_function(ineigh)%get_quadrature_points_values()
end function face_fe_function_scalar_get_quadrature_points_values

!===============================================================================================
function face_fe_function_scalar_get_quadrature_points_gradients ( this, ineigh )
  implicit none
  class(face_fe_function_scalar_t), intent(in) :: this 
  integer(ip)                     , intent(in) :: ineigh
  type(vector_field_t), pointer :: face_fe_function_scalar_get_quadrature_points_gradients(:)
  assert ( ineigh == 1 .or. (ineigh == 2 .and. .not. this%is_boundary) )
  face_fe_function_scalar_get_quadrature_points_gradients => this%cell_fe_function(ineigh)%get_quadrature_points_gradients()
end function face_fe_function_scalar_get_quadrature_points_gradients

!===============================================================================================
subroutine face_fe_function_scalar_get_value ( this, point, ineigh, value )
  implicit none
  class(face_fe_function_scalar_t), intent(in)    :: this 
  integer(ip)                     , intent(in)    :: point
  integer(ip)                     , intent(in)    :: ineigh
  real(rp)                        , intent(inout) :: value
  integer(ip) :: actual_point
  assert ( ineigh == 1 .or. (ineigh == 2 .and. .not. this%is_boundary) )
  actual_point = this%quadrature_points_permutation(ineigh)%p(point)
  call this%cell_fe_function(ineigh)%get_value(actual_point, value)
end subroutine face_fe_function_scalar_get_value

!===============================================================================================
subroutine face_fe_function_scalar_get_gradient ( this, point, ineigh, value )
  implicit none
  class(face_fe_function_scalar_t), intent(in)    :: this 
  integer(ip)                     , intent(in)    :: point
  integer(ip)                     , intent(in)    :: ineigh
  type(vector_field_t)            , intent(inout) :: value
  integer(ip) :: actual_point
  assert ( ineigh == 1 .or. (ineigh == 2 .and. .not. this%is_boundary) )
  actual_point = this%quadrature_points_permutation(ineigh)%p(point)
  call this%cell_fe_function(ineigh)%get_gradient(actual_point, value)
end subroutine face_fe_function_scalar_get_gradient

!===============================================================================================
subroutine face_fe_function_scalar_set_current_number_nodes ( this, ineigh, value )
  implicit none
  class(face_fe_function_scalar_t), intent(inout) :: this 
  integer(ip)                     , intent(in)    :: ineigh
  integer(ip)                     , intent(in)    :: value
  assert ( ineigh == 1 .or. (ineigh == 2 .and. .not. this%is_boundary) )
  call this%cell_fe_function(ineigh)%set_current_number_nodes(value)
end subroutine face_fe_function_scalar_set_current_number_nodes

!===============================================================================================
subroutine face_fe_function_scalar_set_current_number_quadrature_points ( this, ineigh, value )
  implicit none
  class(face_fe_function_scalar_t), intent(inout) :: this 
  integer(ip)                     , intent(in)    :: ineigh
  integer(ip)                     , intent(in)    :: value
  assert ( ineigh == 1 .or. (ineigh == 2 .and. .not. this%is_boundary) )
  call this%cell_fe_function(ineigh)%set_current_number_quadrature_points(value)
end subroutine face_fe_function_scalar_set_current_number_quadrature_points

!===============================================================================================
subroutine face_fe_function_scalar_free ( this )
  implicit none
  class(face_fe_function_scalar_t), intent(inout) :: this
  this%is_boundary = .false.
  nullify(this%quadrature_points_permutation(1)%p)
  nullify(this%quadrature_points_permutation(2)%p)
  call this%cell_fe_function(1)%free()
  call this%cell_fe_function(2)%free()
end subroutine face_fe_function_scalar_free

!**************************************************************************************************
! Methods associated to face_fe_function_vector_t
!**************************************************************************************************

!===============================================================================================
subroutine face_fe_function_vector_create ( this, fe_space, field_id )
  implicit none
  class(face_fe_function_vector_t), intent(inout) :: this 
  class(serial_fe_space_t)        , intent(in)    :: fe_space
  integer(ip)                     , intent(in)    :: field_id
  call this%free()
  call this%cell_fe_function(1)%create(fe_space, field_id)
  call this%cell_fe_function(2)%create(fe_space, field_id)
end subroutine face_fe_function_vector_create

!==================================================================================================
subroutine face_fe_function_vector_update ( this, face_accessor, fe_function )
  implicit none
  class(face_fe_function_vector_t), intent(inout) :: this
  type(fe_face_accessor_t)        , intent(in)    :: face_accessor
  type(fe_function_t)             , intent(in)    :: fe_function
  
  integer(ip)                      :: inode, field_id
  integer(ip)                      :: number_nodes_field, number_quadrature_points
  integer(ip)                      :: icell_around
  type(fe_accessor_t)              :: fe
  class(reference_fe_t)      , pointer     :: reference_fe
  type(quadrature_t)         , pointer     :: quadrature
  type(face_integrator_t)    , pointer     :: face_integrator
  real(rp)                   , pointer     :: nodal_values(:)
  type(vector_field_t)       , allocatable :: quadrature_points_values(:)
  type(tensor_field_t)       , allocatable :: quadrature_points_gradients(:)
  class(environment_t)       , pointer     :: environment
  class(serial_fe_space_t)   , pointer     :: serial_fe_space  
  
  serial_fe_space => face_accessor%get_fe_space()
  environment     => serial_fe_space%get_environment()
  if ( environment%am_i_l1_task() ) then

     this%is_boundary = face_accessor%is_at_boundary()

     field_id = this%get_field_id()
     quadrature => face_accessor%get_quadrature()
     number_quadrature_points =  quadrature%get_number_quadrature_points()
     face_integrator => face_accessor%get_face_integrator(field_id)

     do icell_around=1, face_accessor%get_num_cells_around()

        this%quadrature_points_permutation(icell_around)%p => &
             face_integrator%get_current_qpoints_perm(icell_around)

        call face_accessor%get_cell_around(icell_around, fe)

        reference_fe => fe%get_reference_fe(field_id)  
        number_nodes_field =  reference_fe%get_number_shape_functions()  

        call this%set_current_number_quadrature_points( icell_around, number_quadrature_points )
        call this%set_current_number_nodes( icell_around, number_nodes_field )  

        nodal_values => this%get_nodal_values(icell_around)
        call this%cell_fe_function(icell_around)%move_alloc_values_out(quadrature_points_values) 
        call this%cell_fe_function(icell_around)%move_alloc_gradients_out(quadrature_points_gradients) 

        ! Gather DoFs of current cell + field_id on nodal_values 
        call fe_function%gather_nodal_values(fe, field_id, nodal_values)

        ! Evaluate values and gradients at quadrature points
        call face_integrator%evaluate_fe_function ( icell_around, &
             nodal_values, & 
             quadrature_points_values )

        call face_integrator%evaluate_gradient_fe_function ( icell_around, &
             nodal_values, & 
             quadrature_points_gradients )
        
        call this%cell_fe_function(icell_around)%move_alloc_values_in(quadrature_points_values) 
        call this%cell_fe_function(icell_around)%move_alloc_gradients_in(quadrature_points_gradients) 
     end do

  end if
  
end subroutine face_fe_function_vector_update


!===============================================================================================
function face_fe_function_vector_get_field_id ( this )
  implicit none
  class(face_fe_function_vector_t), intent(in) :: this 
  integer(ip) :: face_fe_function_vector_get_field_id
  face_fe_function_vector_get_field_id = this%cell_fe_function(1)%get_field_id()
end function face_fe_function_vector_get_field_id

!===============================================================================================
function face_fe_function_vector_get_nodal_values ( this, ineigh ) 
  implicit none
  class(face_fe_function_vector_t), intent(in) :: this 
  integer(ip)                     , intent(in) :: ineigh
  real(rp), pointer :: face_fe_function_vector_get_nodal_values(:)
  assert ( ineigh == 1 .or. (ineigh == 2 .and. .not. this%is_boundary) )
  face_fe_function_vector_get_nodal_values => this%cell_fe_function(ineigh)%get_nodal_values()
end function face_fe_function_vector_get_nodal_values

!===============================================================================================
function face_fe_function_vector_get_quadrature_points_values ( this, ineigh )
  implicit none
  class(face_fe_function_vector_t), intent(in) :: this 
  integer(ip)                     , intent(in) :: ineigh
  type(vector_field_t), pointer :: face_fe_function_vector_get_quadrature_points_values(:)
  assert ( ineigh == 1 .or. (ineigh == 2 .and. .not. this%is_boundary) )
  face_fe_function_vector_get_quadrature_points_values => this%cell_fe_function(ineigh)%get_quadrature_points_values()
end function face_fe_function_vector_get_quadrature_points_values

!===============================================================================================
function face_fe_function_vector_get_quadrature_points_gradients ( this, ineigh )
  implicit none
  class(face_fe_function_vector_t), intent(in) :: this 
  integer(ip)                     , intent(in) :: ineigh
  type(tensor_field_t), pointer :: face_fe_function_vector_get_quadrature_points_gradients(:)
  assert ( ineigh == 1 .or. (ineigh == 2 .and. .not. this%is_boundary) )
  face_fe_function_vector_get_quadrature_points_gradients => this%cell_fe_function(ineigh)%get_quadrature_points_gradients()
end function face_fe_function_vector_get_quadrature_points_gradients

!===============================================================================================
subroutine face_fe_function_vector_get_value ( this, point, ineigh, value )
  implicit none
  class(face_fe_function_vector_t), intent(in)    :: this 
  integer(ip)                     , intent(in)    :: point
  integer(ip)                     , intent(in)    :: ineigh
  type(vector_field_t)            , intent(inout) :: value
  integer(ip) :: actual_point
  assert ( ineigh == 1 .or. (ineigh == 2 .and. .not. this%is_boundary) )
  actual_point = this%quadrature_points_permutation(ineigh)%p(point)
  call this%cell_fe_function(ineigh)%get_value(actual_point, value)
end subroutine face_fe_function_vector_get_value

!===============================================================================================
subroutine face_fe_function_vector_get_gradient ( this, point, ineigh, value )
  implicit none
  class(face_fe_function_vector_t), intent(in)    :: this 
  integer(ip)                     , intent(in)    :: point
  integer(ip)                     , intent(in)    :: ineigh
  type(tensor_field_t)            , intent(inout) :: value
  integer(ip) :: actual_point
  assert ( ineigh == 1 .or. (ineigh == 2 .and. .not. this%is_boundary) )
  actual_point = this%quadrature_points_permutation(ineigh)%p(point)
  call this%cell_fe_function(ineigh)%get_gradient(actual_point, value)
end subroutine face_fe_function_vector_get_gradient

!===============================================================================================
subroutine face_fe_function_vector_set_current_number_nodes ( this, ineigh, value )
  implicit none
  class(face_fe_function_vector_t), intent(inout) :: this 
  integer(ip)                     , intent(in)    :: ineigh
  integer(ip)                     , intent(in)    :: value
  assert ( ineigh == 1 .or. (ineigh == 2 .and. .not. this%is_boundary) )
  call this%cell_fe_function(ineigh)%set_current_number_nodes(value)
end subroutine face_fe_function_vector_set_current_number_nodes

!===============================================================================================
subroutine face_fe_function_vector_set_current_number_quadrature_points ( this, ineigh, value )
  implicit none
  class(face_fe_function_vector_t), intent(inout) :: this 
  integer(ip)                     , intent(in)    :: ineigh
  integer(ip)                     , intent(in)    :: value
  assert ( ineigh == 1 .or. (ineigh == 2 .and. .not. this%is_boundary) )
  call this%cell_fe_function(ineigh)%set_current_number_quadrature_points(value)
end subroutine face_fe_function_vector_set_current_number_quadrature_points

!===============================================================================================
subroutine face_fe_function_vector_free ( this )
  implicit none
  class(face_fe_function_vector_t), intent(inout) :: this
  this%is_boundary = .false.
  nullify(this%quadrature_points_permutation(1)%p)
  nullify(this%quadrature_points_permutation(2)%p)
  call this%cell_fe_function(1)%free()
  call this%cell_fe_function(2)%free()
end subroutine face_fe_function_vector_free

!**************************************************************************************************
! Methods associated to face_fe_function_tensor_t
!**************************************************************************************************

!===============================================================================================
subroutine face_fe_function_tensor_create ( this, fe_space, field_id )
  implicit none
  class(face_fe_function_tensor_t), intent(inout) :: this 
  class(serial_fe_space_t)        , intent(in)    :: fe_space
  integer(ip)                     , intent(in)    :: field_id
  call this%free()
  call this%cell_fe_function(1)%create(fe_space, field_id)
  call this%cell_fe_function(2)%create(fe_space, field_id)
end subroutine face_fe_function_tensor_create


!==================================================================================================
subroutine face_fe_function_tensor_update ( this, face_accessor, fe_function )
  implicit none
  class(face_fe_function_tensor_t), intent(inout) :: this
  type(fe_face_accessor_t)        , intent(in)    :: face_accessor
  type(fe_function_t)             , intent(in)    :: fe_function
  
  integer(ip)                      :: inode, field_id, block_id
  integer(ip)                      :: number_nodes_field, number_quadrature_points
  integer(ip)                      :: icell_around
  type(fe_accessor_t)              :: fe
  class(reference_fe_t)      , pointer     :: reference_fe
  type(quadrature_t)         , pointer     :: quadrature
  type(face_integrator_t)    , pointer     :: face_integrator
  real(rp)                   , pointer     :: nodal_values(:)
  type(tensor_field_t)       , allocatable :: quadrature_points_values(:)
  class(environment_t)       , pointer     :: environment
  class(serial_fe_space_t)   , pointer     :: serial_fe_space  
  
  
  serial_fe_space => face_accessor%get_fe_space()
  environment     => serial_fe_space%get_environment()
  if ( environment%am_i_l1_task() ) then

     this%is_boundary = face_accessor%is_at_boundary()

     field_id = this%get_field_id()
     quadrature => face_accessor%get_quadrature()
     number_quadrature_points =  quadrature%get_number_quadrature_points()
     face_integrator => face_accessor%get_face_integrator(field_id)

     do icell_around=1, face_accessor%get_num_cells_around()

        this%quadrature_points_permutation(icell_around)%p => &
             face_integrator%get_current_qpoints_perm(icell_around)

        call face_accessor%get_cell_around(icell_around, fe)

        reference_fe => fe%get_reference_fe(field_id)  
        number_nodes_field =  reference_fe%get_number_shape_functions()  

        call this%set_current_number_quadrature_points( icell_around, number_quadrature_points )
        call this%set_current_number_nodes( icell_around, number_nodes_field )  

        nodal_values => this%get_nodal_values(icell_around)
        call this%cell_fe_function(icell_around)%move_alloc_values_out(quadrature_points_values) 

        ! Gather DoFs of current cell + field_id on nodal_values 
        call fe_function%gather_nodal_values(fe, field_id, nodal_values)

        ! Evaluate values and gradients at quadrature points
        call face_integrator%evaluate_fe_function ( icell_around, &
                                                    nodal_values, & 
                                                    quadrature_points_values )
        
        call this%cell_fe_function(icell_around)%move_alloc_values_in(quadrature_points_values)
     end do
  end if
  
end subroutine face_fe_function_tensor_update

!===============================================================================================
function face_fe_function_tensor_get_field_id ( this )
  implicit none
  class(face_fe_function_tensor_t), intent(in) :: this 
  integer(ip) :: face_fe_function_tensor_get_field_id
  face_fe_function_tensor_get_field_id = this%cell_fe_function(1)%get_field_id()
end function face_fe_function_tensor_get_field_id

!===============================================================================================
function face_fe_function_tensor_get_nodal_values ( this, ineigh ) 
  implicit none
  class(face_fe_function_tensor_t), intent(in) :: this 
  integer(ip)                     , intent(in) :: ineigh
  real(rp), pointer :: face_fe_function_tensor_get_nodal_values(:)
  assert ( ineigh == 1 .or. (ineigh == 2 .and. .not. this%is_boundary) )
  face_fe_function_tensor_get_nodal_values => this%cell_fe_function(ineigh)%get_nodal_values()
end function face_fe_function_tensor_get_nodal_values

!===============================================================================================
function face_fe_function_tensor_get_quadrature_points_values ( this, ineigh )
  implicit none
  class(face_fe_function_tensor_t), intent(in) :: this 
  integer(ip)                     , intent(in) :: ineigh
  type(tensor_field_t), pointer :: face_fe_function_tensor_get_quadrature_points_values(:)
  assert ( ineigh == 1 .or. (ineigh == 2 .and. .not. this%is_boundary) )
  face_fe_function_tensor_get_quadrature_points_values => this%cell_fe_function(ineigh)%get_quadrature_points_values()
end function face_fe_function_tensor_get_quadrature_points_values

!===============================================================================================
subroutine face_fe_function_tensor_get_value ( this, point, ineigh, value )
  implicit none
  class(face_fe_function_tensor_t), intent(in)    :: this 
  integer(ip)                     , intent(in)    :: point
  integer(ip)                     , intent(in)    :: ineigh
  type(tensor_field_t)            , intent(inout) :: value
  integer(ip) :: actual_point
  assert ( ineigh == 1 .or. (ineigh == 2 .and. .not. this%is_boundary) )
  actual_point = this%quadrature_points_permutation(ineigh)%p(point)
  call this%cell_fe_function(ineigh)%get_value(actual_point, value)
end subroutine face_fe_function_tensor_get_value

!===============================================================================================
subroutine face_fe_function_tensor_set_current_number_nodes ( this, ineigh, value )
  implicit none
  class(face_fe_function_tensor_t), intent(inout) :: this 
  integer(ip)                     , intent(in)    :: ineigh
  integer(ip)                     , intent(in)    :: value
  assert ( ineigh == 1 .or. (ineigh == 2 .and. .not. this%is_boundary) )
  call this%cell_fe_function(ineigh)%set_current_number_nodes(value)
end subroutine face_fe_function_tensor_set_current_number_nodes

!===============================================================================================
subroutine face_fe_function_tensor_set_current_number_quadrature_points ( this, ineigh, value )
  implicit none
  class(face_fe_function_tensor_t), intent(inout) :: this 
  integer(ip)                     , intent(in)    :: ineigh
  integer(ip)                     , intent(in)    :: value
  assert ( ineigh == 1 .or. (ineigh == 2 .and. .not. this%is_boundary) )
  call this%cell_fe_function(ineigh)%set_current_number_quadrature_points(value)
end subroutine face_fe_function_tensor_set_current_number_quadrature_points

!===============================================================================================
subroutine face_fe_function_tensor_free ( this )
  implicit none
  class(face_fe_function_tensor_t), intent(inout) :: this
  this%is_boundary = .false.
  nullify(this%quadrature_points_permutation(1)%p)
  nullify(this%quadrature_points_permutation(2)%p)
  call this%cell_fe_function(1)%free()
  call this%cell_fe_function(2)%free()
end subroutine face_fe_function_tensor_free

