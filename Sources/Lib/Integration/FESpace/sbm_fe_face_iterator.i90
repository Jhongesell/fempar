! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

subroutine fe_face_iterator_create ( this, fe_space, vef )
  implicit none
  class(fe_face_iterator_t), target, intent(inout) :: this
  class(serial_fe_space_t) , target, intent(in)    :: fe_space
  class(vef_iterator_t)    , intent(in)            :: vef
  call this%free()
  call this%fe_vef_iterator_t%create(fe_space,vef)
  call this%fe_space%create_fe_iterator(this%fe)
  call this%first()
end subroutine fe_face_iterator_create

subroutine fe_face_iterator_free ( this )
  implicit none
  class(fe_face_iterator_t) , intent(inout)      :: this
  integer(ip) :: istat
  call this%fe_vef_iterator_t%free()
  if (allocated(this%fe)) then
    call this%fe%free()
    deallocate(this%fe, stat=istat); check(istat==0);
  end if
  this%face_lid = -1
end subroutine fe_face_iterator_free

subroutine fe_face_iterator_first ( this )
  implicit none
  class(fe_face_iterator_t) , intent(inout)      :: this
  this%face_lid = 1
  if ( .not. this%has_finished() ) then
    call this%base_fe_vef_iterator_t%set_lid( &
      this%fe_space%vef_lids_of_fe_faces%get(this%face_lid) )
  end if
end subroutine fe_face_iterator_first

subroutine fe_face_iterator_next ( this )
  implicit none
  class(fe_face_iterator_t) , intent(inout)      :: this
  this%face_lid = this%face_lid + 1
  if ( .not. this%has_finished() ) then
    call this%base_fe_vef_iterator_t%set_lid( &
      this%fe_space%vef_lids_of_fe_faces%get(this%face_lid) )
  end if
end subroutine fe_face_iterator_next

function fe_face_iterator_has_finished ( this )
  implicit none
  class(fe_face_iterator_t) , intent(in)         :: this
  logical :: fe_face_iterator_has_finished
  fe_face_iterator_has_finished = ( this%face_lid > this%fe_space%vef_lids_of_fe_faces%size() )
end function fe_face_iterator_has_finished

subroutine fe_face_iterator_set_lid ( this, lid )
  implicit none
  class(fe_face_iterator_t), intent(inout) :: this
  integer(ip)              , intent(in)    :: lid
  assert ( lid >= 1 .and. lid <= this%fe_space%vef_lids_of_fe_faces%size() )
  this%face_lid = lid
  call this%base_fe_vef_iterator_t%set_lid(this%fe_space%vef_lids_of_fe_faces%get(lid))
end subroutine fe_face_iterator_set_lid

function fe_face_iterator_get_lid (this) result(face_lid)
  implicit none
  class(fe_face_iterator_t), intent(in)    :: this
  integer(ip) :: face_lid
  face_lid = this%face_lid
end function fe_face_iterator_get_lid

subroutine fe_face_iterator_update_integration( this )
  implicit none
  class(fe_face_iterator_t), intent(inout) :: this 
  integer(ip)                      :: icell_around, field_id
  integer(ip)                      :: face_lpos_within_cells_around(2)
  integer(ip)                      :: subface_lid_within_cells_around(2)
  type(point_t)          , pointer :: coords(:)
  type(quadrature_t)     , pointer :: quadrature
  type(face_maps_t)       , pointer :: face_map
  type(face_integrator_t), pointer :: face_integrator
  
  class(lagrangian_reference_fe_t), pointer :: reference_fe_geo
 
  quadrature => this%get_quadrature()
  face_map   => this%get_face_maps()
  
  coords => face_map%get_face_coordinates()
  call this%get_coordinates(coords)

  do icell_around=1, this%get_num_cells_around()
    call this%get_cell_around(icell_around,this%fe)  
    reference_fe_geo => this%fe%get_reference_fe_geo()
    face_lpos_within_cells_around(icell_around) = &
      this%get_lpos_within_cell_around(icell_around) - reference_fe_geo%get_first_face_id() + 1
    subface_lid_within_cells_around(icell_around) = this%get_subface_lid_cell_around(icell_around)
    coords => face_map%get_coordinates_neighbour(icell_around,                                &
                                                 face_lpos_within_cells_around(icell_around), &
                                                 subface_lid_within_cells_around(icell_around))
    call this%fe%get_coordinates(coords)    
  end do

  call this%get_cell_around(1, this%fe)
  reference_fe_geo => this%fe%get_reference_fe_geo()
  
  call face_map%update(face_lpos_within_cells_around,   &
                       subface_lid_within_cells_around, &
                       quadrature,                      &
                       reference_fe_geo)
  
  do field_id = 1, this%fe_space%get_number_fields()
     face_integrator => this%get_face_integrator(field_id)
     call face_integrator%update(face_lpos_within_cells_around,   &
                                 subface_lid_within_cells_around, &
                                 this%get_face_maps(),            &
                                 this%get_face_permutation_index())
  end do
end subroutine fe_face_iterator_update_integration

function fe_face_iterator_get_fe_space(this)
  implicit none
  class(fe_face_iterator_t), target, intent(in) :: this
  class(serial_fe_space_t), pointer :: fe_face_iterator_get_fe_space
  fe_face_iterator_get_fe_space => this%fe_space
end function fe_face_iterator_get_fe_space

!==================================================================================================
subroutine fe_face_iterator_assemble(this,facemat,facevec,matrix_array_assembler)
  implicit none
  class(fe_face_iterator_t)       , intent(in)    :: this
  real(rp)                        , intent(in)    :: facemat(:,:,:,:)
  real(rp)                        , intent(in)    :: facevec(:,:)
  class(matrix_array_assembler_t) , intent(inout) :: matrix_array_assembler
  check(.false.)
end subroutine fe_face_iterator_assemble 

!==================================================================================================
subroutine fe_face_iterator_get_elem2dof(this, icell_around, elem2dof)
  implicit none
  class(fe_face_iterator_t), target, intent(inout)  :: this
  integer(ip)                      , intent(in)     :: icell_around
  type(i1p_t)                      , intent(out)    :: elem2dof(:)
  call this%get_cell_around(icell_around, this%fe)
  call this%fe%get_elem2dof(elem2dof)
end subroutine fe_face_iterator_get_elem2dof

!==================================================================================================
function fe_face_iterator_get_quadrature_degree ( this )
  implicit none
  class(fe_face_iterator_t), intent(in) :: this
  integer(ip) :: fe_face_iterator_get_quadrature_degree
  if ( allocated(this%fe_space%fe_face_quadratures_degree) ) then
     fe_face_iterator_get_quadrature_degree = this%fe_space%fe_face_quadratures_degree(this%face_lid)
  end if
  if ( .not. allocated(this%fe_space%fe_face_quadratures_degree) .or. &
       fe_face_iterator_get_quadrature_degree == fe_space_default_quadrature_degree_flag ) then
     fe_face_iterator_get_quadrature_degree = this%get_default_quadrature_degree()
  end if
end function fe_face_iterator_get_quadrature_degree

!==================================================================================================
function fe_face_iterator_get_default_quadrature_degree ( this )
  implicit none
  class(fe_face_iterator_t), intent(in) :: this
  integer(ip) :: fe_face_iterator_get_default_quadrature_degree
  integer(ip) :: reference_fe_id
  assert( allocated(this%fe_space%max_order_reference_fe_id_per_fe_face) )
  reference_fe_id = this%fe_space%max_order_reference_fe_id_per_fe_face(this%face_lid)
  fe_face_iterator_get_default_quadrature_degree = & 
    this%fe_space%reference_fes(reference_fe_id)%p%get_default_quadrature_degree()
end function fe_face_iterator_get_default_quadrature_degree

!==================================================================================================
subroutine fe_face_iterator_set_quadrature_degree ( this, quadrature_degree )
  implicit none
  class(fe_face_iterator_t), intent(inout) :: this
  integer(ip)              , intent(in)    :: quadrature_degree
  assert ( quadrature_degree >= -1 )
  if ( .not. allocated ( this%fe_space%fe_face_quadratures_degree) ) then
     call this%fe_space%allocate_fe_face_quadratures_degree()
     call this%fe_space%clear_fe_face_quadratures_degree()
  end if
  this%fe_space%fe_face_quadratures_degree(this%face_lid) = quadrature_degree
end subroutine fe_face_iterator_set_quadrature_degree

!=================================================================================================
function fe_face_iterator_get_quadrature ( this )
  implicit none
  class(fe_face_iterator_t), intent(inout) :: this
  type(quadrature_t), pointer :: fe_face_iterator_get_quadrature
  
  integer(ip) :: icell_around, istat
  integer(ip) :: fe_face_quadratures_position_key
  integer(ip) :: fe_face_quadratures_position
  integer(ip) :: reference_fes_geo_id(2)
   
  reference_fes_geo_id(2) = 0 
  do icell_around = 1, this%get_num_cells_around()
     call this%get_cell_around(icell_around, this%fe)
     reference_fes_geo_id(icell_around) = this%fe%get_reference_fe_geo_id()
  end do
  
  fe_face_quadratures_position_key = &
       this%fe_space%generate_fe_face_quadratures_position_key(this%get_quadrature_degree(), &
                                                               reference_fes_geo_id(1), &
                                                               reference_fes_geo_id(2) )
       
  call this%fe_space%fe_face_quadratures_position%get(key=fe_face_quadratures_position_key, &
                                                      val=fe_face_quadratures_position, &
                                                      stat=istat)
  assert ( .not. istat == key_not_found )
  fe_face_iterator_get_quadrature => this%fe_space%fe_face_quadratures(fe_face_quadratures_position)
end function fe_face_iterator_get_quadrature

!==================================================================================================
function fe_face_iterator_get_face_map(this)
  implicit none
  class(fe_face_iterator_t), intent(inout) :: this
  type(face_maps_t)         , pointer    :: fe_face_iterator_get_face_map
  integer(ip)                           :: icell_around, istat
  integer(ip)                           :: fe_face_maps_position_key
  integer(ip)                           :: fe_face_maps_position
  integer(ip)                           :: reference_fes_geo_id(2)
   
  reference_fes_geo_id(2) = 0 
  do icell_around = 1, this%get_num_cells_around()
     call this%get_cell_around(icell_around, this%fe)
     reference_fes_geo_id(icell_around) = this%fe%get_reference_fe_geo_id()
  end do
  
  fe_face_maps_position_key = &
       this%fe_space%generate_fe_face_quadratures_position_key(this%get_quadrature_degree(), &
                                                               reference_fes_geo_id(1), &
                                                               reference_fes_geo_id(2) )
       
  call this%fe_space%fe_face_quadratures_position%get(key=fe_face_maps_position_key, &
                                                      val=fe_face_maps_position, &
                                                      stat=istat)
  assert ( .not. istat == key_not_found )
  fe_face_iterator_get_face_map => this%fe_space%fe_face_maps(fe_face_maps_position)
end function fe_face_iterator_get_face_map

!==================================================================================================
function fe_face_iterator_get_face_integrator(this, field_id)
  implicit none
  class(fe_face_iterator_t), intent(inout) :: this
  integer(ip)              , intent(in)    :: field_id
  type(face_integrator_t)  , pointer    :: fe_face_iterator_get_face_integrator
  integer(ip)                           :: icell_around, istat
  integer(ip)                           :: fe_face_integrators_position_key
  integer(ip)                           :: fe_face_integrators_position
  integer(ip)                           :: reference_fes_id(2)
  
  assert ( field_id >= 1 .and. field_id <= this%fe_space%get_number_fields() )
 
  reference_fes_id(2) = 0 
  do icell_around = 1, this%get_num_cells_around()
     call this%get_cell_around(icell_around, this%fe)
     reference_fes_id(icell_around) = this%fe_space%reference_fe_id_per_fe(field_id, this%fe%get_lid())
  end do
  
  fe_face_integrators_position_key = &
       this%fe_space%generate_fe_face_integrators_position_key(this%get_quadrature_degree(), &
                                                               reference_fes_id(1), &
                                                               reference_fes_id(2) )
       
  call this%fe_space%fe_face_integrators_position%get(key=fe_face_integrators_position_key, &
                                                      val=fe_face_integrators_position, &
                                                      stat=istat)
  assert ( .not. istat == key_not_found )
  
  fe_face_iterator_get_face_integrator => this%fe_space%fe_face_integrators(fe_face_integrators_position)
end function fe_face_iterator_get_face_integrator

!==================================================================================================
subroutine fe_face_iterator_impose_strong_dirichlet_bcs ( this, facemat, facevec )
 implicit none
 class(fe_face_iterator_t), intent(inout) :: this
 real(rp)                 , intent(in)    :: facemat(:,:,:,:)
 real(rp)                 , intent(inout) :: facevec(:,:)  
 integer(ip)                              :: idof,ineigh,jneigh, elmat_col, field_id,spos
 real(rp), pointer                        :: strong_dirichlet_values_entries(:)
 class(reference_fe_t), pointer           :: reference_fe

 do ineigh = 1,this%get_num_cells_around()
    do jneigh = 1,this%get_num_cells_around()
       call this%get_cell_around(jneigh, this%fe)
       strong_dirichlet_values_entries => this%fe_space%strong_dirichlet_values%get_entries()
       elmat_col = 0
       do field_id = 1, this%fe_space%get_number_fields()
          reference_fe => this%fe%get_reference_fe(field_id)
          spos = this%fe_space%ptr_dofs_per_fe(field_id, this%fe%get_lid())
          do idof = 1, reference_fe%get_number_shape_functions()
             elmat_col = elmat_col + 1
             if ( this%fe_space%lst_dofs_lids(spos+idof-1) < 0 ) then
                facevec(:,ineigh) = facevec(:,ineigh) - facemat(:,elmat_col,ineigh,jneigh)* &
                     &              strong_dirichlet_values_entries(-this%fe_space%lst_dofs_lids(spos+idof-1))
             end if
          end do
       end do
    end do
 end do
 
end subroutine fe_face_iterator_impose_strong_dirichlet_bcs

!==================================================================================================
function fe_face_iterator_compute_surface ( this )
  implicit none
  class(fe_face_iterator_t), intent(inout) :: this
  real(rp)                         :: fe_face_iterator_compute_surface
  integer(ip) :: qpoin,number_quadrature_points
  type(face_maps_t)  , pointer :: face_map
  type(quadrature_t), pointer :: quad
  
  face_map => this%get_face_maps()
  quad     => this%get_quadrature()
  number_quadrature_points = quad%get_number_quadrature_points()
  
  fe_face_iterator_compute_surface = 0.0_rp
  do qpoin = 1, number_quadrature_points
     fe_face_iterator_compute_surface = fe_face_iterator_compute_surface + &
          &                        face_map%get_det_jacobian(qpoin) * &
          &                        quad%get_weight(qpoin)
  end do
  
end function fe_face_iterator_compute_surface

function fe_face_iterator_compute_face_permutation_index (this,first_fe,second_fe) result (face_permutation_index)
  implicit none
  class(fe_face_iterator_t), intent(inout) :: this
  class(fe_iterator_t)     , intent(inout) :: first_fe
  class(fe_iterator_t)     , intent(inout) :: second_fe
  integer(ip)                              :: face_permutation_index
  class(lagrangian_reference_fe_t), pointer     :: first_reference_fe_geo
  class(lagrangian_reference_fe_t), pointer     :: second_reference_fe_geo
  assert( .not. this%is_ghost() .and. this%get_num_cells_around() == 2 )
  call this%get_cell_around(1,first_fe)
  first_reference_fe_geo => first_fe%get_reference_fe_geo()
  call this%get_cell_around(2,second_fe)
  second_reference_fe_geo => second_fe%get_reference_fe_geo()
  face_permutation_index = &
    first_reference_fe_geo%compute_permutation_index( second_reference_fe_geo,             &
                                                      this%get_lpos_within_cell_around(1), &
                                                      this%get_lpos_within_cell_around(2), &
                                                      first_fe%get_vef_lids(),             &
                                                      second_fe%get_vef_lids() )
end function fe_face_iterator_compute_face_permutation_index

function fe_face_iterator_get_face_permutation_index ( this ) result(face_permutation_index)
  implicit none
  class(fe_face_iterator_t), intent(in) :: this
  integer(ip)                           :: face_permutation_index
  face_permutation_index = this%fe_space%face_permutation_indices%get(this%face_lid)
end function fe_face_iterator_get_face_permutation_index 

function fe_face_iterator_get_lpos_within_cell_around(this, icell_around) result(face_lpos_within_cell_around)
  implicit none
  class(fe_face_iterator_t) , intent(inout) :: this
  integer(ip)               , intent(in)    :: icell_around
  integer(ip)                               :: face_lpos_within_cell_around
  class(lagrangian_reference_fe_t), pointer :: reference_fe_geo
  integer(ip)                               :: vef_lid_of_face
  assert ( allocated(this%fe) )
  call this%get_cell_around(icell_around, this%fe)
  reference_fe_geo => this%fe%get_reference_fe_geo()
  vef_lid_of_face = this%base_fe_vef_iterator_t%get_lid()
  assert ( this%fe%find_lpos_vef_lid (vef_lid_of_face) /= -1 )
  face_lpos_within_cell_around = this%fe%find_lpos_vef_lid(vef_lid_of_face)
end function fe_face_iterator_get_lpos_within_cell_around

function fe_face_iterator_get_subface_lid_cell_around ( this, icell_around ) result( subface_lid )
  implicit none
  class(fe_face_iterator_t), intent(in) :: this
  integer(ip)              , intent(in) :: icell_around
  integer(ip)                           :: subface_lid
  subface_lid = 0
end function fe_face_iterator_get_subface_lid_cell_around 
