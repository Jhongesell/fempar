! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine fe_faces_on_object_iterator_create ( this, lid, fe_space ) 
  implicit none
  class(fe_faces_on_object_iterator_t), intent(inout) :: this
  integer(ip)                         , intent(in)    :: lid
  type(par_fe_space_t)                , intent(in)    :: fe_space
  call this%free()
  call this%vefs_on_object_iterator%create(lid, fe_space%triangulation)
  call fe_space%triangulation%create_vef_accessor(this%vef)
end subroutine fe_faces_on_object_iterator_create

subroutine fe_faces_on_object_iterator_free ( this ) 
  implicit none
  class(fe_faces_on_object_iterator_t), intent(inout) :: this
  call this%vefs_on_object_iterator%free()
  call this%vef%free()
end subroutine fe_faces_on_object_iterator_free

subroutine fe_faces_on_object_iterator_init ( this ) 
  implicit none
  class(fe_faces_on_object_iterator_t), intent(inout) :: this
  class(base_static_triangulation_t), pointer :: triangulation
  triangulation => this%vef%get_triangulation()
  call this%vefs_on_object_iterator%init()
  do while ( .not. this%vefs_on_object_iterator%has_finished() )
     call this%vefs_on_object_iterator%current(this%vef)
     if ( this%vef%get_dimension() /= triangulation%get_num_dimensions()-1) then
         call this%vefs_on_object_iterator%next()
     end if
  end do
end subroutine fe_faces_on_object_iterator_init

subroutine fe_faces_on_object_iterator_next ( this ) 
  implicit none
  class(fe_faces_on_object_iterator_t), intent(inout) :: this
  class(base_static_triangulation_t), pointer :: triangulation
  triangulation => this%vef%get_triangulation()
  call this%vefs_on_object_iterator%next()
  do while ( .not. this%vefs_on_object_iterator%has_finished() )
     call this%vefs_on_object_iterator%current(this%vef)
     if ( this%vef%get_dimension() /= triangulation%get_num_dimensions()-1) then
         call this%vefs_on_object_iterator%next()
     end if
  end do
end subroutine fe_faces_on_object_iterator_next

function fe_faces_on_object_iterator_has_finished ( this ) 
  implicit none
  class(fe_faces_on_object_iterator_t), intent(in) :: this
  logical                                      :: fe_faces_on_object_iterator_has_finished
  fe_faces_on_object_iterator_has_finished = this%vefs_on_object_iterator%has_finished()
end function fe_faces_on_object_iterator_has_finished

subroutine fe_faces_on_object_iterator_current ( this, fe_face ) 
  implicit none
  class(fe_faces_on_object_iterator_t), intent(in)    :: this
  type(fe_face_accessor_t)            , intent(inout) :: fe_face
  call fe_face%set_lid(this%vef%get_lid())
end subroutine fe_faces_on_object_iterator_current
