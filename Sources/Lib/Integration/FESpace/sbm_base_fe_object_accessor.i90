! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine base_fe_object_accessor_first(this)
  implicit none
  class(base_fe_object_accessor_t), intent(inout) :: this
  call this%object%first()
end subroutine base_fe_object_accessor_first

subroutine base_fe_object_accessor_next(this)
  implicit none
  class(base_fe_object_accessor_t), intent(inout) :: this
  call this%object%next()
end subroutine base_fe_object_accessor_next

subroutine base_fe_object_accessor_set_lid(this, lid)
  implicit none
  class(base_fe_object_accessor_t), intent(inout) :: this
  integer(ip)             , intent(in)    :: lid
  call this%object%set_lid(lid)
end subroutine base_fe_object_accessor_set_lid

function base_fe_object_accessor_past_the_end(this)
  implicit none
  class(base_fe_object_accessor_t), intent(in) :: this
  logical :: base_fe_object_accessor_past_the_end
  base_fe_object_accessor_past_the_end = this%object%past_the_end()
end function base_fe_object_accessor_past_the_end

function base_fe_object_accessor_get_lid (this)
  implicit none
  class(base_fe_object_accessor_t), intent(in) :: this
  integer(ip) :: base_fe_object_accessor_get_lid
  base_fe_object_accessor_get_lid = this%object%get_lid()
end function base_fe_object_accessor_get_lid

function base_fe_object_accessor_get_gid (this)
  implicit none
  class(base_fe_object_accessor_t), intent(in) :: this
  integer(igp) :: base_fe_object_accessor_get_gid
  base_fe_object_accessor_get_gid = this%object%get_gid()
end function base_fe_object_accessor_get_gid

function base_fe_object_accessor_get_dimension (this)
  implicit none
  class(base_fe_object_accessor_t), intent(in) :: this
  integer(igp) :: base_fe_object_accessor_get_dimension
  base_fe_object_accessor_get_dimension = this%object%get_dimension()
end function base_fe_object_accessor_get_dimension

function base_fe_object_accessor_get_number_parts_around(this)
  implicit none
  class(base_fe_object_accessor_t), intent(in) :: this
  integer(ip) :: base_fe_object_accessor_get_number_parts_around
  base_fe_object_accessor_get_number_parts_around = this%object%get_number_parts_around()
end function base_fe_object_accessor_get_number_parts_around

function base_fe_object_accessor_get_number_subparts_around(this)
  implicit none
  class(base_fe_object_accessor_t), intent(in) :: this
  integer(ip) :: base_fe_object_accessor_get_number_subparts_around
  base_fe_object_accessor_get_number_subparts_around = this%object%get_number_subparts_around()
end function base_fe_object_accessor_get_number_subparts_around

function base_fe_object_accessor_create_parts_around_iterator(this)
  implicit none
  class(base_fe_object_accessor_t), intent(in) :: this
  type(list_iterator_t) :: base_fe_object_accessor_create_parts_around_iterator
  base_fe_object_accessor_create_parts_around_iterator = this%object%create_parts_around_iterator()
end function base_fe_object_accessor_create_parts_around_iterator

function base_fe_object_accessor_create_subparts_around_iterator(this)
  implicit none
  class(base_fe_object_accessor_t), intent(in) :: this
  type(list_iterator_t) :: base_fe_object_accessor_create_subparts_around_iterator
  base_fe_object_accessor_create_subparts_around_iterator = this%object%create_subparts_around_iterator()
end function base_fe_object_accessor_create_subparts_around_iterator

function base_fe_object_accessor_get_num_vefs(this)
  implicit none
  class(base_fe_object_accessor_t), intent(in) :: this
  integer(ip) :: base_fe_object_accessor_get_num_vefs
  base_fe_object_accessor_get_num_vefs = this%object%get_num_vefs()
end function base_fe_object_accessor_get_num_vefs

function base_fe_object_accessor_get_num_faces(this)
  implicit none
  class(base_fe_object_accessor_t), intent(in) :: this
  integer(ip) :: base_fe_object_accessor_get_num_faces
  base_fe_object_accessor_get_num_faces = this%object%get_num_faces()
end function base_fe_object_accessor_get_num_faces

subroutine base_fe_object_accessor_get_vef(this, ivef, vef)
  implicit none
  class(base_fe_object_accessor_t), intent(in)    :: this
  integer(ip)                     , intent(in)    :: ivef
  type(vef_accessor_t)            , intent(inout) :: vef
  call this%object%get_vef(ivef,vef)
end subroutine base_fe_object_accessor_get_vef

subroutine base_fe_object_accessor_get_face(this, iface, face)
  implicit none
  class(base_fe_object_accessor_t), intent(in)    :: this
  integer(ip)                     , intent(in)    :: iface
  type(face_accessor_t)           , intent(inout) :: face
  call this%object%get_face(iface,face)
end subroutine base_fe_object_accessor_get_face
