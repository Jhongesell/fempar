! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
subroutine make_interpolator( interpolator_type, topology, interpolator )  
  implicit none 
  character(*)                       , intent(in)    :: interpolator_type   
  character(*)                       , intent(in)    :: topology
  class(interpolator_t) , allocatable, intent(inout) :: interpolator
  integer(ip) :: istat
  
  assert ( interpolator_type == interpolator_type_H1 .or. interpolator_type == interpolator_type_Hcurl )
  assert ( topology == topology_hex .or. topology == topology_tet ) 
  if ( allocated(interpolator) ) then
      call interpolator%free()
      deallocate(interpolator,stat=istat); check (istat==0);
  end if
  
  if ( interpolator_type == interpolator_type_H1 ) then
    allocate ( H1_interpolator_t :: interpolator, stat=istat ); check(istat==0)  
  else if ( interpolator_type == interpolator_type_Hcurl  ) then
    if ( topology == topology_hex ) then
      allocate( hex_Hcurl_interpolator_t :: interpolator ) 
    else if ( topology == topology_tet ) then
      allocate( tet_Hcurl_interpolator_t :: interpolator )     
    end if
  end if
end subroutine make_interpolator

    subroutine interpolator_evaluate_scalar_function_moments (this, fe, scalar_function, dof_values, n_face_mask, time )
      implicit none
      class(interpolator_t)           , intent(inout) :: this
      class(fe_cell_iterator_t)       , intent(in)    :: fe
      class(scalar_function_t), target, intent(in)    :: scalar_function
      real(rp) , allocatable          , intent(inout) :: dof_values(:) 
      logical  , optional             , intent(in)    :: n_face_mask(:)
      real(rp) , optional             , intent(in)    :: time 
      type(p_scalar_function_t) :: scalar_function_single_component(1)
      class(reference_fe_t), pointer :: reference_fe
      scalar_function_single_component(1)%p => scalar_function
#ifdef DEBUG
      reference_fe => fe%get_reference_fe(this%field_id)
      if ( present(n_face_mask) ) then
        massert ( size(n_face_mask) == reference_fe%get_num_n_faces()+1, "evaluate_scalar_function_moments::n_face_mask is not of correct size" )
      end if
#endif
      call this%evaluate_function_scalar_components_moments(fe, scalar_function_single_component, dof_values, n_face_mask, time )
    end subroutine interpolator_evaluate_scalar_function_moments 

! ================================================================================
subroutine Hcurl_interpolator_evaluate_scalar_function_moments(this, fe, scalar_function, dof_values, n_face_mask, time ) 
     implicit none
      class(Hcurl_interpolator_t)           , intent(inout) :: this
      class(fe_cell_iterator_t)             , intent(in)    :: fe
      class(scalar_function_t), target      , intent(in)    :: scalar_function
      real(rp) , allocatable                , intent(inout) :: dof_values(:) 
      logical  , optional                   , intent(in)    :: n_face_mask(:)
      real(rp) , optional                   , intent(in)    :: time 
		! Does not apply for vector FEs
  assert(.false.) 
end subroutine Hcurl_interpolator_evaluate_scalar_function_moments
