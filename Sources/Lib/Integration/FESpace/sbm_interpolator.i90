! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
subroutine make_interpolator( interpolator_type, topology, interpolator )  
  implicit none 
  character(*)                       , intent(in)    :: interpolator_type   
  character(*)                       , intent(in)    :: topology
  class(interpolator_t) , allocatable, intent(inout) :: interpolator
  integer(ip) :: istat

  assert ( interpolator_type == interpolator_type_nodal .or. interpolator_type == interpolator_type_empty .or. interpolator_type == interpolator_type_Hcurl )
  assert ( topology == topology_hex .or. topology == topology_tet ) 
  if ( allocated(interpolator) ) then
     call interpolator%free()
     deallocate(interpolator,stat=istat); check (istat==0);
  end if

  if ( interpolator_type == interpolator_type_nodal ) then
     allocate ( nodal_interpolator_t :: interpolator, stat=istat ); check(istat==0)
  else if ( interpolator_type == interpolator_type_empty ) then
     allocate ( empty_interpolator_t :: interpolator, stat=istat ); check(istat==0)  
  else if ( interpolator_type == interpolator_type_Hcurl  ) then
     if ( topology == topology_hex ) then
        allocate( hex_Hcurl_interpolator_t :: interpolator ) 
     else if ( topology == topology_tet ) then
        allocate( tet_Hcurl_interpolator_t :: interpolator )     
     end if
  end if
end subroutine make_interpolator

! ================================================================================
subroutine interpolator_t_reallocate_vector_function_values( this, requested_size, function_values ) 
  implicit none 
  class(interpolator_t )            , intent(inout) :: this 
  integer(ip)                       , intent(in)    :: requested_size 
  type(vector_field_t), allocatable , intent(inout) :: function_values(:,:) 
  logical     :: reallocate 
  integer(ip) :: istat 

  reallocate = .false.
  if (allocated(function_values)) reallocate = ( size(function_values,1) < requested_size )                                      
  if ( (.not. allocated(function_values)) .or. reallocate) then
     if (allocated(function_values)) then 
        deallocate(function_values, stat=istat); check(istat==0) 
     end if
     allocate( function_values(requested_size,1), stat=istat ); check(istat==0) 
  end if

end subroutine interpolator_t_reallocate_vector_function_values

! ================================================================================
subroutine interpolator_t_reallocate_scalar_function_values( this, requested_size, function_values ) 
  implicit none 
  class(interpolator_t )            , intent(inout) :: this 
  integer(ip)                       , intent(in)    :: requested_size 
  real(rp)            , allocatable , intent(inout) :: function_values(:,:)
  logical     :: reallocate 

  reallocate = .false.
  if (allocated(function_values)) reallocate = ( size(function_values,1) < requested_size )                                      
  if ( (.not. allocated(function_values)) .or. reallocate) then
     if (allocated(function_values)) then 
        call memfree(function_values, __FILE__, __LINE__)
     end if
     call memalloc(requested_size, 1, function_values, __FILE__, __LINE__); 
  end if

end subroutine interpolator_t_reallocate_scalar_function_values

! ================================================================================
subroutine interpolator_t_reallocate_array( this, requested_size, array ) 
  implicit none 
  class(interpolator_t)             , intent(inout) :: this 
  integer(ip)                       , intent(in)    :: requested_size 
  real(rp)            , allocatable , intent(inout) :: array(:) 
  logical     :: reallocate 

  reallocate = .false.
  if (allocated(array)) reallocate = ( size(array) < requested_size )                                      
  if ( (.not. allocated(array)) .or. reallocate) then
     if (allocated(array)) call memfree(array, __FILE__,__LINE__); 
     call memalloc(requested_size, array, __FILE__,__LINE__);
  end if

end subroutine interpolator_t_reallocate_array

! ================================================================================
subroutine interpolator_t_get_vector_function_values( this, vector_function, quad_points_coordinates, function_values, time)
  implicit none 
  class(interpolator_t)          , intent(inout) :: this 
  class(vector_function_t)       , intent(in)    :: vector_function 
  type(point_t)                  , intent(in)    :: quad_points_coordinates(:)
  type(vector_field_t)           , intent(inout) :: function_values(:,:)
  real(rp)             , optional, intent(in)    :: time

  real(rp)    :: time_(1) 
  integer(ip) :: num_quad_points 

  num_quad_points = size(quad_points_coordinates) 

  if (present(time) ) then 
     time_(1) = time 
     call vector_function%get_values_set(quad_points_coordinates, time_, function_values(1:num_quad_points,1:1))
  else
     call vector_function%get_values_set(quad_points_coordinates, function_values(1:num_quad_points,1))
  end if

end subroutine interpolator_t_get_vector_function_values

! ================================================================================
subroutine interpolator_t_get_function_values_from_scalar_components( this, reference_fe, vef_lid, vector_function_scalar_components, & 
     quad_points_coordinates, function_values, scalar_function_values, time)
  implicit none 
  class(interpolator_t)          , intent(in)    :: this  
  class(reference_fe_t)          , intent(in)    :: reference_fe 
  integer(ip)                    , intent(in)    :: vef_lid 
  class(p_scalar_function_t)     , intent(in)    :: vector_function_scalar_components(:,:)
  type(point_t)                  , intent(in)    :: quad_points_coordinates(:)
  type(vector_field_t)           , intent(inout) :: function_values(:,:)
  real(rp)                       , intent(inout) :: scalar_function_values(:,:)
  real(rp)             , optional, intent(in)    :: time

  real(rp)    :: time_(1) 
  integer(ip) :: qpoint, icomp, num_quad_points 

  num_quad_points = size(quad_points_coordinates) 
  if (present(time)) time_(1) = time 

  select case(reference_fe%get_field_type())
  case ( field_type_scalar )
     ! reference_fe MUST BE a vector-valued FE
     assert (.false.)
  case ( field_type_vector )
     do icomp=1, reference_fe%get_num_field_components()
        if(present(time)) then
           call vector_function_scalar_components(icomp, vef_lid)%p%get_values_set_space_time(quad_points_coordinates,     & 
                time_,                       & 
                scalar_function_values(1:num_quad_points,:))
        else
           call vector_function_scalar_components(icomp, vef_lid)%p%get_values_set_space(quad_points_coordinates,scalar_function_values(1:num_quad_points,1))
        end if
        do qpoint = 1, num_quad_points
           call function_values(qpoint,1)%set(icomp,scalar_function_values(qpoint,1))
        end do
     end do
  case ( field_type_tensor )
     ! reference_fe MUST BE a vector-valued FE
     assert(.false.)
  end select

end subroutine interpolator_t_get_function_values_from_scalar_components
