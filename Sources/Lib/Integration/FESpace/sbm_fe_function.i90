! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!**************************************************************************************************
! Methods associated to fe_function_t
!*************************************************************************************************
 
  ! * Create + allocate (polymorphic) dof_values member variable relying on fe_space
  !   (NOTE: it does not initialize it)
  ! * Create + allocate + copy strong_dirichlet_values extracted from fe_space
  subroutine fe_function_create( this, fe_space )
    implicit none
    class(fe_function_t)            , intent(inout) :: this
    class(serial_fe_space_t)        , intent(in)    :: fe_space
    type(serial_scalar_array_t), pointer :: strong_dirichlet_values
    call this%free()
    call fe_space%create_dof_values(this%dof_values)
    strong_dirichlet_values => fe_space%get_strong_dirichlet_values()
    call this%strong_dirichlet_values%clone(strong_dirichlet_values)
    call this%strong_dirichlet_values%copy(strong_dirichlet_values)
  end subroutine fe_function_create
 
 !===============================================================================================
 subroutine fe_function_update_strong_dirichlet_values( this, fe_space )
    implicit none
    class(fe_function_t)       , intent(inout) :: this 
    class(serial_fe_space_t)   , intent(in)    :: fe_space
    type(serial_scalar_array_t), pointer       :: strong_dirichlet_values
    strong_dirichlet_values => fe_space%get_strong_dirichlet_values()
    call this%strong_dirichlet_values%copy(strong_dirichlet_values)
  end subroutine fe_function_update_strong_dirichlet_values
  
  subroutine fe_function_gather_nodal_values ( this, fe_accessor, field_id, nodal_values )
    implicit none
    class(fe_function_t)       , intent(in)    :: this 
    type(fe_accessor_t)        , intent(in)    :: fe_accessor
    integer(ip)                , intent(in)    :: field_id
    real(rp)                   , intent(inout) :: nodal_values(:)
    
    class(reference_fe_t)      , pointer :: reference_fe
    real(rp)                   , pointer :: strong_dirichlet_values_entries(:)
    integer(ip)                , pointer :: elem2dof(:)
    integer(ip) :: inode, number_nodes_field
    integer(ip) :: block_id
    integer(ip), pointer :: field_blocks(:)
    
    call fe_accessor%get_field_elem2dof(field_id,elem2dof)
    reference_fe => fe_accessor%get_reference_fe(field_id)
    number_nodes_field = reference_fe%get_number_shape_functions()

    if ( fe_accessor%at_strong_dirichlet_boundary(field_id) ) then
      ! Extract nodal values associated to dirichlet bcs
      strong_dirichlet_values_entries => this%strong_dirichlet_values%get_entries()
      do inode = 1, number_nodes_field
        if ( elem2dof(inode) < 0 ) then
           nodal_values(inode) = strong_dirichlet_values_entries(-elem2dof(inode))
        end if
      end do
    end if
    
    field_blocks => fe_accessor%get_field_blocks()
    block_id = field_blocks(field_id)
    
    ! Extract nodal values associated to dofs
    call this%dof_values%extract_subvector ( block_id, &
                                             number_nodes_field, &
                                             elem2dof, &
                                             nodal_values )
    
  end subroutine fe_function_gather_nodal_values
  
  subroutine fe_function_interpolate_scalar_function( this, &
                                                      fe_space, &
                                                      field_id, &
                                                      function, &
                                                      time )
                                                           
  implicit none
  class(fe_function_t)    , intent(inout) :: this
  class(serial_fe_space_t), intent(in)    :: fe_space
  integer(ip)             , intent(in)    :: field_id
  class(scalar_function_t), intent(in)    :: function
  real(rp)   , optional   , intent(in)    :: time
  
  logical       , allocatable    :: fe_maps_created(:)
  type(fe_map_t), allocatable    :: fe_maps(:)
  
  integer(ip)                    :: reference_fe_id
  integer(ip)                    :: number_nodes
  class(reference_fe_t), pointer :: reference_fe
 
  integer(ip)                    :: n_nodal_q_points
  type(quadrature_t), pointer    :: nodal_quadrature
  integer(ip)                    :: block_id
  
  type(fe_iterator_t)            :: fe_iterator
  type(fe_accessor_t)            :: fe
  type(point_t)        , pointer :: nodal_coordinates(:)
  type(point_t)        , pointer :: cell_coordinates(:)
  real(rp), allocatable          :: fe_function_values(:,:)
  real(rp), allocatable          :: nodal_values(:)
  real(rp)                       :: time_(1)
  type(i1p_t)      , allocatable :: elem2dof(:)
  integer(ip)      , pointer     :: field_blocks(:)
  integer(ip)                    :: i, istat
  class(environment_t), pointer  :: environment
  
  environment => fe_space%get_environment()
  if ( environment%am_i_l1_task() ) then
  
  if ( present(time) ) time_(1) = time
  
  allocate ( elem2dof(fe_space%get_number_fields()), stat=istat)
  check(istat==0)
  
  allocate(fe_maps(fe_space%get_number_reference_fes()), stat=istat)
  check(istat==0)
  
  call memalloc(fe_space%get_number_reference_fes(), fe_maps_created, __FILE__, __LINE__)
  fe_maps_created = .false.
  
  call memalloc(fe_space%get_max_number_nodal_quadrature_points(), 1, fe_function_values, __FILE__, __LINE__ )
  
  call memalloc(fe_space%get_max_number_shape_functions(), nodal_values, __FILE__, __LINE__ )
  
  field_blocks => fe_space%get_field_blocks()
  block_id = field_blocks(field_id)
  
  ! Create FE iterator
  fe_iterator = fe_space%create_fe_iterator()
  
  ! Loop over the elements
  do while ( .not. fe_iterator%has_finished())
     ! Get current FE
     call fe_iterator%current(fe)
            
     if ( fe%is_local() ) then
     
       ! Create FE_MAP for current cell + field_id if we didn't
       reference_fe_id = fe%get_reference_fe_id(field_id)
       reference_fe     => fe%get_reference_fe(field_id)
       nodal_quadrature => reference_fe%get_nodal_quadrature()
       if ( .not. fe_maps_created(reference_fe_id) ) then
         call fe_maps(reference_fe_id)%create(nodal_quadrature,fe%get_reference_fe_geo())
         fe_maps_created(reference_fe_id) = .true.
       end if
       
       ! Map reference_fe nodal coordinates to actual domain 
       cell_coordinates => fe_maps(reference_fe_id)%get_coordinates()
       call fe%get_coordinates(cell_coordinates)
       call fe_maps(reference_fe_id)%compute_quadrature_coordinates()
       nodal_coordinates => fe_maps(reference_fe_id)%get_quadrature_coordinates()
       
       n_nodal_q_points = nodal_quadrature%get_number_quadrature_points()
      
       ! Evaluate scalar function
       if(present(time)) then
         call function%get_values_set_space_time(nodal_coordinates, &
                                                        time_, &
                                                        fe_function_values(1:n_nodal_q_points,1:1))
       else
         call function%get_values_set_space(nodal_coordinates, &
                                            fe_function_values(1:n_nodal_q_points,1))
       end if
       
       call fe%get_elem2dof(elem2dof)
       number_nodes = reference_fe%get_number_shape_functions()
       nodal_values(1:number_nodes) = fe_function_values(1:number_nodes,1)
       
       ! Update interior DoFs
       call this%dof_values%insert_subvector(block_id, &
                                             number_nodes, &
                                             elem2dof(field_id)%p, &
                                             nodal_values(1:number_nodes))
       
       ! Update DoFs subject to strong Dirichlet BCs
       if ( fe%at_strong_dirichlet_boundary(field_id) ) then
           elem2dof(field_id)%p = -elem2dof(field_id)%p
           call this%strong_dirichlet_values%insert_subvector(1, &
                                                              number_nodes, &
                                                              elem2dof(field_id)%p, &
                                                              nodal_values(1:number_nodes))
           elem2dof(field_id)%p = -elem2dof(field_id)%p
       end if
     end if
     
     ! Go to next FE
     call fe_iterator%next()
  end do   
  
  do i=1, size(fe_maps)
    call fe_maps(i)%free()
  end do
  deallocate(fe_maps, stat=istat)
  check(istat==0)
  
  deallocate (elem2dof, stat=istat)
  check(istat==0)
  
  call memfree(fe_maps_created, __FILE__, __LINE__)
  call memfree(fe_function_values, __FILE__, __LINE__ )
  call memfree(nodal_values, __FILE__, __LINE__ )
  
  end if
end subroutine fe_function_interpolate_scalar_function

subroutine fe_function_interpolate_vector_function( this, &
                                                    fe_space, &
                                                    field_id, &
                                                    function, &
                                                    time )
                                                           
  implicit none
  class(fe_function_t)    , intent(inout) :: this
  class(serial_fe_space_t), intent(in)    :: fe_space
  integer(ip)             , intent(in)    :: field_id
  class(vector_function_t), intent(in)    :: function
  real(rp)   , optional   , intent(in)    :: time
  
  logical       , allocatable    :: fe_maps_created(:)
  type(fe_map_t), allocatable    :: fe_maps(:)
  
  integer(ip)                    :: reference_fe_id
  integer(ip)                    :: number_nodes
  integer(ip)                    :: inode, inode_scalar, icomp
  class(reference_fe_t), pointer :: reference_fe
 
  integer(ip)                    :: n_nodal_q_points
  type(quadrature_t), pointer    :: nodal_quadrature
  integer(ip)                    :: block_id
  
  type(fe_iterator_t)            :: fe_iterator
  type(fe_accessor_t)            :: fe
  type(point_t)        , pointer :: nodal_coordinates(:)
  type(point_t)        , pointer :: cell_coordinates(:)
  type(vector_field_t) , allocatable :: fe_function_values(:,:)
  real(rp), allocatable          :: nodal_values(:)
  real(rp)                       :: time_(1)
  type(i1p_t)      , allocatable :: elem2dof(:)
  integer(ip)      , pointer     :: field_blocks(:)
  integer(ip)                    :: i, istat
  
    class(environment_t), pointer  :: environment
  
  environment => fe_space%get_environment()
  if ( environment%am_i_l1_task() ) then

  if ( present(time) ) time_(1) = time
  
  allocate ( elem2dof(fe_space%get_number_fields()), stat=istat)
  check(istat==0)
  
  allocate(fe_maps(fe_space%get_number_reference_fes()), stat=istat)
  check(istat==0)
  
  call memalloc(fe_space%get_number_reference_fes(), fe_maps_created, __FILE__, __LINE__)
  fe_maps_created = .false.
  
  allocate ( fe_function_values(fe_space%get_max_number_nodal_quadrature_points(), 1), stat=istat)
  check(istat==0)
  
  call memalloc(fe_space%get_max_number_shape_functions(), nodal_values, __FILE__, __LINE__ )
  
  field_blocks => fe_space%get_field_blocks()
  block_id = field_blocks(field_id)
  
  ! Create FE iterator
  fe_iterator = fe_space%create_fe_iterator()
  
  ! Loop over the elements
  do while ( .not. fe_iterator%has_finished())
     ! Get current FE
     call fe_iterator%current(fe)
            
     if ( fe%is_local() ) then
     
       ! Create FE_MAP for current cell + field_id if we didn't
       reference_fe_id = fe%get_reference_fe_id(field_id)
       reference_fe     => fe%get_reference_fe(field_id)
       nodal_quadrature => reference_fe%get_nodal_quadrature()
       if ( .not. fe_maps_created(reference_fe_id) ) then
         call fe_maps(reference_fe_id)%create(nodal_quadrature,fe%get_reference_fe_geo())
         fe_maps_created(reference_fe_id) = .true.
       end if
       
       ! Map reference_fe nodal coordinates to actual domain 
       cell_coordinates => fe_maps(reference_fe_id)%get_coordinates()
       call fe%get_coordinates(cell_coordinates)
       call fe_maps(reference_fe_id)%compute_quadrature_coordinates()
       nodal_coordinates => fe_maps(reference_fe_id)%get_quadrature_coordinates()
       
       n_nodal_q_points = nodal_quadrature%get_number_quadrature_points()
      
       ! Evaluate scalar function
       if(present(time)) then
         call function%get_values_set_space_time(nodal_coordinates, &
                                                        time_, &
                                                        fe_function_values(1:n_nodal_q_points,1:1))
       else
         call function%get_values_set_space(nodal_coordinates, &
                                                   fe_function_values(1:n_nodal_q_points,1))
       end if
       
       call fe%get_elem2dof(elem2dof)
       number_nodes = reference_fe%get_number_shape_functions()
       
       ! Fill nodal_values from fe_function_values
       do inode=1, number_nodes
          icomp        = reference_fe%get_component_node(inode) 
          inode_scalar = reference_fe%get_scalar_from_vector_node(inode)
          nodal_values(inode) = fe_function_values(inode_scalar,1)%get(icomp)
       end do   
       
       ! Update interior DoFs
       call this%dof_values%insert_subvector(block_id, &
                                                    number_nodes, &
                                                    elem2dof(field_id)%p, &
                                                    nodal_values(1:number_nodes))
       
       ! Update DoFs subject to strong Dirichlet BCs
       if ( fe%at_strong_dirichlet_boundary(field_id) ) then
           elem2dof(field_id)%p = -elem2dof(field_id)%p
           call this%strong_dirichlet_values%insert_subvector(1, &
                                                                     number_nodes, &
                                                                     elem2dof(field_id)%p, &
                                                                     nodal_values(1:number_nodes))
           elem2dof(field_id)%p = -elem2dof(field_id)%p
       end if
     end if
     
     
     ! Go to next FE
     call fe_iterator%next()
  end do   
  
  do i=1, size(fe_maps)
    call fe_maps(i)%free()
  end do
  deallocate(fe_maps, stat=istat)
  check(istat==0)
  
  deallocate (elem2dof, stat=istat)
  check(istat==0)
  
  call memfree(fe_maps_created, __FILE__, __LINE__)
  deallocate ( fe_function_values, stat=istat)
  check(istat==0)  
  call memfree(nodal_values, __FILE__, __LINE__ )
  end if
end subroutine fe_function_interpolate_vector_function

subroutine fe_function_interpolate_tensor_function( this, &
                                                    fe_space, &
                                                    field_id, &
                                                    function, &
                                                    time )
                                                           
  implicit none
  class(fe_function_t)    , intent(inout) :: this
  class(serial_fe_space_t), intent(in)    :: fe_space
  integer(ip)             , intent(in)    :: field_id
  class(tensor_function_t), intent(in)    :: function
  real(rp)   , optional   , intent(in)    :: time
  class(environment_t), pointer  :: environment
   
  ! Not implemented yet
  check(.false.)
  
  environment => fe_space%get_environment()
  if ( environment%am_i_l1_task() ) then
  end if
end subroutine fe_function_interpolate_tensor_function
  
  subroutine fe_function_copy(this,other) 
    implicit none
    class(fe_function_t), intent(inout) :: this
    type (fe_function_t), intent(in)    :: other
    this%strong_dirichlet_values = other%strong_dirichlet_values
    this%dof_values = other%dof_values
  end subroutine fe_function_copy
  
 !===============================================================================================
 function fe_function_get_dof_values ( this )
    implicit none
    class(fe_function_t), target, intent(in) :: this 
    class(vector_t), pointer :: fe_function_get_dof_values
    fe_function_get_dof_values => this%dof_values
 end function fe_function_get_dof_values
 
 !===============================================================================================
 function fe_function_get_strong_dirichlet_values ( this )
    implicit none
    class(fe_function_t), target, intent(in) :: this 
    type(serial_scalar_array_t), pointer :: fe_function_get_strong_dirichlet_values
    fe_function_get_strong_dirichlet_values => this%strong_dirichlet_values
 end function fe_function_get_strong_dirichlet_values
  
 !=============================================================================================== 
 subroutine fe_function_free( this )
    implicit none
    class(fe_function_t), intent(inout) :: this
    integer(ip)                         :: istat
    if( allocated(this%dof_values) ) then
      call this%dof_values%free()
      deallocate ( this%dof_values, stat=istat )
      check (istat == 0)
    end if
    call this%strong_dirichlet_values%free()
  end subroutine fe_function_free
