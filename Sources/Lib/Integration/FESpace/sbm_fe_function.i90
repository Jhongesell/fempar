! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!**************************************************************************************************
! Methods associated to fe_function_t
!*************************************************************************************************
 
  ! * Create + allocate (polymorphic) dof_values member variable relying on fe_space
  !   (NOTE: it does not initialize it)
  ! * Create + allocate + init strong_dirichlet_values to be filled in fe_space
  subroutine fe_function_create( this, fe_space )
    implicit none
    class(fe_function_t)            , intent(inout) :: this
    class(serial_fe_space_t)        , intent(in)    :: fe_space
    call this%free()
    this%num_total_free_dofs = fe_space%get_num_total_free_dofs()
    call fe_space%create_dof_values(this%free_dof_values)
    call this%free_ghost_dof_values%create_and_allocate(fe_space%get_num_total_free_ghost_dofs())
    call this%free_ghost_dof_values%init(0.0_rp)
    call this%fixed_dof_values%create_and_allocate(fe_space%get_num_fixed_dofs())
    call this%fixed_dof_values%init(0.0_rp)
    this%field_blocks => fe_space%get_field_blocks()
  end subroutine fe_function_create
    
  subroutine fe_function_gather_nodal_values_through_iterator ( this, fe_cell_iterator, field_id, nodal_values )
    implicit none
    class(fe_function_t)       , intent(in)    :: this 
    class(fe_cell_iterator_t)       , intent(in)    :: fe_cell_iterator
    integer(ip)                , intent(in)    :: field_id
    real(rp)                   , intent(inout) :: nodal_values(:)
    
    integer(ip)                , pointer :: fe_dofs(:)
    integer(ip) :: inode, num_nodes_field
    integer(ip) :: block_id
    
    call fe_cell_iterator%get_field_fe_dofs(field_id,fe_dofs)
    if ( associated(fe_dofs) ) then
      num_nodes_field = size(fe_dofs)
    else
      num_nodes_field = 0
    end if 
    
    if ( fe_cell_iterator%has_fixed_dofs(field_id) ) then
      ! Extract nodal values associated to dirichlet bcs
      call this%fixed_dof_values%extract_subvector( 1,               &
                                                    num_nodes_field, &
                                                    -fe_dofs,        &
                                                    nodal_values )
    end if
    
    block_id = this%field_blocks(field_id)
    
    ! Extract nodal values associated to dofs
    call this%free_dof_values%extract_subvector ( block_id, &
                                                  num_nodes_field, &
                                                  fe_dofs, &
                                                  nodal_values )
    
    if ( fe_cell_iterator%is_ghost() ) then
      call this%free_ghost_dof_values%extract_subvector ( 1,                            &
                                                          num_nodes_field,              &
                                                          fe_dofs - this%num_total_free_dofs, &
                                                          nodal_values )
    end if
    
  end subroutine fe_function_gather_nodal_values_through_iterator
  
  subroutine fe_function_gather_nodal_values_from_raw_data ( this,               &
                                                             field_id,           &
                                                             fe_dofs,           &
                                                             num_nodes_field, & 
                                                             field_blocks,       &
                                                             nodal_values )
    implicit none
    class(fe_function_t)       , intent(in)    :: this
    integer(ip)                , intent(in)    :: field_id
    integer(ip)                , intent(in)    :: fe_dofs(:)
    integer(ip)                , intent(in)    :: num_nodes_field 
    integer(ip)                , intent(in)    :: field_blocks(:)
    real(rp)                   , intent(inout) :: nodal_values(:)
    
    integer(ip)       :: inode, block_id
    
    ! Extract nodal values associated to dirichlet bcs
    if ( minval(fe_dofs) < 0 ) then
      call this%fixed_dof_values%extract_subvector( 1,               &
                                                    num_nodes_field, &
                                                    -fe_dofs,        &
                                                    nodal_values )
    end if
    
    block_id = field_blocks(field_id)
    
    ! Extract nodal values associated to dofs
    call this%free_dof_values%extract_subvector ( block_id,           &
                                             num_nodes_field, &
                                             fe_dofs,           &
                                             nodal_values )
    
    call this%free_ghost_dof_values%extract_subvector ( 1,                            &
                                                   num_nodes_field,              &
                                                   fe_dofs - this%num_total_free_dofs, &
                                                   nodal_values )
    
  end subroutine fe_function_gather_nodal_values_from_raw_data
  
  subroutine fe_function_insert_nodal_values ( this, fe, field_id, nodal_values )
    implicit none
    class(fe_function_t)       , intent(inout) :: this 
    class(fe_cell_iterator_t)       , intent(in)    :: fe
    integer(ip)                , intent(in)    :: field_id
    real(rp)                   , intent(in)    :: nodal_values(:)
    
    class(reference_fe_t)      , pointer :: reference_fe
    integer(ip)                , pointer :: fe_dofs(:)
    integer(ip) :: inode, num_nodes_field
    integer(ip) :: block_id
    integer(ip), pointer :: field_blocks(:)
    
    call fe%get_field_fe_dofs(field_id,fe_dofs)
    reference_fe => fe%get_reference_fe(field_id)
    num_nodes_field = reference_fe%get_num_shape_functions()
    assert(num_nodes_field<=size(nodal_values))

    if ( fe%has_fixed_dofs(field_id) ) then
      ! Insert nodal values associated to dirichlet bcs
      call this%fixed_dof_values%insert_subvector( 1,               &
                                                   num_nodes_field, &
                                                   -fe_dofs,        &
                                                   nodal_values )
    end if
    
    field_blocks => fe%get_field_blocks()
    block_id = field_blocks(field_id)
    
    ! Extract nodal values associated to dofs
    call this%free_dof_values%insert_subvector ( block_id, &
                                             num_nodes_field, &
                                             fe_dofs, &
                                             nodal_values )
    
    if ( fe%is_ghost() ) then
      call this%free_ghost_dof_values%insert_subvector ( 1,                            &
                                                    num_nodes_field,              &
                                                    fe_dofs - this%num_total_free_dofs, &
                                                    nodal_values )
    end if
    
  end subroutine fe_function_insert_nodal_values
    
  subroutine fe_function_copy(this,other) 
    implicit none
    class(fe_function_t), intent(inout) :: this
    type (fe_function_t), intent(in)    :: other
    this%fixed_dof_values = other%fixed_dof_values
    if( .not. allocated(this%free_dof_values) ) allocate(this%free_dof_values,mold=other%free_dof_values)
    this%free_dof_values = other%free_dof_values
  end subroutine fe_function_copy
  
 !===============================================================================================
 function fe_function_get_free_dof_values ( this )
    implicit none
    class(fe_function_t), target, intent(in) :: this 
    class(vector_t), pointer :: fe_function_get_free_dof_values
    fe_function_get_free_dof_values => this%free_dof_values
 end function fe_function_get_free_dof_values
 
 !===============================================================================================
 function fe_function_get_fixed_dof_values ( this )
    implicit none
    class(fe_function_t), target, intent(in) :: this 
    type(serial_scalar_array_t), pointer :: fe_function_get_fixed_dof_values
    fe_function_get_fixed_dof_values => this%fixed_dof_values
 end function fe_function_get_fixed_dof_values
  
 !=============================================================================================== 
 subroutine fe_function_free( this )
    implicit none
    class(fe_function_t), intent(inout) :: this
    integer(ip)                         :: istat
    this%num_total_free_dofs = 0_ip
    if( allocated(this%free_dof_values) ) then
      call this%free_dof_values%free()
      deallocate ( this%free_dof_values, stat=istat )
      check (istat == 0)
    end if
    call this%free_ghost_dof_values%free()
    call this%fixed_dof_values%free()
    nullify(this%field_blocks)
  end subroutine fe_function_free

 !=============================================================================================== 
     ! op1 <- alpha*op2 + beta*op1
  subroutine fe_function_axpby(op1, alpha, op2, beta)
    implicit none
    class(fe_function_t), intent(inout) :: op1
    real(rp), intent(in) :: alpha
    class(fe_function_t), intent(in) :: op2
    real(rp), intent(in) :: beta
    call op1%free_dof_values%axpby(alpha,op2%free_dof_values,beta)
    call op1%fixed_dof_values%axpby(alpha,op2%fixed_dof_values,beta)
  end subroutine fe_function_axpby
  
 !=============================================================================================== 
    subroutine fe_function_set_free_dof_values(this,free_dof_values) 
    implicit none
    class(fe_function_t), intent(inout) :: this
    class(vector_t)     , intent(in)    :: free_dof_values
    if( .not. allocated(this%free_dof_values) ) allocate(this%free_dof_values,mold=free_dof_values)
    this%free_dof_values = free_dof_values
  end subroutine fe_function_set_free_dof_values
 
 !=============================================================================================== 
    subroutine fe_function_set_fixed_dof_values(this,fixed_dof_values) 
    implicit none
    class(fe_function_t), intent(inout) :: this
    class(serial_scalar_array_t)     , intent(in)    :: fixed_dof_values
    this%fixed_dof_values = fixed_dof_values
  end subroutine fe_function_set_fixed_dof_values
  
  
  
