! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!**************************************************************************************************
! Methods associated to fe_function_t
!*************************************************************************************************
 
  ! * Create + allocate (polymorphic) dof_values member variable relying on fe_space
  !   (NOTE: it does not initialize it)
  ! * Create + allocate + init strong_dirichlet_values to be filled in fe_space
  subroutine fe_function_create( this, fe_space )
    implicit none
    class(fe_function_t)            , intent(inout) :: this
    class(serial_fe_space_t)        , intent(in)    :: fe_space
    call this%free()
    call fe_space%create_dof_values(this%dof_values)
    call this%fixed_dof_values%create_and_allocate(fe_space%get_number_fixed_dofs())
    call this%fixed_dof_values%init(0.0_rp)
  end subroutine fe_function_create
  
  !===============================================================================================
  subroutine fe_function_update_fixed_dof_values( this, fe_space )
    implicit none
    class(fe_function_t)       , intent(inout) :: this 
    class(serial_fe_space_t)   , intent(in)    :: fe_space
    ! Then update DoFs subject to hanging node constraints
    call fe_space%update_fixed_dof_values(this%dof_values,this%fixed_dof_values)
  end subroutine fe_function_update_fixed_dof_values
  
  subroutine fe_function_gather_nodal_values_through_iterator ( this, fe, field_id, nodal_values )
    implicit none
    class(fe_function_t)       , intent(in)    :: this 
    class(fe_iterator_t)       , intent(in)    :: fe
    integer(ip)                , intent(in)    :: field_id
    real(rp)                   , intent(inout) :: nodal_values(:)
    
    class(reference_fe_t)      , pointer :: reference_fe
    real(rp)                   , pointer :: fixed_dof_values_entries(:)
    integer(ip)                , pointer :: elem2dof(:)
    integer(ip) :: inode, number_nodes_field
    integer(ip) :: block_id
    integer(ip), pointer :: field_blocks(:)
    
    call fe%get_field_elem2dof(field_id,elem2dof)
    reference_fe => fe%get_reference_fe(field_id)
    number_nodes_field = reference_fe%get_number_shape_functions()

    if ( fe%has_fixed_dofs(field_id) ) then
      ! Extract nodal values associated to dirichlet bcs
      fixed_dof_values_entries => this%fixed_dof_values%get_entries()
      do inode = 1, number_nodes_field
        if ( fe%is_fixed_dof(elem2dof(inode)) ) then
           nodal_values(inode) = fixed_dof_values_entries(-elem2dof(inode))
        end if
      end do
    end if
    
    field_blocks => fe%get_field_blocks()
    block_id = field_blocks(field_id)
    
    ! Extract nodal values associated to dofs
    call this%dof_values%extract_subvector ( block_id, &
                                             number_nodes_field, &
                                             elem2dof, &
                                             nodal_values )
    
  end subroutine fe_function_gather_nodal_values_through_iterator
  
  subroutine fe_function_gather_nodal_values_from_raw_data ( this,               &
                                                             field_id,           &
                                                             elem2dof,           &
                                                             number_nodes_field, & 
                                                             field_blocks,       &
                                                             nodal_values )
    implicit none
    class(fe_function_t)       , intent(in)    :: this
    integer(ip)                , intent(in)    :: field_id
    integer(ip)                , intent(in)    :: elem2dof(:)
    integer(ip)                , intent(in)    :: number_nodes_field 
    integer(ip)                , intent(in)    :: field_blocks(:)
    real(rp)                   , intent(inout) :: nodal_values(:)
    
    real(rp), pointer :: fixed_dof_values_entries(:)
    integer(ip)       :: inode, block_id
    
    ! Extract nodal values associated to dirichlet bcs
    if ( minval(elem2dof) < 0 ) then
      fixed_dof_values_entries => this%fixed_dof_values%get_entries()
      do inode = 1, number_nodes_field
        if ( elem2dof(inode) < 0 ) then
           nodal_values(inode) = fixed_dof_values_entries(-elem2dof(inode))
        end if
      end do
    end if
    
    block_id = field_blocks(field_id)
    
    ! Extract nodal values associated to dofs
    call this%dof_values%extract_subvector ( block_id,           &
                                             number_nodes_field, &
                                             elem2dof,           &
                                             nodal_values )
    
  end subroutine fe_function_gather_nodal_values_from_raw_data
  
  subroutine fe_function_insert_nodal_values ( this, fe, field_id, nodal_values )
    implicit none
    class(fe_function_t)       , intent(inout) :: this 
    class(fe_iterator_t)       , intent(in)    :: fe
    integer(ip)                , intent(in)    :: field_id
    real(rp)                   , intent(in)    :: nodal_values(:)
    
    class(reference_fe_t)      , pointer :: reference_fe
    real(rp)                   , pointer :: fixed_dof_values_entries(:)
    integer(ip)                , pointer :: elem2dof(:)
    integer(ip) :: inode, number_nodes_field
    integer(ip) :: block_id
    integer(ip), pointer :: field_blocks(:)
    
    call fe%get_field_elem2dof(field_id,elem2dof)
    reference_fe => fe%get_reference_fe(field_id)
    number_nodes_field = reference_fe%get_number_shape_functions()

    if ( fe%has_fixed_dofs(field_id) ) then
      ! Insert nodal values associated to dirichlet bcs
      fixed_dof_values_entries => this%fixed_dof_values%get_entries()
      do inode = 1, number_nodes_field
        if ( fe%is_fixed_dof(elem2dof(inode)) ) then
           fixed_dof_values_entries(-elem2dof(inode)) = nodal_values(inode)
        end if
      end do
    end if
    
    field_blocks => fe%get_field_blocks()
    block_id = field_blocks(field_id)
    
    ! Insert nodal values associated to dofs
    call this%dof_values%insert_subvector ( block_id,           &
                                            number_nodes_field, &
                                            elem2dof,           &
                                            nodal_values )
    
  end subroutine fe_function_insert_nodal_values
    
  subroutine fe_function_copy(this,other) 
    implicit none
    class(fe_function_t), intent(inout) :: this
    type (fe_function_t), intent(in)    :: other
    this%fixed_dof_values = other%fixed_dof_values
    this%dof_values = other%dof_values
  end subroutine fe_function_copy
  
 !===============================================================================================
 function fe_function_get_dof_values ( this )
    implicit none
    class(fe_function_t), target, intent(in) :: this 
    class(vector_t), pointer :: fe_function_get_dof_values
    fe_function_get_dof_values => this%dof_values
 end function fe_function_get_dof_values
 
 !===============================================================================================
 function fe_function_get_fixed_dof_values ( this )
    implicit none
    class(fe_function_t), target, intent(in) :: this 
    type(serial_scalar_array_t), pointer :: fe_function_get_fixed_dof_values
    fe_function_get_fixed_dof_values => this%fixed_dof_values
 end function fe_function_get_fixed_dof_values
  
 !=============================================================================================== 
 subroutine fe_function_free( this )
    implicit none
    class(fe_function_t), intent(inout) :: this
    integer(ip)                         :: istat
    if( allocated(this%dof_values) ) then
      call this%dof_values%free()
      deallocate ( this%dof_values, stat=istat )
      check (istat == 0)
    end if
    call this%fixed_dof_values%free()
  end subroutine fe_function_free
