! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine fe_object_iterator_create ( this, fe_space )
  implicit none
  class(fe_object_iterator_t)            , intent(inout) :: this
  type(par_fe_space_t)    , target       , intent(in)    :: fe_space
  call this%free()
  call this%object%create(fe_space%triangulation)
  this%fe_space => fe_space
end subroutine fe_object_iterator_create

subroutine fe_object_iterator_free (this)
  implicit none
  class(fe_object_iterator_t), intent(inout) :: this
  call this%object%free()
  nullify ( this%fe_space )
end subroutine fe_object_iterator_free

subroutine fe_object_iterator_free_final(this)
  implicit none
  type(fe_object_iterator_t), intent(inout) :: this
  assert ( .not. associated(this%fe_space) )
end subroutine fe_object_iterator_free_final

subroutine fe_object_iterator_get_fe_vef (this, ivef, fe_vef)
  implicit none
  class(fe_object_iterator_t), intent(in)    :: this
  integer(ip)                , intent(in)    :: ivef
  type(fe_vef_iterator_t)    , intent(inout) :: fe_vef
  call this%object%get_vef(ivef, fe_vef%vef)
end subroutine fe_object_iterator_get_fe_vef

subroutine fe_object_iterator_get_fe_face(this, face_lid, fe_face)
  implicit none
  class(fe_object_iterator_t), intent(in)    :: this
  integer(ip)                , intent(in)    :: face_lid
  type(fe_face_iterator_t)   , intent(inout) :: fe_face
  assert ( this%get_lid() >= 1 .and. .not. this%has_finished() )
  call fe_face%set_lid(face_lid)
end subroutine fe_object_iterator_get_fe_face

function fe_object_iterator_get_num_faces(this)
  implicit none
  class(fe_object_iterator_t), intent(in) :: this
  integer(ip) :: fe_object_iterator_get_num_faces
  assert ( this%get_lid() >= 1 .and. .not. this%has_finished() )
  fe_object_iterator_get_num_faces = this%fe_space%faces_object%get_sublist_size(this%get_lid())
end function fe_object_iterator_get_num_faces

function fe_object_iterator_get_number_coarse_dofs(this, field_id)
  implicit none
  class(fe_object_iterator_t), intent(in) :: this
  integer(ip)                , intent(in) :: field_id
  integer(ip) :: fe_object_iterator_get_number_coarse_dofs
  fe_object_iterator_get_number_coarse_dofs = this%fe_space%own_coarse_dofs_per_field(field_id)%get_sublist_size(this%get_lid())
end function fe_object_iterator_get_number_coarse_dofs

function fe_object_iterator_create_own_coarse_dofs_iterator(this, field_id) 
  implicit none
  class(fe_object_iterator_t), intent(in) :: this
  integer(ip)                , intent(in) :: field_id
  type(list_iterator_t) :: fe_object_iterator_create_own_coarse_dofs_iterator
  fe_object_iterator_create_own_coarse_dofs_iterator = this%fe_space%own_coarse_dofs_per_field(field_id)%create_iterator(this%get_lid())
end function fe_object_iterator_create_own_coarse_dofs_iterator

function fe_object_iterator_create_faces_object_iterator(this) 
  implicit none
  class(fe_object_iterator_t), intent(in) :: this
  type(list_iterator_t) :: fe_object_iterator_create_faces_object_iterator
  fe_object_iterator_create_faces_object_iterator = this%fe_space%faces_object%create_iterator(this%get_lid())
end function fe_object_iterator_create_faces_object_iterator
