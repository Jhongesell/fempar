! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine fe_vef_accessor_create ( this, fe_space, vef )
  implicit none
  class(fe_vef_accessor_t) , intent(inout)      :: this
  class(serial_fe_space_t) , target, intent(in) :: fe_space
  class(vef_accessor_t)    , intent(in)         :: vef
  integer(ip) :: istat
  this%fe_space => fe_space
  allocate(this%vef, source=vef, stat=istat); check(istat==0)
  call this%vef%create(fe_space%triangulation)
end subroutine fe_vef_accessor_create

subroutine fe_vef_accessor_free ( this)
  implicit none
  class(fe_vef_accessor_t), intent(inout) :: this
  integer(ip) :: istat
  if(allocated(this%vef)) then
     call this%vef%free()
     deallocate(this%vef, stat=istat); check(istat==0)
  end if
  nullify(this%fe_space)
end subroutine fe_vef_accessor_free

subroutine fe_vef_accessor_get_fe_around (this, ife_around, fe)
  implicit none
  class(fe_vef_accessor_t)          , intent(in)     :: this
  integer(ip)                       , intent(in)     :: ife_around
  type(fe_accessor_t)               , intent(inout)  :: fe
  type(cell_accessor_t)                              :: cell
  call this%vef%get_cell_around(ife_around,cell)
  call fe%create(this%fe_space)
  call fe%set_lid(cell%get_lid())
end subroutine fe_vef_accessor_get_fe_around

! Exploiting ("inherited from") face_accessor_t
subroutine fe_face_accessor_get_coordinates (this, face_coordinates)
  implicit none
  class(fe_face_accessor_t), intent(in)     :: this
  type(point_t)            ,  intent(inout) :: face_coordinates(:)
  call this%vef%get_coordinates(face_coordinates)
end subroutine fe_face_accessor_get_coordinates

function fe_face_accessor_get_face_lid (this) result(face_lid)
  implicit none
  class(fe_face_accessor_t), intent(in)    :: this
  integer(ip) :: face_lid
  face_lid = this%vef%get_face_lid()
end function fe_face_accessor_get_face_lid

function fe_face_accessor_get_face_lpos_within_cell_around(this, icell_around) result(face_lpos_within_cell_around)
  implicit none
  class(fe_face_accessor_t), intent(in)    :: this
  integer(ip)              , intent(in)    :: icell_around
  integer(ip)                              :: face_lpos_within_cell_around
  face_lpos_within_cell_around = this%vef%get_face_lpos_within_cell_around(icell_around)
end function fe_face_accessor_get_face_lpos_within_cell_around

function fe_face_accessor_get_face_orientation ( this ) result(face_orientation)
  implicit none
  class(fe_face_accessor_t), intent(in) :: this
  integer(ip)                           :: face_orientation
  face_orientation = this%vef%get_face_orientation ( )
end function fe_face_accessor_get_face_orientation 

function fe_face_accessor_get_face_rotation ( this ) result(face_rotation)
  implicit none
  class(fe_face_accessor_t), intent(in) :: this
  integer(ip)                           :: face_rotation
  face_rotation = this%vef%get_face_rotation( )
end function fe_face_accessor_get_face_rotation

!==================================================================================================
