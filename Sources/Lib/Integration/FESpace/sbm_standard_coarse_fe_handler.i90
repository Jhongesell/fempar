! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine standard_l1_setup_change_basis_tools(this, par_fe_space)
implicit none 
  class(standard_l1_coarse_fe_handler_t), intent(inout) :: this
  type(par_fe_space_t)                  , intent(in)    :: par_fe_space
  assert(.false.) 
end subroutine standard_l1_setup_change_basis_tools

subroutine standard_l1_get_num_coarse_dofs(this, par_fe_space, parameter_list, num_coarse_dofs)
  implicit none
  class(standard_l1_coarse_fe_handler_t), intent(in)    :: this
  type(par_fe_space_t)                  , intent(in)    :: par_fe_space
  type(parameterlist_t)                 , intent(in)    :: parameter_list
  integer(ip)                           , intent(inout) :: num_coarse_dofs(:)
  
  integer(ip)                            :: field_id
  integer(ip)                            :: ivef_within_cell
  integer(ip)                            :: ivef_within_object
  integer(ip)                            :: icell_around
  integer(ip)                            :: idof, dof_lid
  logical                                :: dofs_on_vef
  type(environment_t), pointer           :: par_environment
  type(fe_object_iterator_t)             :: object
  type(fe_vef_iterator_t)                :: vef
  class(fe_iterator_t), allocatable      :: fe
  type(list_iterator_t)                  :: own_dofs_on_vef_iterator
  integer(ip), pointer                   :: elem2dof(:)
  logical                                :: use_vertices, use_edges, use_faces
  
  par_environment => par_fe_space%get_par_environment()
  assert ( associated ( par_environment ) )
  assert ( par_environment%am_i_l1_task() )
  assert ( size(num_coarse_dofs) == par_fe_space%get_number_fe_objects() )
  
  call this%get_coarse_space_use_vertices_edges_faces(parameter_list,& 
                                                      use_vertices, &
                                                      use_edges, &
                                                      use_faces)
  
  ! To think where field_id should come from? Temporarily let us assume that we have
  ! a single-field PDE problem
  field_id = 1

  
  
  ! First, count how many coarse_dofs there are on the interface of my subdomain
  num_coarse_dofs = 0
  call par_fe_space%create_fe_object_iterator(object)
  call par_fe_space%create_fe_iterator(fe)
  call par_fe_space%create_fe_vef_iterator(vef)
  do while ( .not. object%has_finished() )
     select case ( object%get_dimension() )
     case (0)
       if (.not. use_vertices) then
         call object%next(); cycle
       end if  
     case (1)
       if (.not. use_edges) then
         call object%next(); cycle
       end if  
     case (2)
       if (.not. use_faces) then
         call object%next(); cycle
       end if  
     end select
    
     dofs_on_vef = .false.
     do ivef_within_object=1, object%get_num_vefs()
        call object%get_vef(ivef_within_object,vef)

        do icell_around=1, vef%get_num_cells_around()
           call vef%get_cell_around(icell_around,fe)
           if ( fe%is_ghost() ) then 
           
              call fe%get_field_elem2dof(field_id, elem2dof)
              ivef_within_cell = fe%find_lpos_vef_lid(vef%get_lid())

              own_dofs_on_vef_iterator = fe%create_own_dofs_on_vef_iterator(ivef_within_cell, field_id)
              do while ( .not. own_dofs_on_vef_iterator%is_upper_bound() )
                 idof    = own_dofs_on_vef_iterator%get_current()
                 dof_lid = elem2dof(idof)
                 if ( dof_lid > 0 ) then
                    dofs_on_vef = .true.
                    exit
                 end if
                 call own_dofs_on_vef_iterator%next()
              end do
           
           end if
        end do
        
        if ( dofs_on_vef ) then
           ! It must be thought for more general cases (vectors, tensor product...)
           num_coarse_dofs(object%get_lid()) = num_coarse_dofs(object%get_lid()) + 1
           exit
        end if

     end do
     call object%next()
  end do
  call par_fe_space%free_fe_vef_iterator(vef)
  call par_fe_space%free_fe_iterator(fe)
  call par_fe_space%free_fe_object_iterator(object)
end subroutine standard_l1_get_num_coarse_dofs

subroutine standard_l1_setup_constraint_matrix(this, par_fe_space, parameter_list, constraint_matrix) 
  implicit none
  class(standard_l1_coarse_fe_handler_t), intent(in)    :: this
  type(par_fe_space_t)                  , intent(in)    :: par_fe_space
  type(parameterlist_t)                 , intent(in)    :: parameter_list
  type(coo_sparse_matrix_t)             , intent(inout) :: constraint_matrix
  type(environment_t), pointer :: par_environment
  type(fe_object_iterator_t) :: object
  type(fe_vef_iterator_t)                :: vef
  class(fe_iterator_t), allocatable      :: fe
  type(list_iterator_t)                  :: own_coarse_dofs_iterator
  type(list_iterator_t)                  :: own_dofs_on_vef_iterator 
  integer(ip), pointer                   :: elem2dof(:)
  integer(ip)                            :: off
  integer(ip) :: field_id
  integer(ip) :: istat
  integer(ip) :: num_rows, num_cols
  integer(ip) :: num_fine_dofs_on_coarse_dof
  integer(ip) :: ivef_within_cell, ivef_within_object, idof, dof_lid, coarse_dof_lid, icell_around
  type(hash_table_ip_ip_t) :: visited_dofs
  
  
  par_environment => par_fe_space%get_par_environment()
  assert (associated(par_environment))
  assert (par_environment%am_i_l1_task())
  
  ! To-think where field_id should come from? Temporarily let us assume that we have
  ! a single-field PDE problem
  field_id = 1
  
  ! Free any dynamic memory that constraint_matrix may have inside
  call constraint_matrix%free()
   
  num_cols = par_fe_space%number_dofs_per_field(field_id)
  num_rows = par_fe_space%ptr_coarse_dofs_per_field(field_id+1)- &
             par_fe_space%ptr_coarse_dofs_per_field(field_id)    
 
  call visited_dofs%init(num_cols)
             
  ! Create constraint matrix (transposed)
  call constraint_matrix%create ( num_cols, num_rows )
   
  ! Fill constraint matrix entries (transposed)
  call par_fe_space%create_fe_object_iterator(object)
  call par_fe_space%create_fe_iterator(fe)
  call par_fe_space%create_fe_vef_iterator(vef)
  do while ( .not. object%has_finished() )
     
     if ( object%get_number_coarse_dofs(field_id) > 0 ) then
       
       own_coarse_dofs_iterator = object%create_own_coarse_dofs_iterator(field_id)
       assert ( own_coarse_dofs_iterator%get_size() == 1 )
       
       coarse_dof_lid = own_coarse_dofs_iterator%get_current()
     
       num_fine_dofs_on_coarse_dof = 0 
       ! Count how many fine DoFs current coarse DoF aggregates
       do ivef_within_object=1, object%get_num_vefs()
          call object%get_vef(ivef_within_object,vef)
          do icell_around=1, vef%get_num_cells_around()          
             call vef%get_cell_around(icell_around,fe)
             if ( fe%is_ghost() ) then
                call fe%get_field_elem2dof(field_id, elem2dof)
                ivef_within_cell = fe%find_lpos_vef_lid(vef%get_lid())
                own_dofs_on_vef_iterator = fe%create_own_dofs_on_vef_iterator(ivef_within_cell, field_id)
                do while ( .not. own_dofs_on_vef_iterator%is_upper_bound() )
                   idof    = own_dofs_on_vef_iterator%get_current()
                   dof_lid = elem2dof(idof)
                   if ( dof_lid > 0 ) then
                      call visited_dofs%put(key=dof_lid,val=ivef_within_cell,stat=istat)
                      if ( istat == now_stored ) then
                         num_fine_dofs_on_coarse_dof = num_fine_dofs_on_coarse_dof + 1
                      end if
                   end if
                   call own_dofs_on_vef_iterator%next()
                end do
             end if
          end do
       end do
       
       call visited_dofs%init(num_cols)       
       
       do ivef_within_object=1, object%get_num_vefs()
          call object%get_vef(ivef_within_object,vef)
          do icell_around=1, vef%get_num_cells_around() 
             call vef%get_cell_around(icell_around,fe)
             if ( fe%is_ghost() ) then
                call fe%get_field_elem2dof(field_id, elem2dof)
                ivef_within_cell = fe%find_lpos_vef_lid(vef%get_lid())
                own_dofs_on_vef_iterator = fe%create_own_dofs_on_vef_iterator(ivef_within_cell, field_id)
                do while ( .not. own_dofs_on_vef_iterator%is_upper_bound() )
                   idof    = own_dofs_on_vef_iterator%get_current()
                   dof_lid = elem2dof(idof)
                   if ( dof_lid > 0 ) then
                      call visited_dofs%put(key=dof_lid,val=ivef_within_cell,stat=istat)
                      if ( istat == now_stored ) then
                         call constraint_matrix%insert(dof_lid, coarse_dof_lid, 1.0_rp/real(num_fine_dofs_on_coarse_dof,rp))
                      end if
                   end if
                   call own_dofs_on_vef_iterator%next()
                end do
             end if
          end do
       end do
     end if
     call object%next()
  end do
  call constraint_matrix%sort_and_compress()
  call par_fe_space%free_fe_iterator(fe)
  call par_fe_space%free_fe_object_iterator(object)
  call par_fe_space%free_fe_vef_iterator(vef)
end subroutine standard_l1_setup_constraint_matrix

subroutine standard_l1_setup_weighting_operator(this, par_fe_space, parameter_list, weighting_operator) 
  implicit none
  class(standard_l1_coarse_fe_handler_t), intent(in)    :: this
  type(par_fe_space_t)                  , intent(in)    :: par_fe_space
  type(parameterlist_t)                 , intent(in)    :: parameter_list
  real(rp), allocatable                 , intent(inout) :: weighting_operator(:)
  integer(ip)                            :: field_id
  type(fe_object_iterator_t)             :: object
  type(fe_vef_iterator_t)                :: vef
  class(fe_iterator_t), allocatable      :: fe
  type(list_iterator_t)                  :: own_dofs_on_vef_iterator 
  integer(ip), pointer                   :: elem2dof(:)
  integer(ip)                            :: off
  integer(ip) :: num_rows, num_cols
  integer(ip) :: num_fine_dofs_on_coarse_dof
  integer(ip) :: ivef_within_cell, ivef_within_object, idof, dof_lid, coarse_dof_lid, icell_around
  integer(ip) :: istat
  integer(ip) :: ipart, part_id, local_part_id, number_neighbours
  type(hash_table_ip_ip_t)          , allocatable :: visited_dofs(:)
  integer(ip)                       , allocatable :: number_parts_around_dof(:)
  class(base_static_triangulation_t), pointer     :: triangulation
  type(cell_import_t)               , pointer     :: cell_import
  
  if (allocated(weighting_operator) ) then
    call memfree ( weighting_operator, __FILE__, __LINE__ )
  end if
  
  ! To-think where field_id should come from? Temporarily let us assume that we have
  ! a single-field PDE problem
  field_id = 1
  
  call memalloc ( par_fe_space%number_dofs_per_field(field_id), &
                  weighting_operator, __FILE__, __LINE__ )
  call memalloc ( par_fe_space%number_dofs_per_field(field_id), &
                  number_parts_around_dof, __FILE__, __LINE__ )
  
  weighting_operator = 1.0_rp
  number_parts_around_dof  = 1
  
  triangulation => par_fe_space%get_triangulation()
  cell_import   => triangulation%get_cell_import()
  number_neighbours = cell_import%get_number_neighbours()
  allocate(visited_dofs(number_neighbours))
  do ipart =1,number_neighbours
     call visited_dofs(ipart)%init(par_fe_space%number_dofs_per_field(field_id))
  end do
  
  ! Fill constraint matrix entries (transposed)
  call par_fe_space%create_fe_iterator(fe)
  call par_fe_space%create_fe_object_iterator(object)
  call par_fe_space%create_fe_vef_iterator(vef)
  do while ( .not. object%has_finished() )
     ! Count how many fine DoFs current coarse DoF aggregates
     do ivef_within_object=1, object%get_num_vefs()
        call object%get_vef(ivef_within_object,vef)
        do icell_around=1, vef%get_num_cells_around()  
           call vef%get_cell_around(icell_around,fe)
           if ( fe%is_ghost() ) then
              call fe%get_field_elem2dof(field_id, elem2dof)
              ivef_within_cell = fe%find_lpos_vef_lid(vef%get_lid())
              own_dofs_on_vef_iterator = fe%create_own_dofs_on_vef_iterator(ivef_within_cell, field_id)
              do while ( .not. own_dofs_on_vef_iterator%is_upper_bound() )
                 idof    = own_dofs_on_vef_iterator%get_current()
                 dof_lid = elem2dof(idof)
                 if ( dof_lid > 0 ) then
                    part_id = fe%get_my_part()
                    local_part_id = cell_import%get_local_neighbour_id(part_id)
                    call visited_dofs(local_part_id)%put(key=dof_lid,val=ivef_within_cell,stat=istat)
                    if ( istat == now_stored ) then
                       number_parts_around_dof(dof_lid) = number_parts_around_dof(dof_lid) + 1
                    end if
                 end if
                 call own_dofs_on_vef_iterator%next()
              end do
           end if
        end do
     end do
     call object%next()
  end do
  call par_fe_space%free_fe_iterator(fe)
  call par_fe_space%free_fe_object_iterator(object)
  call par_fe_space%free_fe_vef_iterator(vef)
  do idof =1,par_fe_space%number_dofs_per_field(field_id)
     weighting_operator(idof) = weighting_operator(idof)/real(number_parts_around_dof(idof),rp)
  end do
  deallocate(visited_dofs)
  call memfree ( number_parts_around_dof, __FILE__, __LINE__ )
end subroutine standard_l1_setup_weighting_operator

subroutine standard_l1_apply_weighting_operator(this, W, x, y) 
  implicit none
  class(standard_l1_coarse_fe_handler_t), intent(in)    :: this
  real(rp),            allocatable,       intent(in)    :: W(:) 
  type(par_scalar_array_t)  , intent(inout) :: x
  type(par_scalar_array_t)  , intent(inout) :: y
  type(serial_scalar_array_t), pointer :: x_local
  type(serial_scalar_array_t), pointer :: y_local
  real(rp), pointer :: x_local_entries(:)
  real(rp), pointer :: y_local_entries(:)

     x_local         => x%get_serial_scalar_array()
     x_local_entries => x_local%get_entries()
     y_local         => y%get_serial_scalar_array()
     y_local_entries => y_local%get_entries()
     y_local_entries = x_local_entries*W

end subroutine standard_l1_apply_weighting_operator

subroutine standard_l1_apply_transpose_weighting_operator(this, W, x, y) 
  implicit none
  class(standard_l1_coarse_fe_handler_t), intent(in)    :: this
  real(rp),            allocatable,       intent(in)    :: W(:) 
  type(par_scalar_array_t)  , intent(inout) :: x
  type(par_scalar_array_t)  , intent(inout) :: y
  type(serial_scalar_array_t), pointer :: x_local
  type(serial_scalar_array_t), pointer :: y_local
  real(rp), pointer :: x_local_entries(:)
  real(rp), pointer :: y_local_entries(:)

     x_local         => x%get_serial_scalar_array()
     x_local_entries => x_local%get_entries()
     y_local         => y%get_serial_scalar_array()
     y_local_entries => y_local%get_entries()
     y_local_entries = x_local_entries*W

end subroutine standard_l1_apply_transpose_weighting_operator

subroutine standard_get_coarse_space_use_vertices_edges_faces ( parameter_list, use_vertices, use_edges, use_faces )
  implicit none
  type(parameterlist_t)                 , intent(in)    :: parameter_list
  logical                               , intent(out)   :: use_vertices, use_edges, use_faces
  integer(ip) :: FPLError
  assert(parameter_list%isAssignable(coarse_space_use_vertices_key, use_vertices))
  FPLError   = parameter_list%Get(coarse_space_use_vertices_key, use_vertices)
  assert(FPLError == 0)
  assert(parameter_list%isAssignable(coarse_space_use_edges_key, use_edges))
  FPLError   = parameter_list%Get(coarse_space_use_edges_key, use_edges)
  assert(FPLError == 0)
  assert(parameter_list%isAssignable(coarse_space_use_faces_key, use_faces))
  FPLError   = parameter_list%Get(coarse_space_use_faces_key, use_faces)
  assert(FPLError == 0)
end subroutine standard_get_coarse_space_use_vertices_edges_faces 

subroutine standard_lgt1_setup_coarse_dofs(this, coarse_fe_space) 
  implicit none
  class(standard_lgt1_coarse_fe_handler_t), intent(in)    :: this
  type(coarse_fe_space_t)                 , intent(inout) :: coarse_fe_space
end subroutine standard_lgt1_setup_coarse_dofs

subroutine standard_l1_free(this)
implicit none 
  class(standard_l1_coarse_fe_handler_t), intent(inout) :: this
  assert(.false.) 
end subroutine standard_l1_free
