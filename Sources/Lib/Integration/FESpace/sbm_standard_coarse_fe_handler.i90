  !
  ! By now, this guy has two different responsibilities:
  ! 1. Determine how many coarse DoFs there are?
  ! 2. Generate a local numbering of coarse DoFs and its association to coarse n_faces
  !
  subroutine standard_l1_setup_coarse_dofs(this, par_fe_space) 
    implicit none
    class(standard_l1_coarse_fe_handler_t), intent(in)    :: this
    type(par_fe_space_t)                  , intent(inout) :: par_fe_space
    integer(ip)                            :: field_id
    integer(ip)                            :: num_coarse_dofs
    integer(ip)                            :: iobj_vef, iobj_dof, ivef
    integer(ip)                            :: idof, dof_lid
    integer(ip)                            :: offset, i
    integer(ip)                            :: istat
    logical                                :: dofs_on_vef
    integer(ip)                            :: current_coarse_dof
    integer(ip)                            :: base_pos_lst_dofs
    type(par_environment_t), pointer       :: par_environment
    type(fe_object_iterator_t)             :: object_iterator
    type(fe_object_accessor_t)             :: object
    type(fe_vefs_on_object_iterator_t)     :: vefs_on_object_iterator
    type(fe_vef_accessor_t)                :: vef
    type(fe_accessor_t)                    :: fe
    type(list_iterator_t)                  :: own_dofs_on_vef_iterator
    integer(ip), pointer                   :: elem2dof(:)

    par_environment => par_fe_space%get_par_environment()
    assert ( associated ( par_environment ) )
    assert ( par_environment%am_i_l1_task() )

    ! To think where field_id should come from? Temporarily let us assume that we have
    ! a single-field PDE problem
    field_id = 1

    ! First, count how many coarse_dofs there are on the interface of my subdomain
    num_coarse_dofs = 0
    object_iterator = par_fe_space%create_fe_object_iterator()
    do while ( .not. object_iterator%has_finished() )
       call object_iterator%current(object)
       vefs_on_object_iterator = object%create_fe_vefs_on_object_iterator()
       dofs_on_vef = .false.
       do while ( .not. vefs_on_object_iterator%has_finished() )
          call vefs_on_object_iterator%current(vef)
          call vef%get_cell_around(1,fe)
          call fe%get_field_elem2dof(field_id, elem2dof)
          ivef = fe%find_lpos_vef_lid(vef%get_lid())

          own_dofs_on_vef_iterator = fe%create_own_dofs_on_vef_iterator(ivef, field_id)
          do while ( .not. own_dofs_on_vef_iterator%is_upper_bound() )
             idof    = own_dofs_on_vef_iterator%get_current()
             dof_lid = elem2dof(idof)
             if ( dof_lid > 0 ) then
                dofs_on_vef = .true.
                exit
             end if
             call own_dofs_on_vef_iterator%next()
          end do

          if ( dofs_on_vef ) then
             ! It must be thought for more general cases (vectors, tensor product...)
             num_coarse_dofs = num_coarse_dofs + 1
             exit
          end if

          call vefs_on_object_iterator%next()
       end do
       call object_iterator%next()
    end do

    ! Set-up number of coarse dofs
    par_fe_space%num_coarse_dofs_per_field(field_id) = num_coarse_dofs
    call par_fe_space%coarse_n_face_lids_coarse_dofs_per_field(field_id)%create(num_coarse_dofs)

    current_coarse_dof = 1
    call object_iterator%init()
    do while ( .not. object_iterator%has_finished() )
       call object_iterator%current(object)
       dofs_on_vef = .false.
       vefs_on_object_iterator = object%create_fe_vefs_on_object_iterator()
       do while ( .not. vefs_on_object_iterator%has_finished() )
          call vefs_on_object_iterator%current(vef)
          call vef%get_cell_around(1,fe)
          call fe%get_field_elem2dof(field_id, elem2dof)
          ivef = fe%find_lpos_vef_lid(vef%get_lid())
          own_dofs_on_vef_iterator = fe%create_own_dofs_on_vef_iterator(ivef, field_id)
          do while ( .not. own_dofs_on_vef_iterator%is_upper_bound() )
             idof    = own_dofs_on_vef_iterator%get_current()
             dof_lid = elem2dof(idof)
             if ( dof_lid > 0 ) then
                dofs_on_vef = .true.
                exit
             end if
             call own_dofs_on_vef_iterator%next()
          end do
          call vefs_on_object_iterator%next()
          
          if (dofs_on_vef) then
             par_fe_space%coarse_n_face_lids_coarse_dofs_per_field(field_id)%a(current_coarse_dof) = object%get_lid()
             current_coarse_dof = current_coarse_dof + 1
          end if
       end do
       call object_iterator%next()
    end do	
  end subroutine standard_l1_setup_coarse_dofs
  
  subroutine standard_l1_setup_constraint_matrix(this, par_fe_space, constraint_matrix) 
    implicit none
    class(standard_l1_coarse_fe_handler_t), intent(in)    :: this
    type(par_fe_space_t)                  , intent(in)    :: par_fe_space
	type(coo_sparse_matrix_t)             , intent(inout) :: constraint_matrix
  end subroutine standard_l1_setup_constraint_matrix
  
  subroutine standard_l1_setup_weighting_operator(this, par_fe_space, weighting_operator) 
    implicit none
    class(standard_l1_coarse_fe_handler_t), intent(in)    :: this
    type(par_fe_space_t)                  , intent(in)    :: par_fe_space
	class(operator_t), allocatable        , intent(inout) :: weighting_operator
  end subroutine standard_l1_setup_weighting_operator
  
  subroutine standard_lgt1_setup_coarse_dofs(this, coarse_fe_space) 
    implicit none
    class(standard_lgt1_coarse_fe_handler_t), intent(in)    :: this
    type(coarse_fe_space_t)                 , intent(inout) :: coarse_fe_space
  end subroutine standard_lgt1_setup_coarse_dofs
