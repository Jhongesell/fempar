! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine dirk_solver_create( this, ts_op, nl_solver)
  implicit none
  class(dirk_solver_t),                    intent(inout) :: this
  type(time_stepping_operator_t) , target, intent(in)    :: ts_op
  type(nonlinear_solver_t)      ,  target, intent(in)    :: nl_solver
  this%ts_op     => ts_op
  this%nl_solver => nl_solver
end subroutine dirk_solver_create

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine dirk_solver_apply( this, x, y )
  implicit none
  class(dirk_solver_t),   intent(inout) :: this
  class(vector_t)     ,   intent(in)    :: x
  class(vector_t)     ,   intent(inout) :: y
  integer(ip) :: i
  type(time_stepping_stage_fe_operator_t), pointer :: stage_op

  assert ( associated(this%ts_op) )
  assert ( associated(this%nl_solver) )
  
  call this%ts_op%set_initial_data(x) 
  call y%copy(x)
  do i = 1, this%ts_op%scheme%num_stages
    stage_op => this%ts_op%get_stage_operator(i,i)
    call stage_op%set_evaluation_time( this%ts_op%get_current_time() + this%ts_op%get_time_step() * this%ts_op%scheme%c(i) )
    call this%nl_solver%solve ( stage_op, this%ts_op%dofs_stages(i) )
    call y%axpby(this%ts_op%dt*this%ts_op%scheme%b(i),this%ts_op%dofs_stages(i),1.0_rp)
  end do
end subroutine dirk_solver_apply

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine dirk_solver_advance_fe_function( this, fe_function)
  implicit none
  class(dirk_solver_t),   intent(inout) :: this
  type(fe_function_t),    intent(inout) :: fe_function
  class(vector_t),          allocatable :: x
  class(vector_t),              pointer :: y
  class(serial_fe_space_t),     pointer :: fe_space
  real(rp)                              :: current_time
  
  y => fe_function%get_free_dof_values()
  call y%mold(x)
  call x%clone(y)
  call x%copy(y)
  
  call this%apply(x,y)
  
  call this%ts_op%update_current_time() 
  current_time = this%ts_op%get_current_time() 
  
  fe_space => this%ts_op%fe_op%get_fe_space()
  call fe_space%interpolate_dirichlet_values(fe_function, time=current_time) !pmartorell: not nice to be called here
end subroutine
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine dirk_solver_free( this )
  implicit none
  class(dirk_solver_t), intent(inout) :: this
  nullify(this%ts_op)
  nullify(this%nl_solver)
end subroutine dirk_solver_free

