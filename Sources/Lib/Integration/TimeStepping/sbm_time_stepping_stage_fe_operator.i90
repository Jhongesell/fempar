! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine time_stepping_stage_fe_operator_set_row(this, i, j)
 implicit none
 class(time_stepping_stage_fe_operator_t), intent(inout) :: this
 integer(ip), intent(in) :: i, j
 this%i = i; this%j = j
end subroutine time_stepping_stage_fe_operator_set_row

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine time_stepping_stage_fe_operator_create_from_operators (this, ts_op, fe_op, mass_op )
  implicit none
  class(time_stepping_stage_fe_operator_t)  , intent(inout) :: this
  class(time_stepping_operator_t), target           , intent(in)    :: ts_op
  class(fe_nonlinear_operator_t),  target           , intent(in)    :: fe_op
  class(fe_nonlinear_operator_t),  target           , intent(in)    :: mass_op

  call this%free()

  ! sbadia: Here some compatiblity checks between fe_op and mass_op
  this%ts_op   => ts_op
  this%fe_op   => fe_op
  this%mass_op => mass_op
  
  assert(.not. associated(this%get_state())) ! Equivalent to: "assert ( this%state == start )"
  call this%set_state()
  
  ! sbadia: sthg more clever than just take it from fe_op
  call this%copy(fe_op)
  call this%reallocate_after_remesh()
end subroutine time_stepping_stage_fe_operator_create_from_operators

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine time_stepping_stage_fe_operator_free(this)
  implicit none
  class(time_stepping_stage_fe_operator_t), intent(inout) :: this
  integer(ip) :: istat
  call this%fe_nonlinear_operator_t%free()
  if (associated (this%get_state())) then
     nullify(this%ts_op)
     nullify(this%fe_op)
     nullify(this%mass_op)
  end if
end subroutine time_stepping_stage_fe_operator_free

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
function time_stepping_stage_fe_operator_is_linear(this)
  implicit none
  class(time_stepping_stage_fe_operator_t), intent(in) :: this
  logical :: time_stepping_stage_fe_operator_is_linear
  time_stepping_stage_fe_operator_is_linear = &
     ( this%fe_op%is_linear() .and. this%mass_op%is_linear() )
end function time_stepping_stage_fe_operator_is_linear

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine time_stepping_stage_fe_operator_compute_residual(this)
  implicit none
  class(time_stepping_stage_fe_operator_t), intent(in) :: this
  class(environment_t), pointer :: environment
  ! sbadia: this is nonsense ??? also wrong in fe_nonlinear operator_t
  class(serial_fe_space_t)   , pointer :: fe_sp
  class(discrete_integration_t), pointer :: di_fe_op, di_mass_op
  fe_sp => this%get_fe_space()
  environment => fe_sp%get_environment()
  di_mass_op => this%fe_op%get_discrete_integration()
  di_fe_op => this%mass_op%get_discrete_integration()

  assert ( associated(this%get_state())  )


  if ( .not. ( this%get_state() == residual_computed .or. this%get_state() == assembler_computed ) ) then
     if ( environment%am_i_l1_task() ) then
        if ( associated(this%get_trial_fe_space()) ) then
           call di_fe_op%integrate_petrov_galerkin_residual( this%get_fe_space(), this%get_trial_fe_space(), this%get_assembler() )
           ! sbadia: scal arrays of assembler assembler%get_matrix()*dt
		   if ( this%i == this%j ) call di_mass_op%integrate_petrov_galerkin_residual( this%get_fe_space(), this%get_trial_fe_space(), this%get_assembler() )
        else
           call di_fe_op%integrate_residual( this%get_fe_space(), this%get_assembler() )
		   ! sbadia: scal arrays of assembler assembler%get_array()*dt
           if ( this%i == this%j ) call di_mass_op%integrate_residual( this%get_fe_space(), this%get_assembler() )
        end if
     end if

     if (this%get_state() == tangent_computed) then
        call this%set_state(assembler_computed)
     else ! created
        assert ( this%get_state() == created )
        call this%set_state(residual_computed)
     end if
  end if
  
end subroutine time_stepping_stage_fe_operator_compute_residual

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine time_stepping_stage_fe_operator_compute_tangent(this)
  implicit none
  class(time_stepping_stage_fe_operator_t), intent(inout) :: this
  class(environment_t), pointer :: environment
  class(discrete_integration_t), pointer :: di_fe_op, di_mass_op
  class(assembler_t), pointer :: assembler
  class(serial_fe_space_t)   , pointer :: fe_sp
  fe_sp => this%get_fe_space()
  environment =>  fe_sp%get_environment()
  di_mass_op => this%fe_op%get_discrete_integration()
  di_fe_op => this%mass_op%get_discrete_integration()
  assembler => this%get_assembler()

  assert ( associated(this%get_state()) )

  if ( .not. ( this%get_state() == tangent_computed .or. this%get_state() == assembler_computed ) ) then
     if ( environment%am_i_l1_task() ) then
        if ( associated(this%get_trial_fe_space()) ) then
           call di_fe_op%integrate_petrov_galerkin_tangent( this%get_fe_space(), this%get_trial_fe_space(), this%get_assembler() )
		   ! times dt * aij
		   call di_mass_op%integrate_petrov_galerkin_tangent( this%get_fe_space(), this%get_trial_fe_space(), this%get_assembler() )
        else
           call di_fe_op%integrate_tangent( this%get_fe_space(), this%get_assembler() )
		   ! times dt * aij
		   call di_mass_op%integrate_tangent( this%get_fe_space(), this%get_assembler() )
        end if
     end if
     ! sbadia: error i don't understand
	 !call assembler%compress_storage(this%get_sparse_matrix_storage_format())
	 ! sbadia: alternative
	 call this%compress_assembler()
     if (this%get_state() == residual_computed) then
        call this%set_state(assembler_computed)
     else ! created
        assert ( this%get_state() == created )
        call this%set_state(tangent_computed)
     end if
  end if
end subroutine time_stepping_stage_fe_operator_compute_tangent

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine time_stepping_stage_fe_operator_set_evaluation_point(this,x) 
  implicit none
  class(time_stepping_stage_fe_operator_t), intent(in)    :: this
  class(vector_t) , intent(in)    :: x
  class(vector_t), allocatable    :: aux
  class(discrete_integration_t), pointer :: di_fe_op, di_mass_op
  class(assembler_t), pointer :: assembler
  integer(ip) :: j, istat
  di_mass_op => this%fe_op%get_discrete_integration()
  di_fe_op => this%mass_op%get_discrete_integration()
  assembler => this%get_assembler()
  
  allocate ( aux, mold = x, stat = istat ); check(istat==0)
  call x%GuardTemp()
  call aux%copy(x)
  this%ts_op%dofs_stages(this%i) = x
  aux = this%ts_op%initial_value
  do j = 1, this%ts_op%scheme%num_stages
     if ( this%ts_op%scheme%a(this%i,j) /= 0.0_rp ) then
	    aux = aux + this%ts_op%dofs_stages(j)*this%ts_op%scheme%a(this%i,j)
     end if
  end do
  call di_fe_op%set_evaluation_point(aux)
  call di_mass_op%set_evaluation_point(x)
  call this%set_state(created)
  call assembler%init_array(0.0_rp)  
  call assembler%init_matrix(0.0_rp)
  call aux%free()
  call x%CleanTemp()
end subroutine time_stepping_stage_fe_operator_set_evaluation_point
