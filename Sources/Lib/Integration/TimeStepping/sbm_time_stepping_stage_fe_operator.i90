! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine time_stepping_stage_fe_operator_create (this, &
                                                   sparse_matrix_storage_format, &
                                                   diagonal_blocks_symmetric_storage,&
                                                   diagonal_blocks_symmetric,&
                                                   diagonal_blocks_sign,&
                                                   fe_space, &
                                                   discrete_integration, &
                                                   trial_fe_space )
  implicit none
  class(time_stepping_stage_fe_operator_t)  , intent(inout) :: this
  character(*)                              , intent(in)    :: sparse_matrix_storage_format
  logical                                   , intent(in)    :: diagonal_blocks_symmetric_storage(:)
  logical                                   , intent(in)    :: diagonal_blocks_symmetric(:)
  integer(ip)                               , intent(in)    :: diagonal_blocks_sign(:)
  class(serial_fe_space_t)        , target  , intent(inout) :: fe_space
  class(discrete_integration_t)   , target  , intent(in)    :: discrete_integration
  class(serial_fe_space_t), target, optional, intent(inout) :: trial_fe_space
  mcheck ( .false., "time_stepping_stage_fe_operator_t :: Illegal to call time_stepping_stage_fe_operator_t inherited from fe_nonlinear_operator_t")
end subroutine time_stepping_stage_fe_operator_create


subroutine time_stepping_stage_fe_operator_create_from_operators (this, ts_op, fe_nl_op, mass_nl_op )
  implicit none
  class(time_stepping_stage_fe_operator_t)  , intent(inout) :: this
  type(time_stepping_operator_t),  target   , intent(in)    :: ts_op
  class(fe_nonlinear_operator_t),  target   , intent(in)    :: fe_nl_op
  class(fe_nonlinear_operator_t),  target   , intent(in)    :: mass_nl_op
  class(serial_fe_space_t), pointer :: trial_fe_space
  
  type(vector_space_t), pointer :: fe_nl_op_domain, fe_nl_op_range
  type(vector_space_t), pointer :: mass_nl_op_domain, mass_nl_op_range
 
  call this%free()

  fe_nl_op_domain   => fe_nl_op%get_domain_vector_space()
  mass_nl_op_domain => mass_nl_op%get_domain_vector_space()
  massert (fe_nl_op_domain%equal_to(mass_nl_op_domain), "fe_nl_op%domain_space() MUST MATCH mass_nl_op%domain_space()" )
  
  call fe_nl_op_domain%create_vector(this%aux)
  !call this%aux%allocate()

  fe_nl_op_range    => fe_nl_op%get_range_vector_space()
  mass_nl_op_range  => mass_nl_op%get_range_vector_space()
  massert (fe_nl_op_range%equal_to(mass_nl_op_range), "fe_nl_op%range_space() MUST MATCH mass_nl_op%range_space()" )
  
  this%ts_op      => ts_op
  this%fe_nl_op   => fe_nl_op
  this%mass_nl_op => mass_nl_op

  trial_fe_space => this%fe_nl_op%get_trial_fe_space()
  if ( associated(trial_fe_space) ) then
    call this%fe_nonlinear_operator_t%create(this%fe_nl_op%get_sparse_matrix_storage_format(), &
                                             this%fe_nl_op%get_diagonal_blocks_symmetric_storage(),&
                                             this%fe_nl_op%get_diagonal_blocks_symmetric(),&
                                             this%fe_nl_op%get_diagonal_blocks_sign(),&
                                             this%fe_nl_op%get_fe_space(), &
                                             this%fe_nl_op%get_discrete_integration(), &
                                             trial_fe_space)  
  else
    call this%fe_nonlinear_operator_t%create(this%fe_nl_op%get_sparse_matrix_storage_format(), &
                                             this%fe_nl_op%get_diagonal_blocks_symmetric_storage(),&
                                             this%fe_nl_op%get_diagonal_blocks_symmetric(),&
                                             this%fe_nl_op%get_diagonal_blocks_sign(),&
                                             this%fe_nl_op%get_fe_space(), &
                                             this%fe_nl_op%get_discrete_integration())
  end if
end subroutine time_stepping_stage_fe_operator_create_from_operators

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine time_stepping_stage_fe_operator_free(this)
  implicit none
  class(time_stepping_stage_fe_operator_t), intent(inout) :: this
  integer(ip) :: istat
  call this%fe_nonlinear_operator_t%free()
  nullify(this%ts_op)
  nullify(this%fe_nl_op)
  nullify(this%mass_nl_op)
  if ( allocated(this%aux) ) then
    call this%aux%free()
    deallocate(this%aux, stat=istat); check(istat==0);
  end if
end subroutine time_stepping_stage_fe_operator_free

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine time_stepping_stage_fe_operator_set_row(this, i, j)
 implicit none
 class(time_stepping_stage_fe_operator_t), intent(inout) :: this
 integer(ip)                             , intent(in)    :: i, j
 this%i = i 
 this%j = j
end subroutine time_stepping_stage_fe_operator_set_row

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine time_stepping_stage_fe_operator_set_evaluation_point(this,x) 
  implicit none
  class(time_stepping_stage_fe_operator_t), target, intent(inout) :: this
  class(vector_t)                         , target, intent(in)    :: x
  
  class(discrete_integration_t), pointer :: di_fe_op, di_mass_op
  class(assembler_t), pointer :: assembler
  integer(ip) :: j, istat
  class(vector_t), pointer :: dummy_v
  
  assert(same_type_as(this%aux, x))
  assert(same_type_as(this%ts_op%initial_value,x))
  
  call x%GuardTemp()
  
  ! sbadia: TO-DO: change this to intent(inout) and solve compilation errors in cascade
  dummy_v => this%aux
  call dummy_v%copy(this%ts_op%initial_value)
  call this%ts_op%dofs_stages(this%i)%copy(x)
   
  do j = 1, this%ts_op%scheme%num_stages
    if ( this%ts_op%scheme%a(this%i,j) /= 0.0_rp ) then
      call dummy_v%axpby(this%ts_op%dt*this%ts_op%scheme%a(this%i,j), this%ts_op%dofs_stages(j), 1.0_rp) 
    end if
  end do
  !di_fe_op   => this%fe_nl_op%get_discrete_integration()
  !di_mass_op => this%mass_nl_op%get_discrete_integration()
  call this%fe_nl_op%set_evaluation_point(this%aux)
  call this%mass_nl_op%set_evaluation_point(x)
  
  call this%fe_nonlinear_operator_t%set_evaluation_point(x)
    
  call x%CleanTemp()
end subroutine time_stepping_stage_fe_operator_set_evaluation_point

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
function time_stepping_stage_fe_operator_is_linear(this)
  implicit none
  class(time_stepping_stage_fe_operator_t), intent(in) :: this
  logical :: time_stepping_stage_fe_operator_is_linear
  time_stepping_stage_fe_operator_is_linear = &
     ( this%fe_nl_op%is_linear() .and. this%mass_nl_op%is_linear() )
end function time_stepping_stage_fe_operator_is_linear

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine time_stepping_stage_fe_operator_compute_residual(this)
  implicit none
  class(time_stepping_stage_fe_operator_t), intent(inout) :: this
  class(environment_t)         , pointer :: environment
  class(assembler_t)           , pointer :: this_assembler
  class(assembler_t)           , pointer :: mass_assembler
  class(assembler_t)           , pointer :: fe_op_assembler
  class(discrete_integration_t), pointer :: di_mass_op
  class(discrete_integration_t), pointer :: di_fe_op
  class(serial_fe_space_t)     , pointer :: fe_sp
  class(serial_fe_space_t)     , pointer :: trial_fe_sp
  integer(ip)                  , pointer :: state
  class(vector_t)              , pointer :: residual


  state => this%get_state() 
  assert (associated(state))

  this_assembler   => this%get_assembler()
  fe_sp            => this%get_fe_space()
  trial_fe_sp      => this%get_trial_fe_space()
  environment      => fe_sp%get_environment()
  di_fe_op         => this%fe_nl_op%get_discrete_integration()
  di_mass_op       => this%mass_nl_op%get_discrete_integration()

  if ( .not. ( this%get_state() == residual_computed .or. this%get_state() == assembler_computed ) ) then
    if ( environment%am_i_l1_task() ) then
      residual => this_assembler%get_array()
      if ( associated(trial_fe_sp) ) then
         call di_fe_op%integrate_petrov_galerkin_residual( fe_sp, trial_fe_sp, this_assembler )
         call residual%scal(this%ts_op%dt, residual)
         ! sbadia: here we should consider as Dirichlet data the time derivative of the fixed value, to be done
         if ( this%i == this%j ) call di_mass_op%integrate_petrov_galerkin_residual( fe_sp, trial_fe_sp, this_assembler )
      else
           call di_fe_op%integrate_residual( fe_sp, this_assembler )
           call residual%scal(this%ts_op%dt, residual)
           ! sbadia: here we should consider as Dirichlet data the time derivative of the fixed value, to be done
           if ( this%i == this%j ) call di_mass_op%integrate_residual( fe_sp, this_assembler ) 
      end if
    end if

    if (this%get_state() == tangent_computed) then
       call this%set_state(assembler_computed)
    else ! created
       assert ( this%get_state() == created )
       call this%set_state(residual_computed)
    end if
  end if
end subroutine time_stepping_stage_fe_operator_compute_residual

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine time_stepping_stage_fe_operator_compute_tangent(this)
  implicit none
  class(time_stepping_stage_fe_operator_t), intent(inout) :: this
  class(serial_fe_space_t)     , pointer :: fe_sp
  class(serial_fe_space_t)     , pointer :: trial_fe_sp
  class(environment_t)         , pointer :: environment
  class(discrete_integration_t), pointer :: di_fe_op
  class(discrete_integration_t), pointer :: di_mass_op
  class(assembler_t)           , pointer :: assembler
  integer(ip)                  , pointer :: state
  class(matrix_t)              , pointer :: tangent
  class(array_t)               , pointer :: array 

  ! DEBUG variables
  class(matrix_t), pointer :: A
  
  
  state => this%get_state() 
  assert (associated(state))

  fe_sp       => this%get_fe_space()
  trial_fe_sp => this%get_trial_fe_space()
  environment => fe_sp%get_environment()
  di_fe_op    => this%fe_nl_op%get_discrete_integration()
  di_mass_op  => this%mass_nl_op%get_discrete_integration()
  assembler   => this%get_assembler()

  if ( .not. ( this%get_state() == tangent_computed .or. this%get_state() == assembler_computed ) ) then
    if ( environment%am_i_l1_task() ) then
       tangent => assembler%get_matrix()
       if ( associated(this%get_trial_fe_space()) ) then
          call di_fe_op%integrate_petrov_galerkin_tangent( fe_sp, trial_fe_sp, assembler )
          call tangent%scal( this%ts_op%dt * this%ts_op%scheme%a(this%i,this%j) ) ! times dt * aij
          call di_mass_op%integrate_petrov_galerkin_tangent( fe_sp, trial_fe_sp, assembler )
       else
          call di_fe_op%integrate_tangent( fe_sp, assembler )
          call tangent%scal( this%ts_op%dt * this%ts_op%scheme%a(this%i,this%j) ) ! times dt * aij
          call di_mass_op%integrate_tangent( fe_sp, assembler )
          ! amartin: Can we avoid calling compress storage? 
          call assembler%compress_storage(csr_format)        
          
          A => assembler%get_matrix()
          select type(A)
          class is (sparse_matrix_t)
            call A%print_matrix_market(6)
          end select
          
          
          
       end if
    end if
    call assembler%compress_storage(this%get_sparse_matrix_storage_format())
    if (this%get_state() == residual_computed) then
       call this%set_state(assembler_computed)
    else ! created
       assert ( this%get_state() == created )
       call this%set_state(tangent_computed)
    end if
  end if
end subroutine time_stepping_stage_fe_operator_compute_tangent
