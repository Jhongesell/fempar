! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! edge_map_t type procedures
!==================================================================================================
subroutine edge_map_create(this, quadrature, reference_fe_geo)
  implicit none
  ! Parameters
  class(edge_map_t)     , intent(inout) :: this
  type(quadrature_t)    , intent(in)    :: quadrature
  class(reference_fe_t) , intent(in)    :: reference_fe_geo

  integer(ip)           :: num_edge_dims
  integer(ip)           :: num_vertices_face
  integer(ip)           :: istat
  integer(ip)           :: num_dofs_on_edge
  
  call this%free()
  this%num_dims        = reference_fe_geo%num_dims
  this%num_quadrature_points = quadrature%num_quadrature_points
  num_edge_dims        = 1

  call reference_fe_geo%create_edget_interpolation &
       &                ( quadrature, this%interpolation)

  call memalloc(SPACE_DIM, &
                SPACE_DIM, &
                this%num_quadrature_points, &
                this%jacobian,__FILE__,__LINE__)

  call memalloc(this%num_quadrature_points, &
                this%det_jacobian,__FILE__,__LINE__)

  call memalloc(SPACE_DIM, &
                this%num_quadrature_points, &
                this%tangents,__FILE__,__LINE__)

  allocate(this%quadrature_points_coordinates(this%num_quadrature_points), stat=istat)
  check(istat==0)

  num_dofs_on_edge = reference_fe_geo%get_num_dofs_on_n_face(reference_fe_geo%get_first_n_face_id_of_dim(1))
  allocate(this%nodes_coordinates(num_dofs_on_edge), stat=istat)
  check(istat==0)

  this%reference_fe_characteristic_length = reference_fe_geo%get_characteristic_length()
end subroutine edge_map_create

!==================================================================================================
subroutine edge_map_update(this,local_edge_id,reference_fe,quadrature)
  implicit none    
  class(edge_map_t)    , intent(inout) :: this
  integer(ip)          , intent(in)    :: local_edge_id
  class(reference_fe_t), intent(in)    :: reference_fe
  type(quadrature_t)   , intent(in)    :: quadrature

  integer(ip) :: evaluation_point_id, node_id, idime, jdime, local_vef_id,  reorientation_factor
  integer(ip) :: num_edge_dims, num_cell_dims
  type(vector_field_t) :: aux_vector

  num_edge_dims = 1
  num_cell_dims = reference_fe%num_dims

  ! See comment in facet_orientation (polytope module) about the reasoning behind this
  call this%compute_quadrature_points_coordinates()

  ! Initialize values
  this%jacobian           = 0.0_rp
  this%measure            = 0.0_rp 
  do evaluation_point_id = 1, quadrature%num_quadrature_points

     ! Compute jacobian matrix
     call this%compute_jacobian()

     this%tangents (:, evaluation_point_id) = this%jacobian(:, 1, evaluation_point_id)
     
     ! Compute the measure of the edge (= norm of the edge tangent)
     this%det_jacobian(evaluation_point_id) = &
          &                         sqrt(dot_product(this%tangents(:,evaluation_point_id), &
          &                                          this%tangents(:,evaluation_point_id)))
 
      this%tangents (:, evaluation_point_id) = this%tangents (:, evaluation_point_id)/this%det_jacobian(evaluation_point_id)
      this%measure = this%measure + this%det_jacobian(evaluation_point_id) * quadrature%get_weight(evaluation_point_id)
  end do
  
end subroutine edge_map_update

!==================================================================================================
subroutine edge_map_free( this )
  implicit none
  class(edge_map_t), intent(inout) :: this
  call this%base_map_t%free()
  if (allocated(this%tangents)) call memfree ( this%tangents, __FILE__, __LINE__ )
end subroutine edge_map_free

!==================================================================================================
subroutine edge_map_get_tangent(this, qpoint, tangent)
 implicit none
 class(edge_map_t)     , intent(in)    :: this
 integer(ip)         , intent(in)    :: qpoint
 type(vector_field_t), intent(inout) :: tangent 
 integer(ip) :: idime
 assert ( allocated(this%tangents) )
 do idime = 1, this%num_dims
   call tangent%set(idime,this%tangents(idime,qpoint))
 end do
end subroutine edge_map_get_tangent
