! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  ! We should have a generic interface with two differents overloads, one for
  ! isotropic order (i.e., order would be a scalar) and another one for 
  ! anistropic order (i.e., order would be a SPACE_DIM array)
  function make_reference_fe ( topology, fe_type, num_dims, order, field_type, conformity, continuity )
    implicit none 
    character(*)          , intent(in) :: topology, fe_type
    integer(ip)           , intent(in) :: num_dims, order
    character(*)          , intent(in) :: field_type
    logical               , intent(in) :: conformity
    logical , optional    , intent(in) :: continuity
    
    type(p_reference_fe_t)             :: make_reference_fe
    logical :: valid_fe_type
    
    assert ( topology == topology_hex .or. topology == topology_tet )
    
#ifdef DEBUG
    valid_fe_type = &
      fe_type == fe_type_lagrangian .or.&
      fe_type == fe_type_serendipity .or.&
      fe_type == fe_type_raviart_thomas .or.&
      fe_type == fe_type_nedelec .or.&
      fe_type == fe_type_void
      assert (valid_fe_type)
#endif

    
    if ( fe_type == fe_type_lagrangian ) then
       if ( topology == topology_hex ) then
          allocate ( hex_lagrangian_reference_fe_t :: make_reference_fe%p )
       elseif ( topology == topology_tet ) then
          allocate ( tet_lagrangian_reference_fe_t :: make_reference_fe%p )
       end if
    else if ( fe_type == fe_type_serendipity ) then
       if ( topology == topology_hex ) then
         allocate ( hex_serendipity_reference_fe_t :: make_reference_fe%p )
       elseif ( topology == topology_tet ) then
         mcheck(.false., 'Serendipity elements do not make sense for tet-like topologies')
       end if
    else if ( fe_type == fe_type_raviart_thomas ) then
       if ( topology == topology_hex ) then
          allocate ( hex_raviart_thomas_reference_fe_t :: make_reference_fe%p )
       elseif ( topology == topology_tet ) then
          ! allocate ( tet_raviart_thomas_reference_fe_t :: make_reference_fe%p )
          ! Not implemented !
          check(.false.)
       end if
    else if ( fe_type == fe_type_nedelec ) then
       if ( topology == topology_hex ) then
          allocate ( hex_nedelec_reference_fe_t :: make_reference_fe%p )
       elseif ( topology == topology_tet ) then
          allocate ( tet_nedelec_reference_fe_t :: make_reference_fe%p )
       end if   
    else if ( fe_type == fe_type_void ) then
       allocate ( void_reference_fe_t :: make_reference_fe%p )
    end if
    call make_reference_fe%p%create( topology, num_dims, order, field_type, conformity, continuity )
  
  end function make_reference_fe


