! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
!fe_map_t type procedures
subroutine fe_map_create( this, quadrature, reference_fe_geometry )
  implicit none
  ! Parameters
  class(fe_map_t)      , intent(inout) :: this
  type(quadrature_t)   , intent(in)    :: quadrature
  class(lagrangian_reference_fe_t), intent(in)    :: reference_fe_geometry

  integer(ip) :: number_nodes
  integer(ip) :: istat

  call this%free()
  this%number_dimensions        = reference_fe_geometry%number_dimensions
  this%number_quadrature_points = quadrature%number_quadrature_points

  call reference_fe_geometry%create_interpolation( quadrature, this%interpolation_geometry )

  call memalloc(this%number_dimensions, &
                this%number_dimensions, &
                this%number_quadrature_points, &
                this%jacobian,__FILE__,__LINE__)

  call memalloc(this%number_dimensions, &
                this%number_dimensions, &
                this%number_quadrature_points, &
                this%inv_jacobian,__FILE__,__LINE__)

  call memalloc(this%number_quadrature_points, &
                this%det_jacobian,__FILE__,__LINE__)


  allocate(this%coordinates_quadrature(this%number_quadrature_points), stat=istat)
  check(istat==0)

  number_nodes = reference_fe_geometry%get_number_shape_functions()
  allocate(this%coordinates_nodes(number_nodes), stat=istat)
  check(istat==0)

  this%reference_fe_characteristic_length = reference_fe_geometry%get_characteristic_length()
end subroutine fe_map_create

!==================================================================================================
subroutine fe_map_create_on_face( this, local_face_id, quadrature, reference_fe_geometry )
  implicit none
  ! Parameters
  class(fe_map_t)      , intent(inout) :: this
  integer(ip)          , intent(in)    :: local_face_id
  type(quadrature_t), intent(in)    :: quadrature
  class(lagrangian_reference_fe_t), intent(in)    :: reference_fe_geometry

  integer(ip) :: number_nodes
  integer(ip) :: istat

  call this%free()
  this%number_dimensions        = reference_fe_geometry%number_dimensions
  this%number_quadrature_points = quadrature%number_quadrature_points

  call reference_fe_geometry%create_face_interpolation( local_face_id, quadrature,                &
       &                                                this%interpolation_geometry )

  call memalloc(this%number_dimensions, &
                this%number_dimensions, &
                this%number_quadrature_points, &
                this%jacobian,__FILE__,__LINE__)

  call memalloc(this%number_dimensions, &
                this%number_dimensions, &
                this%number_quadrature_points, &
                this%inv_jacobian,__FILE__,__LINE__)

  call memalloc(this%number_quadrature_points, &
                this%det_jacobian,__FILE__,__LINE__)

  allocate(this%coordinates_quadrature(this%number_quadrature_points), stat=istat)
  check(istat==0)

  number_nodes = reference_fe_geometry%get_number_shape_functions()
  allocate(this%coordinates_nodes(number_nodes), stat=istat)
  check(istat==0)

  this%reference_fe_characteristic_length = reference_fe_geometry%get_characteristic_length()
end subroutine fe_map_create_on_face

!==================================================================================================
subroutine fe_map_free( this )
  implicit none
  class(fe_map_t), intent(inout) :: this
  call this%base_map_t%free()
  if ( allocated(this%inv_jacobian) ) call memfree(this%inv_jacobian,__FILE__,__LINE__)
  if ( allocated(this%d2sdx) ) call memfree(this%d2sdx,__FILE__,__LINE__)
end subroutine fe_map_free

!==================================================================================================
subroutine fe_map_update( this, quadrature)
  !-----------------------------------------------------------------------
  ! A map obtained from the (usually isoparametric) interpolation of the geometry
  !-----------------------------------------------------------------------
  implicit none    
  class(fe_map_t)      , intent(inout) :: this
  type(quadrature_t), intent(in)    :: quadrature

  ! Locals
  real(rp), allocatable :: wmat1(:,:,:)
  real(rp), allocatable :: wmat2(:,:,:), wvec1(:)
  real(rp)    :: hnatu
  real(rp)    :: enor0,h_tem
  integer(ip) :: ndime,nnode,nlocs,ntens
  integer(ip) :: ilocs,idime,jdime,kdime,ldime,inode,itens
  logical :: khes
  type(vector_field_t) :: aux_vector

  khes = .false.
  if ( allocated( this%interpolation_geometry%hessian ) ) then 
     khes = .true.
  end if

  ndime = this%interpolation_geometry%number_dimensions
  nnode = size(this%interpolation_geometry%shape_functions,2)
  nlocs = this%interpolation_geometry%number_quadrature_points

  do ilocs=1,nlocs
     ! Matmul is not thread safe
     !map%jacob(:,:,ilocs)=matmul(elcod,transpose(int%deriv(:,:,ilocs)))
     do jdime=1,ndime
        aux_vector = 0.0_rp
        do inode=1,nnode
           aux_vector = aux_vector + this%coordinates_nodes(inode) * &
                & this%interpolation_geometry%shape_derivatives(1,jdime,inode,ilocs)
        end do
        do idime=1,ndime
           this%jacobian(idime,jdime,ilocs) = aux_vector%get(idime)
        end do
     end do
     ! J^(-t)
     call invmtx(this%jacobian(:,:,ilocs),this%inv_jacobian(:,:,ilocs),this%det_jacobian(ilocs),ndime)
  end do
  ! When using oriented tetrahedral meshes |J| may become negative, absolute value should be used
  ! to ensure positiveness
  if (nlocs > 0) then
     if (this%det_jacobian(1)<0.0_rp) then
        this%det_jacobian_positiveness = .false.
        this%det_jacobian = abs(this%det_jacobian)
     else
        this%det_jacobian_positiveness = .true.
     end if
  else 
     this%det_jacobian_positiveness = .true.  
  end if
  
  ! Evaluation (Gauss) point coordinates
  call this%compute_quadrature_coordinates()

  ! ! Second derivatives of the map
  if( khes ) then
     ntens=this%interpolation_geometry%number_entries_symmetric_tensor
     ! Check that second derivativesof the map have been allocated.
     assert(ndime==size(this%d2sdx,dim=1))
     assert(nlocs==size(this%d2sdx,dim=4))

     call memalloc(ndime,ndime,nnode,wmat1,__FILE__,__LINE__)
     call memalloc(ndime,ndime,nnode,wmat2,__FILE__,__LINE__)
     call memalloc(ntens,wvec1,__FILE__,__LINE__)

     do ilocs=1,nlocs
        ! Transforms the array HESSI to a symmetric matrix WMAT1
        do inode=1,nnode
           do itens = 1, ntens
              wvec1(itens) = this%interpolation_geometry%hessian(1,itens,inode,ilocs)
           end do
           call vetoma(wvec1,wmat1(1,1,inode),ndime,ntens)
        end do

        ! Computes (d^2 N / d s_k d s_l) (d s_k/ d x_i)(d s_l/ d x_j) for
        ! each node
        do inode=1,nnode
           call btdbma(wmat2(1,1,inode),wmat1(1,1,inode), &
                &        this%inv_jacobian(:,:,ilocs),ndime,ndime)
        end do

        ! Obtains (d^2 s_k / d x_i d x_j) as the solution of the system
        ! (d x_l / d s_k) (d^2 s_k / d x_i d x_j) 
        !     = - (d^2 x_l / d s_k d s_l) (d s_k/ d x_i)(d s_l/ d x_j), 
        ! for l,i,j = 1,...,NDIME
        do kdime=1,ndime
           do idime=1,ndime
              do jdime=1,ndime
                 this%d2sdx(kdime,idime,jdime,ilocs)=0.0_rp
                 do ldime=1,ndime
                    do inode=1,nnode
                       this%d2sdx(kdime,idime,jdime,ilocs) =    &
                            & this%d2sdx(kdime,idime,jdime,ilocs) &
                            & - this%inv_jacobian(kdime,ldime,ilocs)     &
                            &   * wmat2(idime,jdime,inode) * quadrature%coordinates(ldime,inode)
                    end do
                 end do
              end do
           end do
        end do
     end do
     call memfree(wmat1,__FILE__,__LINE__)
     call memfree(wmat2,__FILE__,__LINE__)
  end if

end subroutine fe_map_update

!==================================================================================================
subroutine fe_map_update_interpolation( this, quadrature, reference_fe_geometry )
  implicit none
  class(fe_map_t)                 , intent(inout) :: this
  type(quadrature_t)              , intent(in)    :: quadrature
  class(lagrangian_reference_fe_t), intent(in)    :: reference_fe_geometry
  call reference_fe_geometry%create_interpolation( quadrature, this%interpolation_geometry )
end subroutine fe_map_update_interpolation

subroutine fe_map_print( this )
  implicit none
  class(fe_map_t) :: this
  integer(ip) :: i,j,k
  call this%interpolation_geometry%print()
  write(*,*) '%%%%%%%%%%%%%%%% JACOBIAN: %%%%%%%%%%%%%%%%'
  do i = 1, this%number_quadrature_points
     write(*,*) '%%%%%%%%%%%%%%%% Gauss point: ',i
     do j = 1, this%number_dimensions
        do k = 1, this%number_dimensions
           write(*,*) '%%%% (',j,',',k,') = ', this%jacobian(j,k,i)
        end do
     end do
  end do
end subroutine fe_map_print

function fe_map_get_det_jacobian ( this, i )
  implicit none
  class(fe_map_t), intent(in) :: this
  integer(ip)    , intent(in) :: i
  real(rp) :: fe_map_get_det_jacobian
  fe_map_get_det_jacobian = this%det_jacobian(i)
end function fe_map_get_det_jacobian

function fe_map_get_det_jacobians ( this )
  implicit none
  class(fe_map_t), target, intent(in) :: this
  real(rp), pointer :: fe_map_get_det_jacobians(:)
  fe_map_get_det_jacobians => this%det_jacobian
end function fe_map_get_det_jacobians

!==================================================================================================
function fe_map_compute_h ( this, qpoin)
  implicit none
  class(fe_map_t), intent(in) :: this
  integer(ip)    , intent(in) :: qpoin
  real(rp)                    :: fe_map_compute_h

  integer(ip) :: idime, jdime
  real(rp)    :: inverse_h(SPACE_DIM), volumetric_h
  integer(ip) :: i,j

  assert( qpoin>=1 .and. qpoin <= this%number_quadrature_points)

  inverse_h = 0.0_rp
  do idime = 1, this%number_dimensions
     do jdime = 1,  this%number_dimensions
        inverse_h(idime) = inverse_h(idime) + this%inv_jacobian(idime,jdime,qpoin)**2.0_rp
     end do
     inverse_h(idime) = sqrt(inverse_h(idime))
  end do

  volumetric_h = inverse_h(1)
  do j = 2, this%number_dimensions
     volumetric_h = volumetric_h * inverse_h(j)
  end do
  volumetric_h = 1.0_rp / volumetric_h
  volumetric_h = volumetric_h**(1.0_rp/real(this%number_dimensions))
  fe_map_compute_h = this%reference_fe_characteristic_length*volumetric_h
end function fe_map_compute_h

!==================================================================================================
function fe_map_compute_h_min ( this, qpoin)
  implicit none
  class(fe_map_t), intent(in) :: this
  integer(ip)    , intent(in) :: qpoin
  real(rp)                    :: fe_map_compute_h_min

  integer(ip) :: idime, jdime
  real(rp)    :: inverse_h(SPACE_DIM), minimum_h
  integer(ip) :: i,j

  assert( qpoin>=1 .and. qpoin <= this%number_quadrature_points)

  inverse_h = 0.0_rp
  do idime = 1, this%number_dimensions
     do jdime = 1,  this%number_dimensions
        inverse_h(idime) = inverse_h(idime) + this%inv_jacobian(idime,jdime,qpoin)**2.0_rp
     end do
     inverse_h(idime) = sqrt(inverse_h(idime))
  end do  

  minimum_h = 1.0_rp/inverse_h(1)
  do j = 2, this%number_dimensions
     minimum_h = min(minimum_h, 1.0_rp/inverse_h(j))
  end do
  fe_map_compute_h_min = this%reference_fe_characteristic_length*minimum_h
end function fe_map_compute_h_min

!==================================================================================================
function fe_map_compute_h_max ( this, qpoin)
  implicit none
  class(fe_map_t), intent(in) :: this
  integer(ip)    , intent(in) :: qpoin
  real(rp)                    :: fe_map_compute_h_max

  integer(ip) :: idime, jdime
  real(rp)    :: inverse_h(SPACE_DIM), maximum_h
  integer(ip) :: i,j

  assert( qpoin>=1 .and. qpoin <= this%number_quadrature_points)

  inverse_h = 0.0_rp
  do idime = 1, this%number_dimensions
     do jdime = 1,  this%number_dimensions
        inverse_h(idime) = inverse_h(idime) + this%inv_jacobian(idime,jdime,qpoin)**2.0_rp
     end do
     inverse_h(idime) = sqrt(inverse_h(idime))
  end do  

  maximum_h = 1.0_rp/inverse_h(1)
  do j = 2, this%number_dimensions
     maximum_h = max(maximum_h, 1.0_rp/inverse_h(j))
  end do
  fe_map_compute_h_max = this%reference_fe_characteristic_length*maximum_h
end function fe_map_compute_h_max

!==================================================================================================
function fe_map_get_coordinates(this)
  implicit none
  class(fe_map_t)   , target, intent(in) :: this
  type(point_t), pointer :: fe_map_get_coordinates(:)
  fe_map_get_coordinates => this%coordinates_nodes
end function fe_map_get_coordinates

function fe_map_get_quadrature_points_coordinates(this)
  implicit none
  class(fe_map_t)   , target, intent(in) :: this
  type(point_t), pointer :: fe_map_get_quadrature_points_coordinates(:)
  fe_map_get_quadrature_points_coordinates => this%coordinates_quadrature
end function fe_map_get_quadrature_points_coordinates

!==================================================================================================
subroutine fe_map_get_inv_jacobian_tensor ( this, qpoin, inv_jacobian )
  implicit none
  class(fe_map_t)        , intent(in)  :: this
  integer(ip)            , intent(in)  :: qpoin
  type(tensor_field_t)   , intent(out) :: inv_jacobian
  ! Locals
  integer(ip) :: idime,jdime

  call inv_jacobian%init(0.0_rp)
  do jdime = 1, this%number_dimensions
     do idime = 1,  this%number_dimensions
        call inv_jacobian%set(idime,jdime,this%inv_jacobian(idime,jdime,qpoin))
     end do
  end do

end subroutine fe_map_get_inv_jacobian_tensor

!==================================================================================================
function fe_map_apply_inv_jacobian ( this, qpoin, v_in ) result ( v_out )
  implicit none
  class(fe_map_t)     , intent(in) :: this
  integer(ip)         , intent(in) :: qpoin
  type(vector_field_t), intent(in) :: v_in
  type(vector_field_t) :: v_out
  integer(ip)          :: idime,jdime
  real(rp)             :: vector_value
  assert( qpoin>=1 .and. qpoin <= this%number_quadrature_points)
  call v_out%init(0.0_rp)
  do jdime = 1, this%number_dimensions
     vector_value = v_in%get(jdime)
     do idime = 1,  this%number_dimensions
        call v_out%add(idime, this%inv_jacobian(idime,jdime,qpoin)*vector_value)
     end do
  end do  
end function fe_map_apply_inv_jacobian

!==================================================================================================
function fe_map_get_reference_h ( this )
  implicit none
  class(fe_map_t), intent(in) :: this
  real(rp) :: fe_map_get_reference_h
  fe_map_get_reference_h = this%reference_fe_characteristic_length
end function fe_map_get_reference_h

!==================================================================================================
subroutine fe_map_compute_quadrature_coordinates(this)
  implicit none
  class(fe_map_t), intent(inout) :: this
  integer(ip)   :: qpoin,inode,nnode,nquad

  nnode = this%interpolation_geometry%number_shape_functions
  nquad = this%number_quadrature_points
  do qpoin = 1,nquad
     call this%coordinates_quadrature(qpoin)%init(0.0_rp)
     do inode=1,nnode
        this%coordinates_quadrature(qpoin) = this%coordinates_quadrature(qpoin) + &
             & this%coordinates_nodes(inode) * this%interpolation_geometry%shape_functions(1,inode,qpoin)
     end do
  end do
  
end subroutine fe_map_compute_quadrature_coordinates

!==================================================================================================

function fe_map_is_det_jacobian_positive ( this )
  implicit none
  class(fe_map_t)     , intent(in)    :: this
  logical  ::  fe_map_is_det_jacobian_positive
  fe_map_is_det_jacobian_positive = this%det_jacobian_positiveness
end function fe_map_is_det_jacobian_positive

!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! p_fe_map_t type procedures
subroutine p_fe_map_allocate( this )
  implicit none
  class(p_fe_map_t), intent(inout) :: this
  allocate(this%p)
end subroutine p_fe_map_allocate

subroutine p_fe_map_free( this )
  implicit none
  class(p_fe_map_t), intent(inout) :: this
  call this%p%free()
  deallocate(this%p)
end subroutine p_fe_map_free
