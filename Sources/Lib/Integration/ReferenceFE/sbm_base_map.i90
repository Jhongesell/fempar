! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

!==================================================================================================
subroutine base_map_free( this )
  implicit none
  class(base_map_t), intent(inout) :: this
  if(allocated(this%jacobian)) call memfree(this%jacobian,__FILE__,__LINE__)
  if(allocated(this%det_jacobian)) call memfree(this%det_jacobian,__FILE__,__LINE__)
  if(allocated(this%coordinates_quadrature)) deallocate(this%coordinates_quadrature)
  if(allocated(this%coordinates_nodes)) deallocate(this%coordinates_nodes)
  call this%interpolation_geometry%free()
end subroutine base_map_free

!==================================================================================================
subroutine base_map_update_interpolation( this, quadrature, reference_fe_geometry )
  implicit none
  class(base_map_t)               , intent(inout) :: this
  type(quadrature_t)              , intent(in)    :: quadrature
  class(lagrangian_reference_fe_t), intent(in)    :: reference_fe_geometry
  call reference_fe_geometry%create_interpolation( quadrature, this%interpolation_geometry )
end subroutine base_map_update_interpolation

!==================================================================================================
function base_map_get_coordinates(this)
  implicit none
  class(base_map_t)   , target, intent(in) :: this
  type(point_t), pointer :: base_map_get_coordinates(:)
  base_map_get_coordinates => this%coordinates_nodes
end function base_map_get_coordinates

!==================================================================================================
function base_map_get_quadrature_points_coordinates(this)
  implicit none
  class(base_map_t)   , target, intent(in) :: this
  type(point_t), pointer :: base_map_get_quadrature_points_coordinates(:)
  base_map_get_quadrature_points_coordinates => this%coordinates_quadrature
end function base_map_get_quadrature_points_coordinates

!==================================================================================================
function base_map_get_quadrature_coordinates(this)
  implicit none
  class(base_map_t)   , target, intent(in) :: this
  type(point_t), pointer :: base_map_get_quadrature_coordinates(:)
  base_map_get_quadrature_coordinates => this%coordinates_quadrature
end function base_map_get_quadrature_coordinates

!==================================================================================================
subroutine base_map_compute_quadrature_coordinates(this)
  implicit none
  class(base_map_t), intent(inout) :: this
  integer(ip)   :: qpoin,inode,nnode,nquad
  nnode = this%interpolation_geometry%number_shape_functions
  nquad = this%number_quadrature_points
  do qpoin = 1,nquad
     call this%coordinates_quadrature(qpoin)%init(0.0_rp)
     do inode=1,nnode
        this%coordinates_quadrature(qpoin) = this%coordinates_quadrature(qpoin) + &
             & this%coordinates_nodes(inode) * this%interpolation_geometry%shape_functions(1,inode,qpoin)
     end do
  end do
end subroutine base_map_compute_quadrature_coordinates

!==================================================================================================
function base_map_get_det_jacobian ( this, i )
  implicit none
  class(base_map_t), intent(in) :: this
  integer(ip)    , intent(in) :: i
  real(rp) :: base_map_get_det_jacobian
  base_map_get_det_jacobian = this%det_jacobian(i)
end function base_map_get_det_jacobian

!==================================================================================================
function base_map_get_det_jacobians ( this )
  implicit none
  class(base_map_t), target, intent(in) :: this
  real(rp), pointer :: base_map_get_det_jacobians(:)
  base_map_get_det_jacobians => this%det_jacobian
end function base_map_get_det_jacobians

!==================================================================================================
subroutine base_map_get_jacobian_normalized_column ( this, column_id, qpoint, normalized_column )
  implicit none
  class(base_map_t)   , intent(in)    :: this
  integer(ip)         , intent(in)    :: column_id
  integer(ip)         , intent(in)    :: qpoint
  type(vector_field_t), intent(out)   :: normalized_column 
  
  integer(ip) :: idime
  
  call normalized_column%init(0.0_rp)
  do idime=1, this%number_dimensions
    call normalized_column%set(idime, this%jacobian(idime, column_id, qpoint))
  end do
  normalized_column = normalized_column * (1.0_rp/normalized_column%nrm2())
end subroutine base_map_get_jacobian_normalized_column

!==================================================================================================
function base_map_get_reference_h ( this )
  implicit none
  class(base_map_t), intent(in) :: this
  real(rp) :: base_map_get_reference_h
  base_map_get_reference_h = this%reference_fe_characteristic_length
end function base_map_get_reference_h
