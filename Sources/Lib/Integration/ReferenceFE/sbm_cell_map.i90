! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
!cell_map_t type procedures
subroutine cell_map_create( this, quadrature, reference_fe_geometry, cell_map_duties )
  implicit none
  ! Parameters
  class(cell_map_t)      , intent(inout) :: this
  type(quadrature_t)     , intent(in)    :: quadrature
  class(reference_fe_t)  , intent(in)    :: reference_fe_geometry
  type(cell_map_duties_t), optional, intent(in)    :: cell_map_duties
  type(interpolation_duties_t) :: interpolation_duties

  integer(ip) :: num_nodes
  integer(ip) :: istat

  call this%free()
  this%num_dims                     = reference_fe_geometry%get_num_dims()
  this%num_nodes                    = reference_fe_geometry%get_num_shape_functions()
  this%num_quadrature_points        = quadrature%num_quadrature_points                ! Encapsulation missing here 

  ! QUARANTINE: to remove it when all invocations to create send cell_map_duties
  if(present(cell_map_duties)) then
     this%my_duties = cell_map_duties
  else
     call this%my_duties%assign_compute_jacobian_inverse(.true.)
     call this%my_duties%assign_compute_jacobian_derivative(.false.)
  end if

  call memalloc(SPACE_DIM, &
                SPACE_DIM, &
                this%num_quadrature_points, &
                this%jacobian,__FILE__,__LINE__)

  call memalloc(this%num_quadrature_points, &
                this%det_jacobian,__FILE__,__LINE__)

  allocate(this%quadrature_points_coordinates(this%num_quadrature_points), stat=istat); check(istat==0)
  allocate(this%nodes_coordinates(this%num_nodes), stat=istat); check(istat==0)
  this%reference_fe_characteristic_length = reference_fe_geometry%get_characteristic_length()

  call interpolation_duties%assign_compute_first_derivatives(.true.)
  call interpolation_duties%assign_compute_second_derivatives(this%my_duties%compute_jacobian_derivative_is_assigned())

  call reference_fe_geometry%create_interpolation( quadrature, this%interpolation, interpolation_duties)
  this%num_entries_symmetric_tensor = this%interpolation%num_entries_symmetric_tensor ! Encapsulation missing here 

  if(this%my_duties%compute_jacobian_derivative_is_assigned()) then
     call this%my_duties%assign_compute_jacobian_inverse(.true.)
     call memalloc(this%num_dims, &
          &        this%num_dims, &
          &        this%num_dims, &
          &        this%num_quadrature_points, &
          &        this%d2sdx,__FILE__,__LINE__)

     call memalloc(this%num_dims, &
          &        this%num_dims, &
          &        this%num_nodes, &
          &        this%wmat1,__FILE__,__LINE__)

     call memalloc(this%num_dims, &
          &        this%num_dims, &
          &        this%num_nodes, &
          &        this%wmat2,__FILE__,__LINE__)

     call memalloc(this%num_entries_symmetric_tensor,this%wvec1,__FILE__,__LINE__)
  end if

  if(this%my_duties%compute_jacobian_inverse_is_assigned()) then
     call memalloc(SPACE_DIM, &
          &        SPACE_DIM, &
          &        this%num_quadrature_points, &
          &        this%inv_jacobian,__FILE__,__LINE__)
  end if

end subroutine cell_map_create 

!==================================================================================================
subroutine cell_map_restricted_to_facet( this, facet_lid, subfacet_lid, quadrature, reference_fe_geometry, cell_map_duties )
  implicit none
  ! Parameters
  class(cell_map_t)    , intent(inout) :: this
  integer(ip)          , intent(in)    :: facet_lid
  integer(ip)          , intent(in)    :: subfacet_lid
  type(quadrature_t)   , intent(in)    :: quadrature
  class(reference_fe_t), intent(in)    :: reference_fe_geometry
  type(cell_map_duties_t), optional, intent(in)  :: cell_map_duties

  integer(ip) :: num_nodes
  integer(ip) :: istat

  call this%free()
  this%num_dims                     = reference_fe_geometry%get_num_dims()
  this%num_nodes                    = reference_fe_geometry%get_num_shape_functions()
  this%num_quadrature_points        = quadrature%num_quadrature_points                ! Encapsulation missing here 

  ! QUARANTINE: to remove it when all invocations to create send cell_map_duties
  if(present(cell_map_duties)) then
     this%my_duties = cell_map_duties
  else
     call this%my_duties%assign_compute_jacobian_inverse(.true.)
     call this%my_duties%assign_compute_jacobian_derivative(.false.)
  end if

  ! QUARANTINE: No second derivatives on the face so far. The default interpolation (wo hessians) will be created.
  mcheck(.not.this%my_duties%compute_jacobian_derivative_is_assigned(),'Jacobian derivative on the face not ready.')

  call reference_fe_geometry%create_interpolation_restricted_to_facet( facet_lid,    &
                                                        subfacet_lid, &
                                                        quadrature,       &
                                                        this%interpolation )
  this%num_entries_symmetric_tensor = this%interpolation%num_entries_symmetric_tensor ! Encapsulation missing here 

  call memalloc(SPACE_DIM, &
                SPACE_DIM, &
                this%num_quadrature_points, &
                this%jacobian,__FILE__,__LINE__)

  call memalloc(this%num_quadrature_points, &
                this%det_jacobian,__FILE__,__LINE__)

  allocate(this%quadrature_points_coordinates(this%num_quadrature_points), stat=istat)
  check(istat==0)

  num_nodes = reference_fe_geometry%get_num_shape_functions()
  allocate(this%nodes_coordinates(num_nodes), stat=istat)
  check(istat==0)

  this%reference_fe_characteristic_length = reference_fe_geometry%get_characteristic_length()

  if(this%my_duties%compute_jacobian_inverse_is_assigned()) then
     call memalloc(SPACE_DIM, &
          &        SPACE_DIM, &
          &        this%num_quadrature_points, &
          &        this%inv_jacobian,__FILE__,__LINE__)
  end if

end subroutine cell_map_restricted_to_facet

!==================================================================================================
subroutine cell_map_free( this )
  implicit none
  class(cell_map_t), intent(inout) :: this
  call this%base_map_t%free()
  if(this%my_duties%compute_jacobian_inverse_is_assigned()) then
     call memfree(this%inv_jacobian,__FILE__,__LINE__)
  end if
  if(this%my_duties%compute_jacobian_derivative_is_assigned()) then
     call memfree(this%wmat1,__FILE__,__LINE__)
     call memfree(this%wmat2,__FILE__,__LINE__)
     call memfree(this%wvec1,__FILE__,__LINE__)
     call memfree(this%d2sdx,__FILE__,__LINE__)
  end if
  call this%my_duties%assign_compute_jacobian_inverse(.false.)
  call this%my_duties%assign_compute_jacobian_derivative(.false.)
end subroutine cell_map_free

!==================================================================================================
subroutine cell_map_update( this, quadrature, cell_ressemblance, scaling_factor)
  !-----------------------------------------------------------------------
  ! A map obtained from the (usually isoparametric) interpolation of the geometry
  !-----------------------------------------------------------------------
  implicit none    
  class(cell_map_t)      , intent(inout) :: this
  type(quadrature_t)     , intent(in)    :: quadrature
  integer(ip)            , intent(in)    :: cell_ressemblance
  real(rp) , optional,   intent(in)      :: scaling_factor 
  
  ! Locals
  integer(ip) :: ilocs,idime,jdime,kdime,ldime,inode,itens,icomp
  type(vector_field_t) :: aux_vector
  logical  :: supported_cell_ressemblance
  real(rp) :: scaling_factor_to_the_num_dims
  
#ifdef DEBUG
  supported_cell_ressemblance = (cell_ressemblance == no_ressemblance .or. &
                                 cell_ressemblance == is_only_translated .or. &
                                 cell_ressemblance == is_scaled_and_translated )
  massert (supported_cell_ressemblance , "Unknown cell_ressemblance dummy argument value on input to cell_map_update(...)")
#endif   
      
  if (cell_ressemblance == no_ressemblance ) then
  
    ! Compute jacobian matrix
    call this%compute_jacobian()
    
    this%measure = 0.0_rp 
    if(this%my_duties%compute_jacobian_inverse_is_assigned()) then
       this%inv_jacobian = 0.0_rp
       do ilocs=1,this%num_quadrature_points
          ! In case of 2D problems (num_dims=2) when SPACE_DIM is used, the inverse of the jacobian matrix is
          ! allocated as (SPACE_DIM,SPACE_DIM,num_quadrature_points) matrix, and initialized with the identity matrix.
          ! This change is proposed to give support to 2D problems when SPACE_DIM is used to allocate jacobian and
          ! inv_jacobian matrices.
          do icomp=1, SPACE_DIM
             this%inv_jacobian(icomp,icomp,ilocs) = 1.0_rp
          end do
          call invmtx(SPACE_DIM,this%num_dims,this%jacobian(:,:,ilocs),this%inv_jacobian(:,:,ilocs),this%det_jacobian(ilocs))
          this%measure = this%measure + abs(this%det_jacobian(ilocs)) * quadrature%get_weight(ilocs)
       end do
    else
       do ilocs=1,this%num_quadrature_points
          call determinant(SPACE_DIM,this%num_dims,this%jacobian(:,:,ilocs),this%det_jacobian(ilocs))
          this%measure = this%measure + abs(this%det_jacobian(ilocs)) * quadrature%get_weight(ilocs)
       end do
    end if

    ! When using oriented tetrahedral meshes |J| may become negative, absolute value should be used
    ! to ensure positiveness
    if (this%num_quadrature_points > 0) then
       if (this%det_jacobian(1)<0.0_rp) then
          this%det_jacobian_positiveness = .false.
          this%det_jacobian = abs(this%det_jacobian)
       else
        this%det_jacobian_positiveness = .true.
       end if
    else 
       this%det_jacobian_positiveness = .true.  
    end if
  else if ( cell_ressemblance == is_scaled_and_translated ) then
    massert ( present(scaling_factor), 'Optional "scaling_factor" dummy argument MUST BE provided if cell_ressemblance == is_scaled_and_translated') 
    this%jacobian(:,:,:) = scaling_factor*this%jacobian(:,:,:)
    if ( this%my_duties%compute_jacobian_inverse_is_assigned() ) then
      this%inv_jacobian(:,:,:) = 1.0_rp/scaling_factor * this%inv_jacobian(:,:,:)
    end if 
    scaling_factor_to_the_num_dims = scaling_factor**(real(this%num_dims,rp))
    this%measure = scaling_factor_to_the_num_dims * this%measure
    this%det_jacobian(:) = scaling_factor_to_the_num_dims * this%det_jacobian(:)
  end if 
  
  ! Evaluation (Gauss) point coordinates
  call this%compute_quadrature_points_coordinates()

  ! Second derivatives of the map
  if(this%my_duties%compute_jacobian_derivative_is_assigned()) then
     if (cell_ressemblance == no_ressemblance ) then
       do ilocs=1,this%num_quadrature_points
          ! Transforms the array HESSI to a symmetric matrix WMAT1
          do inode=1,this%num_nodes
             do itens = 1, this%num_entries_symmetric_tensor
                this%wvec1(itens) = this%interpolation%hessian(1,itens,inode,ilocs)
             end do
             call vetoma(this%wvec1,this%wmat1(1,1,inode),this%num_dims,this%num_entries_symmetric_tensor)
          end do

          ! Computes (d^2 N / d s_k d s_l) (d s_k/ d x_i)(d s_l/ d x_j) for
          ! each node
          do inode=1,this%num_nodes
           call btdbma(this%wmat2(1,1,inode),this%wmat1(1,1,inode), &
                &        this%inv_jacobian(:,:,ilocs),this%num_dims,this%num_dims)
          end do

          ! Obtains (d^2 s_k / d x_i d x_j) as the solution of the system
          ! (d x_l / d s_k) (d^2 s_k / d x_i d x_j) 
          !     = - (d^2 x_l / d s_k d s_l) (d s_k/ d x_i)(d s_l/ d x_j), 
          ! for l,i,j = 1,...,NDIME
          do kdime=1,this%num_dims
             do idime=1,this%num_dims
                do jdime=1,this%num_dims
                   this%d2sdx(kdime,idime,jdime,ilocs)=0.0_rp
                   do ldime=1,this%num_dims
                      do inode=1,this%num_nodes
                         this%d2sdx(kdime,idime,jdime,ilocs) =    &
                              & this%d2sdx(kdime,idime,jdime,ilocs) &
                              & - this%inv_jacobian(kdime,ldime,ilocs)     &
                              &   * this%wmat2(idime,jdime,inode) * quadrature%coordinates(ldime,inode)
                      end do
                   end do
                end do
             end do
          end do
       end do
    else if ( cell_ressemblance == is_scaled_and_translated ) then
       massert (.false., "cell_map_update :: jacobian_derivative optimized computation for cell_ressemblance == is_scaled_and_translated NOT implemented yet" )
    end if
 end if
end subroutine cell_map_update

!==================================================================================================
! Not used...eliminated
! subroutine cell_map_update_interpolation( this, quadrature, reference_fe_geometry )
!   implicit none
!   class(cell_map_t)    , intent(inout) :: this
!   type(quadrature_t)   , intent(in)    :: quadrature
!   class(reference_fe_t), intent(in)    :: reference_fe_geometry
!   call reference_fe_geometry%create_interpolation( quadrature, this%interpolation )
! end subroutine cell_map_update_interpolation

!==================================================================================================
subroutine cell_map_update_interpolation_restricted_to_facet( this,&
    facet_lid, subfacet_lid, quadrature, reference_fe_geometry  )
  implicit none
  class(cell_map_t)    , intent(inout) :: this
  integer(ip)          , intent(in)    :: facet_lid
  integer(ip)          , intent(in)    :: subfacet_lid
  type(quadrature_t)   , intent(in)    :: quadrature
  class(reference_fe_t), intent(in)    :: reference_fe_geometry
  call reference_fe_geometry%create_interpolation_restricted_to_facet(&
    facet_lid, subfacet_lid, quadrature, this%interpolation )
end subroutine cell_map_update_interpolation_restricted_to_facet

!==================================================================================================
subroutine cell_map_print( this )
  implicit none
  class(cell_map_t) :: this
  integer(ip) :: i,j,k
  call this%interpolation%print()
  write(*,*) '%%%%%%%%%%%%%%%% JACOBIAN: %%%%%%%%%%%%%%%%'
  do i = 1, this%num_quadrature_points
     write(*,*) '%%%%%%%%%%%%%%%% Gauss point: ',i
     do j = 1, this%num_dims
        do k = 1, this%num_dims
           write(*,*) '%%%% (',j,',',k,') = ', this%jacobian(j,k,i)
        end do
     end do
  end do
end subroutine cell_map_print

!==================================================================================================
function cell_map_get_det_jacobian ( this, i )
  implicit none
  class(cell_map_t), intent(in) :: this
  integer(ip)    , intent(in) :: i
  real(rp) :: cell_map_get_det_jacobian
  cell_map_get_det_jacobian = this%det_jacobian(i)
end function cell_map_get_det_jacobian

!==================================================================================================
function cell_map_get_det_jacobians ( this )
  implicit none
  class(cell_map_t), target, intent(in) :: this
  real(rp), pointer :: cell_map_get_det_jacobians(:)
  cell_map_get_det_jacobians => this%det_jacobian
end function cell_map_get_det_jacobians

!==================================================================================================
function cell_map_compute_h ( this, qpoin)
  implicit none
  class(cell_map_t), intent(in) :: this
  integer(ip)    , intent(in) :: qpoin
  real(rp)                    :: cell_map_compute_h

  integer(ip) :: idime, jdime
  real(rp)    :: inverse_h(SPACE_DIM), volumetric_h
  integer(ip) :: i,j

  assert( qpoin>=1 .and. qpoin <= this%num_quadrature_points)
  if(this%my_duties%compute_jacobian_inverse_is_assigned()) then

     inverse_h = 0.0_rp
     do idime = 1, this%num_dims
        do jdime = 1,  this%num_dims
           inverse_h(idime) = inverse_h(idime) + this%inv_jacobian(idime,jdime,qpoin)**2.0_rp
        end do
        inverse_h(idime) = sqrt(inverse_h(idime))
     end do

     volumetric_h = inverse_h(1)
     do j = 2, this%num_dims
        volumetric_h = volumetric_h * inverse_h(j)
     end do
     volumetric_h = 1.0_rp / volumetric_h
     volumetric_h = volumetric_h**(1.0_rp/real(this%num_dims))
     cell_map_compute_h = this%reference_fe_characteristic_length*volumetric_h
  else
     mcheck(.false.,'Calling cell_map_compute_h requires compute_jacobian_inverse_is_assigned to be true')
  end if

end function cell_map_compute_h

!==================================================================================================
function cell_map_compute_h_min ( this, qpoin)
  implicit none
  class(cell_map_t), intent(in) :: this
  integer(ip)    , intent(in) :: qpoin
  real(rp)                    :: cell_map_compute_h_min

  integer(ip) :: idime, jdime
  real(rp)    :: inverse_h(SPACE_DIM), minimum_h
  integer(ip) :: i,j

  assert( qpoin>=1 .and. qpoin <= this%num_quadrature_points)
  if(this%my_duties%compute_jacobian_inverse_is_assigned()) then

     inverse_h = 0.0_rp
     do idime = 1, this%num_dims
        do jdime = 1,  this%num_dims
           inverse_h(idime) = inverse_h(idime) + this%inv_jacobian(idime,jdime,qpoin)**2.0_rp
        end do
        inverse_h(idime) = sqrt(inverse_h(idime))
     end do

     minimum_h = 1.0_rp/inverse_h(1)
     do j = 2, this%num_dims
        minimum_h = min(minimum_h, 1.0_rp/inverse_h(j))
     end do
     cell_map_compute_h_min = this%reference_fe_characteristic_length*minimum_h
  else
     mcheck(.false.,'Calling cell_map_compute_h_min requires compute_jacobian_inverse_is_assigned to be true')
  end if

end function cell_map_compute_h_min

!==================================================================================================
function cell_map_compute_h_max ( this, qpoin)
  implicit none
  class(cell_map_t), intent(in) :: this
  integer(ip)    , intent(in) :: qpoin
  real(rp)                    :: cell_map_compute_h_max

  integer(ip) :: idime, jdime
  real(rp)    :: inverse_h(SPACE_DIM), maximum_h
  integer(ip) :: i,j

  assert( qpoin>=1 .and. qpoin <= this%num_quadrature_points)
  if(this%my_duties%compute_jacobian_inverse_is_assigned()) then

     inverse_h = 0.0_rp
     do idime = 1, this%num_dims
        do jdime = 1,  this%num_dims
           inverse_h(idime) = inverse_h(idime) + this%inv_jacobian(idime,jdime,qpoin)**2.0_rp
        end do
        inverse_h(idime) = sqrt(inverse_h(idime))
     end do

     maximum_h = 1.0_rp/inverse_h(1)
     do j = 2, this%num_dims
        maximum_h = max(maximum_h, 1.0_rp/inverse_h(j))
     end do
     cell_map_compute_h_max = this%reference_fe_characteristic_length*maximum_h
  else
     mcheck(.false.,'Calling cell_map_compute_h_min requires compute_jacobian_inverse_is_assigned to be true')
  end if

end function cell_map_compute_h_max

!==================================================================================================
function cell_map_get_coordinates(this)
  implicit none
  class(cell_map_t)   , target, intent(in) :: this
  type(point_t), pointer :: cell_map_get_coordinates(:)
  cell_map_get_coordinates => this%nodes_coordinates
end function cell_map_get_coordinates

!==================================================================================================
function cell_map_get_quadrature_points_coordinates(this)
  implicit none
  class(cell_map_t)   , target, intent(in) :: this
  type(point_t), pointer :: cell_map_get_quadrature_points_coordinates(:)
  cell_map_get_quadrature_points_coordinates => this%quadrature_points_coordinates
end function cell_map_get_quadrature_points_coordinates

!==================================================================================================
subroutine cell_map_get_inv_jacobian_tensor ( this, qpoin, inv_jacobian )
  implicit none
  class(cell_map_t)      , intent(in)  :: this
  integer(ip)            , intent(in)  :: qpoin
  type(tensor_field_t)   , intent(out) :: inv_jacobian
  ! Locals
  integer(ip) :: idime,jdime

  if(this%my_duties%compute_jacobian_inverse_is_assigned()) then
     call inv_jacobian%init(0.0_rp)
     do jdime = 1, this%num_dims
        do idime = 1,  this%num_dims
           call inv_jacobian%set(idime,jdime,this%inv_jacobian(idime,jdime,qpoin))
        end do
     end do
  else
     mcheck(.false.,'Calling cell_map_get_inv_jacobian_tensor requires compute_jacobian_inverse_is_assigned to be true')
  end if

end subroutine cell_map_get_inv_jacobian_tensor

!==================================================================================================
function cell_map_apply_jacobian ( this, qpoin, v_in ) result ( v_out )
  implicit none
  class(cell_map_t)     , intent(in) :: this
  integer(ip)         , intent(in) :: qpoin
  type(vector_field_t), intent(in) :: v_in
  type(vector_field_t) :: v_out
  integer(ip)          :: idime,jdime
  real(rp)             :: vector_value

  assert( qpoin>=1 .and. qpoin <= this%num_quadrature_points)

  call v_out%init(0.0_rp)
  do jdime = 1, this%num_dims
     vector_value = v_in%get(jdime)
     do idime = 1,  this%num_dims
        call v_out%add(idime, this%jacobian(idime,jdime,qpoin)*vector_value)
     end do
  end do  

end function cell_map_apply_jacobian

!==================================================================================================
function cell_map_apply_inv_jacobian ( this, qpoin, v_in ) result ( v_out )
  implicit none
  class(cell_map_t)     , intent(in) :: this
  integer(ip)         , intent(in) :: qpoin
  type(vector_field_t), intent(in) :: v_in
  type(vector_field_t) :: v_out

  assert( qpoin>=1 .and. qpoin <= this%num_quadrature_points)
  if(this%my_duties%compute_jacobian_inverse_is_assigned()) then
     call apply_2D_plain_array_to_vector_field(this%inv_jacobian(:,:,qpoin),v_in,v_out)
  else
     mcheck(.false.,'Calling cell_map_get_inv_jacobian_tensor requires compute_jacobian_inverse_is_assigned to be true')
  end if

end function cell_map_apply_inv_jacobian

!==================================================================================================
function cell_map_get_reference_h ( this )
  implicit none
  class(cell_map_t), intent(in) :: this
  real(rp) :: cell_map_get_reference_h
  cell_map_get_reference_h = this%reference_fe_characteristic_length
end function cell_map_get_reference_h

!==================================================================================================
subroutine cell_map_compute_quadrature_points_coordinates(this)
  implicit none
  class(cell_map_t), intent(inout) :: this
  integer(ip)   :: qpoin,inode

  do qpoin = 1,this%num_quadrature_points
     call this%quadrature_points_coordinates(qpoin)%init(0.0_rp)
     do inode=1,this%num_nodes
        this%quadrature_points_coordinates(qpoin) = this%quadrature_points_coordinates(qpoin) + &
             &    this%nodes_coordinates(inode) * this%interpolation%shape_functions(1,inode,qpoin)
     end do
  end do

end subroutine cell_map_compute_quadrature_points_coordinates

!==================================================================================================
subroutine cell_map_get_jacobian_normalized_column ( this, column_id, qpoint, normalized_column )
  implicit none
  class(cell_map_t)     , intent(in)    :: this
  integer(ip)         , intent(in)    :: column_id
  integer(ip)         , intent(in)    :: qpoint
  type(vector_field_t), intent(out)   :: normalized_column 
  
  integer(ip) :: idime
  
  call normalized_column%init(0.0_rp)
  do idime=1, this%num_dims
    call normalized_column%set(idime, this%jacobian(idime, column_id, qpoint))
  end do
  normalized_column = normalized_column * (1.0_rp/normalized_column%nrm2())
end subroutine cell_map_get_jacobian_normalized_column

!==================================================================================================
function cell_map_is_det_jacobian_positive ( this )
  implicit none
  class(cell_map_t)     , intent(in)    :: this
  logical  ::  cell_map_is_det_jacobian_positive
  cell_map_is_det_jacobian_positive = this%det_jacobian_positiveness
end function cell_map_is_det_jacobian_positive

!==================================================================================================
subroutine assign_cell_map ( this, other )
  implicit none
  type(cell_map_t)     , intent(inout) :: this
  type(cell_map_t)     , intent(in)    :: other

  call this%free()
  call this%base_map_t%copy(other%base_map_t)

  call memalloc(SPACE_DIM, &
                SPACE_DIM, &
                this%num_quadrature_points, &
                this%jacobian,__FILE__,__LINE__)
  this%jacobian(:,:,:) = other%jacobian(:,:,:)
  this%det_jacobian = other%det_jacobian
  this%det_jacobian_positiveness = other%det_jacobian_positiveness

  call this%my_duties%assign_compute_jacobian_derivative(other%my_duties%compute_jacobian_derivative_is_assigned())
  if(this%my_duties%compute_jacobian_derivative_is_assigned()) then
     massert(other%my_duties%compute_jacobian_inverse_is_assigned(),'Error in cell_map copy')
     call memalloc(this%num_dims, &
          &        this%num_dims, &
          &        this%num_dims, &
          &        this%num_quadrature_points, &
          &        this%d2sdx,__FILE__,__LINE__)

     call memalloc(this%num_dims, &
          &        this%num_dims, &
          &        this%num_nodes, &
          &        this%wmat1,__FILE__,__LINE__)

     call memalloc(this%num_dims, &
          &        this%num_dims, &
          &        this%num_nodes, &
          &        this%wmat2,__FILE__,__LINE__)

     call memalloc(this%num_entries_symmetric_tensor,this%wvec1,__FILE__,__LINE__)
    this%d2sdx = other%d2sdx

  end if

  call this%my_duties%assign_compute_jacobian_inverse(other%my_duties%compute_jacobian_inverse_is_assigned())
  if(this%my_duties%compute_jacobian_inverse_is_assigned()) then
     call memalloc(SPACE_DIM, &
          &        SPACE_DIM, &
          &        this%num_quadrature_points, &
          &        this%inv_jacobian,__FILE__,__LINE__)
     this%inv_jacobian(:,:,:) = other%inv_jacobian(:,:,:)
  end if

end subroutine assign_cell_map

!==================================================================================================
subroutine assign_cell_map_array ( cell_map_array1, cell_map_array2 ) 
  implicit none       
  type(cell_map_t), intent(inout) :: cell_map_array1(:)
  type(cell_map_t), intent(in)    :: cell_map_array2(:)
  integer(ip) :: i
  assert( size(cell_map_array1) == size(cell_map_array2) )
  do i = 1,size(cell_map_array1)
     call assign_cell_map(cell_map_array1(i),cell_map_array2(i))
  end do
end subroutine assign_cell_map_array

!==================================================================================================
! p_cell_map_t type procedures
subroutine p_cell_map_allocate( this )
  implicit none
  class(p_cell_map_t), intent(inout) :: this
  allocate(this%p)
end subroutine p_cell_map_allocate

subroutine p_cell_map_free( this )
  implicit none
  class(p_cell_map_t), intent(inout) :: this
  call this%p%free()
  deallocate(this%p)
end subroutine p_cell_map_free

!==================================================================================================
subroutine determinant(ld,n,a,deter)
  !-----------------------------------------------------------------------
  !
  ! This routine inverts a square matrix A -> Mat(nsize,nsize). The
  ! inverse is stored in B. Its determinant is DETER
  !    
  !-----------------------------------------------------------------------
  implicit none
  integer(ip), intent(in)  :: ld, n
  real(rp),    intent(in)  :: a(ld,*)
  real(rp),    intent(out) :: deter
  integer(ip)              :: isize,jsize
  real(rp)                 :: denom,t1,t2,t3,t4

  select case (n)
  case(1)
     deter=a(1,1)

  case(2)
     deter=a(1,1)*a(2,2)-a(2,1)*a(1,2)

  case(3)
     t1  = a(2,2)*a(3,3) - a(3,2)*a(2,3)
     t2  =-a(2,1)*a(3,3) + a(3,1)*a(2,3)
     t3  = a(2,1)*a(3,2) - a(3,1)*a(2,2)
     deter = a(1,1)*t1 + a(1,2)*t2 + a(1,3)*t3

  case(4)
     t1= a(2,2)*a(3,3)*a(4,4) + a(2,3)*a(3,4)*a(4,2)&
          + a(2,4)*a(3,2)*a(4,3) - a(2,3)*a(3,2)*a(4,4)&
          - a(2,2)*a(3,4)*a(4,3) - a(2,4)*a(3,3)*a(4,2)
     t2=-a(2,1)*a(3,3)*a(4,4) - a(2,3)*a(3,4)*a(4,1)&
          - a(2,4)*a(3,1)*a(4,3) + a(2,4)*a(3,3)*a(4,1)&
          + a(2,3)*a(3,1)*a(4,4) + a(2,1)*a(3,4)*a(4,3)
     t3=+a(2,1)*a(3,2)*a(4,4) + a(2,2)*a(3,4)*a(4,1)&
          + a(2,4)*a(3,1)*a(4,2) - a(2,4)*a(3,2)*a(4,1)&
          - a(2,2)*a(3,1)*a(4,4) - a(2,1)*a(3,4)*a(4,2)
     t4=-a(2,1)*a(3,2)*a(4,3) - a(2,2)*a(3,3)*a(4,1)&
          - a(2,3)*a(3,1)*a(4,2) + a(2,3)*a(3,2)*a(4,1)&
          + a(2,2)*a(3,1)*a(4,3) + a(2,1)*a(3,3)*a(4,2)
     deter= a(1,1)*t1 + a(1,2)*t2 + a(1,3)*t3 + a(1,4)*t4

  case default
     mcheck(.false.,'determinant not available for n>4')
  end select

end subroutine determinant
