! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
subroutine reference_fe_free( this )
  implicit none
  class(reference_fe_t), intent(inout) :: this

  integer(ip) :: i, istat

  if(allocated(this%topology)) deallocate(this%topology)
  if(allocated(this%fe_type)) deallocate(this%fe_type)
  if(allocated(this%field_type)) deallocate(this%field_type)

  if (allocated(this%number_rotations_per_dimension)) &
       call memfree(this%number_rotations_per_dimension,__FILE__,__LINE__)

  if (allocated(this%number_orientations_per_dimension)) &
       call memfree(this%number_orientations_per_dimension,__FILE__,__LINE__)

  if (allocated(this%own_dof_permutations)) then
     do i = 1, this%number_dimensions-1
        call this%own_dof_permutations(i)%free()
     end do
     deallocate(this%own_dof_permutations, stat=istat)
     check(istat==0)
  end if

  call this%own_dofs_n_face%free()
  call this%dofs_n_face%free()
  call this%vertices_n_face%free()
  call this%n_faces_n_face%free()
  call this%orientation%free()
  call this%polytope%free()
  call this%node_array%free()
  call this%vertex_array%free()

  this%number_dimensions = 0
  this%order = 0
  this%number_field_components = 0
  this%number_n_faces = 0
  this%number_shape_functions = 0
  this%number_n_faces_per_dimension  = 0
  this%conformity = .true.

end subroutine reference_fe_free

subroutine reference_fe_print ( reference_fe )
  implicit none
  !     Parameters
  class(reference_fe_t),  intent(in) :: reference_fe

  integer(ip) :: i

  write(*,*) 'topology: ', reference_fe%topology
  write(*,*) 'fe_type: ', reference_fe%fe_type
  write(*,*) 'fe_type: ', reference_fe%field_type
  write(*,*) 'fe_type: ', reference_fe%number_field_components
  write(*,*) 'number_dimensions: ', reference_fe%number_dimensions
  write(*,*) 'order: ', reference_fe%order
  write(*,*) 'conformity: ',reference_fe%conformity
  write(*,*) 'number_n_faces', reference_fe%number_n_faces
  write(*,*) 'number_nodes', reference_fe%number_shape_functions
  write(*,*) 'number_n_faces_dimension', reference_fe%number_n_faces_per_dimension

  write(*,*) 'orientation', reference_fe%orientation%a


  write(*,*) 'nodes_n_face'
  call reference_fe%dofs_n_face%print(6)

  write(*,*) 'vertices_n_face'
  call reference_fe%vertices_n_face%print(6)

  write(*,*) 'n_faces_n_face'
  call reference_fe%n_faces_n_face%print(6)

  write(*,*) 'own_nodes_n_face'
  call reference_fe%own_dofs_n_face%print(6)

end subroutine reference_fe_print

subroutine reference_fe_set_common_data( this, number_dimensions, order, field_type, conformity, continuity )
  implicit none 
  class(reference_fe_t), intent(inout) :: this 
  integer(ip)          , intent(in)    :: number_dimensions
  integer(ip)          , intent(in)    :: order              
  character(*)         , intent(in)    :: field_type
  logical              , intent(in)    :: conformity
  logical    , optional, intent(in)    :: continuity
  
  this%number_dimensions = number_dimensions
  this%order             = order
  this%conformity    = conformity
  
  if ( present(continuity) ) then
    this%continuity = continuity
  else
    this%continuity = .true.
  end if
   
  massert ( .not. ((this%conformity .eqv. .false.) .and. (this%continuity .eqv. .false.)), "reference_fe_set_common_data: the discrete function space cannot be non-conforming and discontinuous" )
  

  this%field_type = field_type
  if( this%field_type == field_type_scalar ) then
     this%number_field_components = 1
  else if ( this%field_type == field_type_vector ) then
     this%number_field_components = number_dimensions
  else if ( this%field_type == field_type_tensor ) then
     this%number_field_components = number_dimensions**2
  else if ( this%field_type == field_type_symmetric_tensor ) then
     this%number_field_components = ((number_dimensions)*(number_dimensions+1))/2
  else
     write(0,'(a)') 'Error: reference_fe_t%set_common_data :: undefined field_type'
     check (.false.)
  end if
end subroutine reference_fe_set_common_data

subroutine reference_fe_set_topology( this, topology)
  implicit none
  class(reference_fe_t), intent(inout) :: this 
  character(*), intent(in) :: topology
  this%topology = topology
end subroutine reference_fe_set_topology

subroutine reference_fe_set_fe_type( this, fe_type)
  implicit none
  class(reference_fe_t), intent(inout) :: this 
  character(*), intent(in) :: fe_type
  this%fe_type = fe_type
end subroutine reference_fe_set_fe_type

function reference_fe_get_topology( this )
  implicit none
  class(reference_fe_t), target, intent(in) :: this
  character(:), pointer :: reference_fe_get_topology
  reference_fe_get_topology => this%topology
end function reference_fe_get_topology

function reference_fe_get_field_type( this )
  implicit none
  class(reference_fe_t), target, intent(in) :: this
  character(:), pointer :: reference_fe_get_field_type
  reference_fe_get_field_type => this%field_type
end function reference_fe_get_field_type

function reference_fe_get_number_dimensions( this )
  implicit none
  class(reference_fe_t), intent(in) :: this
  integer(ip) :: reference_fe_get_number_dimensions
  reference_fe_get_number_dimensions = this%number_dimensions
end function reference_fe_get_number_dimensions

function reference_fe_get_order( this )
  implicit none
  class(reference_fe_t), intent(in) :: this
  integer(ip) :: reference_fe_get_order
  reference_fe_get_order = this%order
end function reference_fe_get_order

function reference_fe_get_continuity( this )
  implicit none
  class(reference_fe_t), intent(in) :: this
  logical :: reference_fe_get_continuity
  reference_fe_get_continuity = this%continuity
end function reference_fe_get_continuity

function reference_fe_get_conformity( this )
  implicit none
  class(reference_fe_t), intent(in) :: this
  logical :: reference_fe_get_conformity
  reference_fe_get_conformity = this%conformity
end function reference_fe_get_conformity

function reference_fe_get_number_field_components ( this )
  implicit none
  class(reference_fe_t), intent(in) :: this
  integer(ip) :: reference_fe_get_number_field_components
  reference_fe_get_number_field_components = this%number_field_components
end function reference_fe_get_number_field_components

function reference_fe_get_number_n_faces ( this )
  implicit none
  class(reference_fe_t), intent(in) :: this
  integer(ip) :: reference_fe_get_number_n_faces
  reference_fe_get_number_n_faces = this%number_n_faces
end function reference_fe_get_number_n_faces

function reference_fe_get_number_vertices ( this )
  implicit none
  class(reference_fe_t), intent(in) :: this
  integer(ip) :: reference_fe_get_number_vertices
  reference_fe_get_number_vertices = this%number_n_faces_per_dimension(2) -          &
       &                             this%number_n_faces_per_dimension(1)
end function reference_fe_get_number_vertices

function reference_fe_get_number_faces ( this )
  implicit none
  class(reference_fe_t), intent(in) :: this
  integer(ip) :: reference_fe_get_number_faces
  reference_fe_get_number_faces = this%number_n_faces_per_dimension(this%number_dimensions+1) -          &
       &                          this%number_n_faces_per_dimension(this%number_dimensions)
end function reference_fe_get_number_faces

function reference_fe_get_first_face_id ( this )
  implicit none
  class(reference_fe_t), intent(in) :: this
  integer(ip) :: reference_fe_get_first_face_id
  reference_fe_get_first_face_id = this%number_n_faces_per_dimension(this%number_dimensions)
end function reference_fe_get_first_face_id

function reference_fe_get_number_n_faces_of_dimension ( this, n_face_dimension )
  implicit none
  class(reference_fe_t), intent(in) :: this
  integer(ip)          , intent(in) :: n_face_dimension
  integer(ip) :: reference_fe_get_number_n_faces_of_dimension
  reference_fe_get_number_n_faces_of_dimension = this%number_n_faces_per_dimension(n_face_dimension+2) -          &
       &                                      this%number_n_faces_per_dimension(n_face_dimension+1)
end function reference_fe_get_number_n_faces_of_dimension

function reference_fe_get_first_n_face_id_of_dimension ( this, n_face_dimension )
  implicit none
  class(reference_fe_t), intent(in) :: this
  integer(ip)          , intent(in) :: n_face_dimension
  integer(ip) :: reference_fe_get_first_n_face_id_of_dimension
  reference_fe_get_first_n_face_id_of_dimension = this%number_n_faces_per_dimension(n_face_dimension+1)
end function reference_fe_get_first_n_face_id_of_dimension

function reference_fe_get_number_shape_functions ( this )
  implicit none
  class(reference_fe_t), intent(in) :: this
  integer(ip) :: reference_fe_get_number_shape_functions
  reference_fe_get_number_shape_functions = this%number_shape_functions
end function reference_fe_get_number_shape_functions

function reference_fe_get_n_face_dimension ( this, n_face_id )
  implicit none
  class(reference_fe_t), intent(in) :: this
  integer(ip)          , intent(in) :: n_face_id
  integer(ip) :: reference_fe_get_n_face_dimension

  integer(ip) :: i 
  assert ( n_face_id >= 1 .and. n_face_id <= this%number_n_faces ) 
  do i = 1, this%number_dimensions
     if ( n_face_id < this%number_n_faces_per_dimension(i+1) ) then
        reference_fe_get_n_face_dimension = i - 1 
        exit
     end if
  end do
end function reference_fe_get_n_face_dimension

function reference_fe_get_dofs_n_face ( this )
  implicit none
  class(reference_fe_t), target, intent(in) :: this
  type(list_t), pointer :: reference_fe_get_dofs_n_face
  reference_fe_get_dofs_n_face => this%dofs_n_face
end function reference_fe_get_dofs_n_face

function reference_fe_create_dofs_n_face_iterator ( this, n_face_id) result(list_iterator)
  implicit none
  class(reference_fe_t), intent(in) :: this
  integer(ip)          , intent(in) :: n_face_id
  type(list_iterator_t) :: list_iterator
  assert ( n_face_id >= 1 .and. n_face_id <= this%get_number_n_faces() )
  list_iterator = this%dofs_n_face%create_iterator(n_face_id)
end function reference_fe_create_dofs_n_face_iterator

function reference_fe_get_vertices_n_face ( this )
  implicit none
  class(reference_fe_t), target, intent(in) :: this
  type(list_t), pointer :: reference_fe_get_vertices_n_face
  reference_fe_get_vertices_n_face => this%vertices_n_face
end function reference_fe_get_vertices_n_face

function reference_fe_create_vertices_n_face_iterator ( this, n_face_id) result(list_iterator)
  implicit none
  class(reference_fe_t), intent(in) :: this
  integer(ip)          , intent(in) :: n_face_id
  type(list_iterator_t) :: list_iterator
  assert ( n_face_id >= 1 .and. n_face_id <= this%get_number_n_faces() )
  list_iterator = this%vertices_n_face%create_iterator(n_face_id)
end function reference_fe_create_vertices_n_face_iterator

function reference_fe_get_n_faces_n_face ( this )
  implicit none
  class(reference_fe_t), target, intent(in) :: this
  type(list_t), pointer :: reference_fe_get_n_faces_n_face
  reference_fe_get_n_faces_n_face => this%n_faces_n_face
end function reference_fe_get_n_faces_n_face

function reference_fe_get_node_n_face ( this, i, j )
  implicit none
  class(reference_fe_t), intent(in) :: this
  integer(ip), intent(in) :: i, j
  integer(ip) :: reference_fe_get_node_n_face
  type(list_iterator_t)   :: iterator
  iterator = this%dofs_n_face%create_iterator(j)
  reference_fe_get_node_n_face = iterator%get_from_current(i-1)
end function reference_fe_get_node_n_face

function reference_fe_get_number_dofs_on_n_face ( this, i )
  implicit none
  class(reference_fe_t), intent(in) :: this
  integer(ip), intent(in) :: i
  integer(ip) :: reference_fe_get_number_dofs_on_n_face
  reference_fe_get_number_dofs_on_n_face = this%dofs_n_face%get_sublist_size(i)
end function reference_fe_get_number_dofs_on_n_face

function reference_fe_create_dofs_on_n_face_iterator ( this, i )
  implicit none
  class(reference_fe_t), intent(in) :: this
  integer(ip), intent(in) :: i
  type(list_iterator_t) :: reference_fe_create_dofs_on_n_face_iterator
  reference_fe_create_dofs_on_n_face_iterator = this%dofs_n_face%create_iterator(i)    
end function reference_fe_create_dofs_on_n_face_iterator

function reference_fe_get_own_dof_n_face ( this, i, j )
  implicit none
  class(reference_fe_t), intent(in) :: this
  integer(ip), intent(in) :: i, j
  integer(ip) :: reference_fe_get_own_dof_n_face
  type(list_iterator_t)   :: iterator
  iterator = this%own_dofs_n_face%create_iterator(j)
  reference_fe_get_own_dof_n_face = iterator%get_from_current(i-1)
end function reference_fe_get_own_dof_n_face

function reference_fe_get_number_own_dofs_n_face ( this, i )
  implicit none
  class(reference_fe_t), intent(in) :: this
  integer(ip), intent(in) :: i
  integer(ip) :: reference_fe_get_number_own_dofs_n_face
  reference_fe_get_number_own_dofs_n_face = this%own_dofs_n_face%get_sublist_size(i)
end function reference_fe_get_number_own_dofs_n_face

function reference_fe_create_own_dofs_on_n_face_iterator ( this, i )
  implicit none
  class(reference_fe_t), intent(in) :: this
  integer(ip), intent(in) :: i
  type(list_iterator_t) :: reference_fe_create_own_dofs_on_n_face_iterator
  reference_fe_create_own_dofs_on_n_face_iterator = this%own_dofs_n_face%create_iterator(i)    
end function reference_fe_create_own_dofs_on_n_face_iterator

function reference_fe_get_number_vertices_n_face ( this, i )
  implicit none
  class(reference_fe_t), intent(in) :: this
  integer(ip), intent(in) :: i
  integer(ip) :: reference_fe_get_number_vertices_n_face
  reference_fe_get_number_vertices_n_face = this%vertices_n_face%get_sublist_size(i)
end function reference_fe_get_number_vertices_n_face

! This query should return .true. only for interpolatory FEs.
! By default, we assume that the reference fe is NOT interpolatory.
! Interpolatory FEs should overwrite this function and return .true.
function reference_fe_has_nodal_quadrature ( this )
  implicit none
  class(reference_fe_t), intent(in) :: this
  logical :: reference_fe_has_nodal_quadrature
  reference_fe_has_nodal_quadrature = .false.
end function reference_fe_has_nodal_quadrature

! This query can only be succesfully resolved by interpolatory FEs.
! By default, we assume that the reference fe is NOT interpolatory.
! Interpolatory FEs should overwrite this function and return the
! coordinates of its support points
function reference_fe_get_nodal_quadrature ( this )
  implicit none
  class(reference_fe_t), target, intent(in) :: this
  type(quadrature_t), pointer :: reference_fe_get_nodal_quadrature
  assert(.false.)
end function reference_fe_get_nodal_quadrature


!==================================================================================================
function reference_fe_compute_permutation_index(source_reference_fe, target_reference_fe,          &
     &                                          source_n_face_id, target_n_face_id,         &
     &                                          source_n_faces, target_n_faces)
  implicit none
  class(reference_fe_t), intent(in)  :: source_reference_fe
  class(reference_fe_t), intent(in)  :: target_reference_fe
  integer(ip)          , intent(in)  :: source_n_face_id ! Local n-face ID
  integer(ip)          , intent(in)  :: target_n_face_id ! Local n-face ID
  integer(ip)          , intent(in)  :: source_n_faces(source_reference_fe%number_n_faces)
  integer(ip)          , intent(in)  :: target_n_faces(target_reference_fe%number_n_faces) 
  integer(ip) :: reference_fe_compute_permutation_index
  integer(ip)                        :: relative_orientation, relative_rotation 
  type(list_iterator_t)              :: source_n_faces_iterator
  type(list_iterator_t)              :: target_n_faces_iterator

  integer(ip) :: target_first_vertex_global_id, i, source_vertex_global_id 

  ! Relative permutation
  if (target_reference_fe%get_n_face_dimension(target_n_face_id) < 2) then
     relative_orientation = 0
  else
     relative_orientation = modulo( 1 +                                    &
          &                             source_reference_fe%orientation%a(source_n_face_id) -      &
          &                             target_reference_fe%orientation%a(target_n_face_id),2)
  end if
  
  ! Relative Rotation
  source_n_faces_iterator = source_reference_fe%vertices_n_face%create_iterator(source_n_face_id)
  target_n_faces_iterator = target_reference_fe%vertices_n_face%create_iterator(target_n_face_id)
  target_first_vertex_global_id = target_n_faces(target_n_faces_iterator%get_current())
  relative_rotation = 1
  do while(.not. source_n_faces_iterator%is_upper_bound())
     source_vertex_global_id = source_n_faces(source_n_faces_iterator%get_current())
     if (source_vertex_global_id ==  target_first_vertex_global_id) exit
     relative_rotation = relative_rotation + 1
     call source_n_faces_iterator%next()
  end do
  
  reference_fe_compute_permutation_index = relative_rotation +                                        &
         & source_reference_fe%number_rotations_per_dimension(source_reference_fe%number_dimensions-1) * relative_orientation
  
end function reference_fe_compute_permutation_index

!==================================================================================================
function reference_fe_get_permuted_own_dof_n_face(this,inode,target_n_face_id,     &
     &                                            permutation_index)
  implicit none
  class(reference_fe_t), intent(in)  :: this
  integer(ip)          , intent(in)  :: inode
  integer(ip)          , intent(in)  :: target_n_face_id ! Local n-face ID
  integer(ip)          , intent(in)  :: permutation_index
  integer(ip) :: reference_fe_get_permuted_own_dof_n_face
  integer(ip) :: n_face_dimension, permuted_own_dof

  n_face_dimension = this%get_n_face_dimension(target_n_face_id)

  if ( n_face_dimension == 0 ) then
     permuted_own_dof = inode
  else
     permuted_own_dof = this%own_dof_permutations          &
          & (n_face_dimension)%a(inode,permutation_index)

  end if
  reference_fe_get_permuted_own_dof_n_face = this%get_own_dof_n_face(permuted_own_dof, target_n_face_id)
end function reference_fe_get_permuted_own_dof_n_face

!==================================================================================================
subroutine p_reference_fe_free( this )
  implicit none
  class(p_reference_fe_t), intent(inout) :: this
  if (associated ( this%p )) then
     call this%p%free()
     deallocate ( this%p )
  end if
end subroutine p_reference_fe_free

