! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine interpolation_create( this, &
                                 num_dims, &
                                 num_shape_functions, &
                                 num_quadrature_points, & 
                                 interpolation_duties)
  implicit none
  class(interpolation_t)      , intent(inout) :: this
  integer(ip)                 , intent(in)    :: num_dims, & 
                                                 num_shape_functions, & 
                                                 num_quadrature_points
  type(interpolation_duties_t), optional, intent(in) :: interpolation_duties
  integer(ip) :: idime
  if (.not. this%is_needed_to_allocate( num_dims,        &
                                        num_shape_functions,   &
                                        num_quadrature_points, &
                                        interpolation_duties) ) return
  call this%free()
  if(present(interpolation_duties)) then
     this%my_duties = interpolation_duties
  else
     call this%my_duties%assign_compute_first_derivatives(.true.)
     call this%my_duties%assign_compute_second_derivatives(.false.)
  end if
     
  this%num_dims                     = num_dims
  this%num_shape_functions          = num_shape_functions
  this%num_quadrature_points        = num_quadrature_points
  this%num_entries_symmetric_tensor = 0

  call memalloc(SPACE_DIM, &
       &        this%num_shape_functions, &
       &        this%num_quadrature_points, &
       &        this%shape_functions, __FILE__,__LINE__, 0.0_rp)

  if(this%my_duties%compute_first_derivatives_is_assigned()) then
     call memalloc(SPACE_DIM,SPACE_DIM, &
          &        this%num_shape_functions, &
          &        this%num_quadrature_points, &
          &        this%shape_derivatives, __FILE__, __LINE__, 0.0_rp)
  end if

  if(this%my_duties%compute_second_derivatives_is_assigned()) then
     do idime = 1, this%num_dims
        this%num_entries_symmetric_tensor = this%num_entries_symmetric_tensor + idime
     end do
     call memalloc(SPACE_DIM, &
          &        this%num_entries_symmetric_tensor,&
          &        this%num_shape_functions,&
          &        this%num_quadrature_points, &
          &        this%hessian,__FILE__,__LINE__) 
  end if
  
end subroutine interpolation_create

subroutine interpolation_free( this)
  implicit none
  class(interpolation_t), intent(inout) :: this
  this%num_dims                     = 0
  this%num_shape_functions          = 0
  this%num_quadrature_points        = 0
  this%num_entries_symmetric_tensor = 0
  if(allocated(this%shape_functions)) call memfree(this%shape_functions,__FILE__,__LINE__)
  if(this%my_duties%compute_first_derivatives_is_assigned()) then
     if(allocated(this%shape_derivatives)) call memfree(this%shape_derivatives,   __FILE__,__LINE__) ! Is allocated needed?
  end if
  if(this%my_duties%compute_second_derivatives_is_assigned()) then
     if(allocated(this%hessian)) call memfree(this%hessian,   __FILE__,__LINE__) ! Is allocated needed?
  end if
  call this%my_duties%assign_compute_first_derivatives(.false.)
  call this%my_duties%assign_compute_second_derivatives(.false.)
end subroutine interpolation_free

subroutine interpolation_copy(this, source_interpolation)
  implicit none
  class(interpolation_t), intent(inout) :: this
  type(interpolation_t), intent(in)     :: source_interpolation

  call this%clone(source_interpolation)
  this%shape_functions = source_interpolation%shape_functions
  if(this%my_duties%compute_first_derivatives_is_assigned())  this%shape_derivatives = source_interpolation%shape_derivatives
  if(this%my_duties%compute_second_derivatives_is_assigned()) this%hessian = source_interpolation%hessian

end subroutine interpolation_copy

subroutine interpolation_clone(this, source_interpolation)
  implicit none
  class(interpolation_t), intent(inout) :: this
  type(interpolation_t) , intent(in)    :: source_interpolation

  if (.not. this%is_needed_to_allocate( source_interpolation%num_dims,        & 
                                        source_interpolation%num_shape_functions,   &
                                        source_interpolation%num_quadrature_points, & 
                                        source_interpolation%my_duties ) ) return

 
  call this%free()
  this%my_duties             = source_interpolation%my_duties
  this%num_dims              = source_interpolation%num_dims
  this%num_shape_functions   = source_interpolation%num_shape_functions
  this%num_quadrature_points = source_interpolation%num_quadrature_points
  this%num_entries_symmetric_tensor = source_interpolation%num_entries_symmetric_tensor
  call memalloc(SPACE_DIM,this%num_shape_functions,this%num_quadrature_points, &
       &        this%shape_functions,__FILE__,__LINE__)
  if(this%my_duties%compute_first_derivatives_is_assigned()) then
     call memalloc(SPACE_DIM,SPACE_DIM,this%num_shape_functions,&
          &        this%num_quadrature_points,this%shape_derivatives,   __FILE__,__LINE__)
  end if
  if(this%my_duties%compute_second_derivatives_is_assigned()) then
    call memalloc(SPACE_DIM,this%num_entries_symmetric_tensor,this%num_shape_functions, &
         &        this%num_quadrature_points,this%hessian,   __FILE__,__LINE__) 
 end if
end subroutine interpolation_clone

subroutine interpolation_print ( this )
  implicit none
  class(interpolation_t), intent(in) :: this
  integer(ip) :: i,j,k,l
  write(*,*) 'num_dims: ', this%num_dims
  write(*,*) 'num_shape_functions: ', this%num_shape_functions
  write(*,*) 'num_quadrature_points: ', this%num_quadrature_points
  write(*,*) 'num_entries_symmetric_tensor: ', this%num_entries_symmetric_tensor
  write(*,*) '*************** SHAPE FUNCTIONS ******************'
  do i = 1, size(this%shape_functions,1)
     do j = 1, size(this%shape_functions,2)
        do k = 1, size(this%shape_functions,3)
           write(*,*) 'shape function phi^',j,'_(dim_',i,')','(gp=',k,')= ',this%shape_functions(i,j,k)
        end do
     end do
  end do

  if(this%my_duties%compute_first_derivatives_is_assigned()) then
     write(*,*) '*************** SHAPE DERIVATIVES ******************'                      
     do i = 1, size(this%shape_derivatives,1)                                                             
        do j = 1, size(this%shape_derivatives,2)                                                         
           do k = 1, size(this%shape_derivatives,3)                                                     
              do l = 1, size(this%shape_derivatives,4)                                                        
                 write(*,*) 'shape derivative D_',j,'phi^',k,'_(dim_',i,')','(gp=',l,')= ',this%shape_derivatives(i,j,k,l)
              end do
           end do
        end do
     end do
  end if

  if(this%my_duties%compute_second_derivatives_is_assigned()) then
     write(*,*) 'hessian: ', this%hessian
  else
     write(*,*) 'hessian not computed '
  end if

end subroutine interpolation_print

function interpolation_is_needed_to_allocate(           &
                                 this,                  &
                                 num_dims,              &
                                 num_shape_functions,   &
                                 num_quadrature_points, &
                                 interpolation_duties) result ( is_needed )
  implicit none
  class(interpolation_t)      , intent(inout) :: this
  integer(ip)                 , intent(in)    :: num_dims
  integer(ip)                 , intent(in)    :: num_shape_functions
  integer(ip)                 , intent(in)    :: num_quadrature_points
  type(interpolation_duties_t), optional, intent(in)    :: interpolation_duties
  logical :: is_needed

  ! We rely on the stored integers.
  ! Its is important that calling free() will set them to 0.
  ! And that they always have a valid numerical value
  is_needed = .false.
  if(present(interpolation_duties)) then
     is_needed = .not. (interpolation_duties%compute_first_derivatives_is_assigned()  .eqv. this%my_duties%compute_first_derivatives_is_assigned() )
     if(is_needed) return
     is_needed = .not. (interpolation_duties%compute_second_derivatives_is_assigned() .eqv. this%my_duties%compute_second_derivatives_is_assigned())
  end if
  if (this%num_dims .ne. num_dims)                           is_needed = .true.
  if (this%num_shape_functions .ne. num_shape_functions)     is_needed = .true.
  if (this%num_quadrature_points .ne. num_quadrature_points) is_needed = .true.

end function interpolation_is_needed_to_allocate
