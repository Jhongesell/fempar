! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published byfill_inter
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

! Polynomial_t TBP 
! ===================================================================================================

subroutine polynomial_create ( this, order )
  class(polynomial_t), intent(inout) :: this
  integer(ip)        , intent(in)    :: order 
  call this%free()
  this%order = order
  call memalloc(order+1, this%coefficients, __FILE__, __LINE__)
end subroutine polynomial_create

subroutine polynomial_copy (lhs, rhs)
   class(polynomial_t), intent(inout) :: lhs
   class(polynomial_t), intent(in)    :: rhs

   call lhs%free()
   if(allocated(rhs%coefficients)) then
      call lhs%create(rhs%order)
      lhs%coefficients = rhs%coefficients
   endif
end subroutine polynomial_copy

subroutine polynomial_free ( this )
  class(polynomial_t), intent(inout)    :: this
  this%order = -1
  if ( allocated(this%coefficients) ) call memfree( this%coefficients, __FILE__, __LINE__ )
end subroutine polynomial_free
  
! Lagrange_polynomial_t TBP 
! ===================================================================================================

! Compute the 1d shape function and n-th derivatives on ALL gauss points for ALL Lagrange polynomials
subroutine lagrange_polynomial_get_values (this,x,p_x)
  class(lagrange_polynomial_t), intent(in)    :: this
  real(rp)                    , intent(in)    :: x
  real(rp)                    , intent(inout) :: p_x(3)
  integer(ip) :: i,j
  p_x = 0.0_rp
  p_x(1) = 1.0_rp
  do i = 1,this%order
     do j = size(p_x),2,-1
        p_x(j) = p_x(j)*(x-this%coefficients(i))+p_x(j-1)
     end do
     p_x(1) = p_x(1)*(x-this%coefficients(i))
  end do
  p_x = p_x*this%coefficients(this%order+1)
end subroutine lagrange_polynomial_get_values

! Generate the basis of 1D Lagrange polynomials for a given order of interpolation
subroutine lagrange_polynomial_generate_basis ( order, basis )
  implicit none
  integer(ip)                         , intent(in)    :: order
  type(polynomial_allocatable_array_t), intent(inout) :: basis
  integer(ip) :: i,j,istat
  real(rp) :: node_coordinates(order+1)
  type(lagrange_polynomial_t) :: mold_polynomial
  
  call basis%create (order+1, mold_polynomial )
  do i = 0,order
     node_coordinates(i+1) = i
  end do
  
  if (order>0) then 
  node_coordinates = (2.0_rp/order)*node_coordinates-1.0_rp
  end if 
  
  do i=1,order+1
     call basis%polynomials(i)%create(order)
     basis%polynomials(i)%coefficients(1:i-1) = node_coordinates(1:i-1)
     basis%polynomials(i)%coefficients(i:order) = node_coordinates(i+1:order+1)
     basis%polynomials(i)%coefficients(order+1)  = 1.0_rp
     do j = 1,order+1
        if ( j /= i ) then
           basis%polynomials(i)%coefficients(order+1) = basis%polynomials(i)%coefficients(order+1)*(node_coordinates(i)-node_coordinates(j))
        end if
     end do
     basis%polynomials(i)%coefficients(order+1) = 1/basis%polynomials(i)%coefficients(order+1)
  end do
  
end subroutine lagrange_polynomial_generate_basis
  
! Monomial_t TBP 
! ===================================================================================================
subroutine monomial_get_values(this,x,p_x)
  implicit none
  class(monomial_t), intent(in)    :: this
  real(rp)         , intent(in)    :: x
  real(rp)         , intent(inout) :: p_x(3)

  p_x(1) = x**real(this%order,rp)
  if ( this%order >= 1 ) then
    p_x(2) = real(this%order,rp) * x**(real(this%order,rp)-1.0_rp)
  else
    p_x(2) = 0.0_rp
  end if 
  if ( this%order >= 2 ) then
    p_x(3) = (real(this%order,rp)-1.0_rp)*real(this%order,rp) * x**(real(this%order,rp)-1.0_rp)
  else
    p_x(3) = 0.0_rp
  end if  
end subroutine monomial_get_values

subroutine monomial_generate_basis ( order, basis )
  implicit none
  integer(ip)                         , intent(in)    :: order
  type(polynomial_allocatable_array_t), intent(inout) :: basis
  integer(ip) :: i
  type(monomial_t ) :: mold_monomial

  call basis%create(order+1, mold_monomial)
  do i = 0,order
     call basis%polynomials(i+1)%create(i)
  end do
end subroutine monomial_generate_basis

! polynomial_allocatable_array_t TBPS
!===================================================================================
subroutine polynomial_allocatable_array_create ( this, number_polynomials, mold_polynomial )
  implicit none
  class(polynomial_allocatable_array_t), intent(inout) :: this
  integer(ip)                          , intent(in)    :: number_polynomials
  class(polynomial_t)                  , intent(in)    :: mold_polynomial
  call this%free()
  allocate ( this%polynomials(number_polynomials), mold=mold_polynomial )
end subroutine polynomial_allocatable_array_create

subroutine polynomial_allocatable_array_copy (lhs, rhs)
  implicit none
  class(polynomial_allocatable_array_t), intent(inout) :: lhs
  type(polynomial_allocatable_array_t) , intent(in)    :: rhs
  integer(ip)                                          :: idx
  type(lagrange_polynomial_t)                          :: mold_polynomial
  call lhs%free()
  if(allocated(rhs%polynomials)) then
     if (size(rhs%polynomials) > 0) then
        call lhs%create(size(rhs%polynomials), rhs%polynomials(1))
        do idx=1, size(rhs%polynomials)
          call lhs%polynomials(idx)%copy(rhs%polynomials(idx))
        enddo   
     else
        call lhs%create(0, mold_polynomial)
     end if
  endif
end subroutine polynomial_allocatable_array_copy

subroutine polynomial_allocatable_array_free( this )
  implicit none
  class(polynomial_allocatable_array_t), intent(inout) :: this
  integer(ip) :: istat,i
  if ( allocated(this%polynomials)) then
     do i = 1, size(this%polynomials)
           call this%polynomials(i)%free()
     end do
     deallocate( this%polynomials, stat=istat )
     check( istat == 0 )
  end if
end subroutine polynomial_allocatable_array_free
