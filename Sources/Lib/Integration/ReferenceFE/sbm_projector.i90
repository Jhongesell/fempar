! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
subroutine create_projector( projector, reference_fe, projector_type)  
  implicit none 
  class(projector_t) , allocatable        , intent(inout) :: projector
  class(reference_fe_t)                   , intent(in)    :: reference_fe 
  integer(ip), optional                   , intent(in)    :: projector_type   

		! Allocation of projector_t based on the reference_fe. Other projections 
		! could be implemented not depending on the reference_fe, then an optional 
		! argument must be passed indicating projector_type
		select type ( reference_fe ) 
		class is (hex_nedelec_reference_fe_t ) 
  allocate( hex_Hcurl_projector_t :: projector )
		class is ( tet_nedelec_reference_fe_t ) 
		allocate( tet_Hcurl_projector_t :: projector ) 
		class is ( hex_lagrangian_reference_fe_t ) 
		allocate ( H1_projector_t :: projector ) 
		class is ( tet_lagrangian_reference_fe_t ) 
		allocate ( H1_projector_t :: projector ) 
		class DEFAULT
		check(.false.) 
		end select 
		
		! Init variables
		projector%topology   = reference_fe%topology   
  projector%num_dims   = reference_fe%num_dims 
  projector%order      = reference_fe%order
		projector%field_type = reference_fe%field_type  

end subroutine create_projector

! ================================================================================
subroutine projector_update( this, coordinates )
  implicit none
  class(projector_t)          , intent(inout) :: this
		type(point_t) , target      , intent(in)    :: coordinates(:)

		! Update nodal coordinates of the fe
  this%cell_coordinates => coordinates
		
end subroutine projector_update

! ================================================================================
subroutine Hcurl_projector_evaluate_scalar_function_moments( this, scalar_function, dof_values ) 
  implicit none
  class(Hcurl_projector_t)        , intent(inout) :: this
  class(scalar_function_t)     , intent(in)    :: scalar_function
  real(rp) , allocatable       , intent(inout) :: dof_values(:) 
		! Does not apply for vector FEs
  assert(.false.) 
end subroutine Hcurl_projector_evaluate_scalar_function_moments
