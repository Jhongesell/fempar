! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!===================================================================================================
subroutine error_norms_vector_create (this, fe_space, field_id)
  implicit none
  class(error_norms_vector_t)     , intent(inout) :: this
  class(serial_fe_space_t), target, intent(in)    :: fe_space
  integer(ip)                     , intent(in)    :: field_id

  integer(ip)                   :: istat
  class(environment_t), pointer :: environment

  call this%free()

  this%field_id = field_id
  this%fe_space => fe_space
  call this%cell_fe_function%create(fe_space, field_id)  
  environment => this%fe_space%get_environment()
  if ( environment%am_i_l1_task() ) then
     allocate(this%work_array_values(this%fe_space%get_max_number_quadrature_points(),1), stat=istat)
     check(istat==0)
     allocate(this%work_array_gradients(this%fe_space%get_max_number_quadrature_points(),1), stat=istat)
     check(istat==0)
     allocate(this%work_array_curl_values(this%fe_space%get_max_number_quadrature_points(),1), stat=istat)
     check(istat==0) 
  end if
end subroutine error_norms_vector_create

!===================================================================================================
subroutine error_norms_vector_free (this)
  implicit none
  class(error_norms_vector_t), intent(inout) :: this
  integer(ip) :: istat
  this%field_id = 0
  nullify(this%fe_space)
  call this%cell_fe_function%free()
  
  if (allocated(this%work_array_values)) then
     deallocate(this%work_array_values, stat=istat)
     check(istat==0)
  end if
  
  if (allocated(this%work_array_values)) then
     deallocate(this%work_array_values, stat=istat)
     check(istat==0)
  end if
  
  if (allocated(this%work_array_curl_values)) then
     deallocate(this%work_array_curl_values, stat=istat)
     check(istat==0)
  end if
  
end subroutine error_norms_vector_free

!===================================================================================================
function error_norms_vector_compute (this, exact_solution, fe_function, norm_type, exponent, time ) result(norm)
  implicit none
  class(error_norms_vector_t), intent(inout) :: this
  class(vector_function_t)   , intent(in)    :: exact_solution
  type(fe_function_t)        , intent(in)    :: fe_function
  character(*)               , intent(in)    :: norm_type
  integer(ip), optional      , intent(in)    :: exponent
  real(rp)   , optional      , intent(in)    :: time
  real(rp)                                   :: norm

  ! Local variables
  real(rp)                      :: exponent_
  real(rp)                      :: time_(1)
  type(fe_iterator_t)           :: fe_iterator
  type(fe_accessor_t)           :: fe
  real(rp)                      :: values_cell_contribution, values_norm
  real(rp)                      :: gradients_cell_contribution, gradients_norm
  real(rp)                      :: curl_values_cell_contribution, curl_values_norm 
  class(environment_t), pointer :: environment

  assert ( error_norm_is_supported(norm_type) )

  environment => this%fe_space%get_environment()
  if ( environment%am_i_l1_task() ) then 
     exponent_ = error_norm_determine_exponent(norm_type, exponent)
     values_norm      = 0.0_rp
     gradients_norm   = 0.0_rp
     curl_values_norm = 0.0_rp 
     fe_iterator = this%fe_space%create_fe_iterator()
     do while ( .not. fe_iterator%has_finished() ) 
        call fe_iterator%current(fe)
        if ( fe%is_local() ) then
           call fe%update_integration()
           call this%cell_fe_function%update(fe, fe_function)
           call this%compute_cell_contribution( fe, &
                                                exact_solution, & 
                                                norm_type, &
                                                exponent_, &
                                                values_cell_contribution, &
                                                gradients_cell_contribution, & 
                                                curl_values_cell_contribution, &
                                                time)
           call update_norm(norm_type, values_cell_contribution   , values_norm)
           call update_norm(norm_type, gradients_cell_contribution, gradients_norm)
           call update_norm(norm_type, curl_values_cell_contribution, curl_values_norm)
        end if
        call fe_iterator%next() 
     end do
     call finalize_norm(environment, norm_type, exponent_, values_norm, gradients_norm, norm, curl_values_norm)
  end if
end function error_norms_vector_compute

subroutine error_norms_vector_compute_cell_contribution (this, &
                                                         fe, & 
                                                         exact_solution, & 
                                                         norm_type, & 
                                                         exponent, &
                                                         values_cell_contribution, & 
                                                         gradients_cell_contribution, &
                                                         curl_values_cell_contribution, &
                                                         time )
  implicit none
  class(error_norms_vector_t), intent(inout) :: this
  type(fe_accessor_t)        , intent(in)    :: fe
  class(vector_function_t)   , intent(in)    :: exact_solution
  character(*)               , intent(in)    :: norm_type
  real(rp)                   , intent(in)    :: exponent
  real(rp)                   , intent(out)   :: values_cell_contribution
  real(rp)                   , intent(out)   :: gradients_cell_contribution
  real(rp)                   , intent(out)   :: curl_values_cell_contribution
  real(rp)   , optional      , intent(in)    :: time 

  !! Locals 
  logical                       :: norm_requires_values
  logical                       :: norm_requires_gradients
  logical                       :: norm_requires_curl_values 
  type(fe_map_t)    , pointer   :: fe_map 
  type(quadrature_t), pointer   :: quadrature 
  type(point_t)     , pointer   :: coordinates(:)
  real(rp)                      :: time_(1) 
  integer(ip)                   :: q_point, n_q_points
  integer(ip)                   :: number_dimensions, idime, jdime
  real(rp)                      :: sum, gradient_component
  
  type(vector_field_t), pointer :: fe_function_values(:)
  type(tensor_field_t), pointer :: fe_function_gradients(:)
  type(vector_field_t), allocatable :: fe_function_curl_values(:)

  integer(ip) :: istat 
  
  if ( present(time) ) time_ = time

  norm_requires_values      = error_norm_requires_values(norm_type)
  norm_requires_gradients   = error_norm_requires_gradients(norm_type) 
  norm_requires_curl_values = error_norm_requires_curl_values(norm_type) 
  fe_map                  => fe%get_fe_map()
  quadrature              => fe%get_quadrature()
  coordinates             => fe_map%get_quadrature_coordinates()
  n_q_points              = quadrature%get_number_quadrature_points() 

  if (norm_requires_values) then
     ! First evaluate exact solution at the quadrature points.
     if(present(time)) then
        call exact_solution%get_values_set_space_time(coordinates, &
                                                      time_, &
                                                      this%work_array_values(1:n_q_points,1:1))
     else
        call exact_solution%get_values_set_space(coordinates, &
                                                 this%work_array_values(1:n_q_points,1))
     end if
     ! Then, subtract fe_function.
     fe_function_values    => this%cell_fe_function%get_quadrature_points_values()
     do q_point=1, n_q_points
        this%work_array_values(q_point,1) = this%work_array_values(q_point,1) - fe_function_values(q_point) 
     end do
  end if

  ! Do the same for gradients, if required by norm type 
  if (norm_requires_gradients) then  
     if(present(time)) then
        call exact_solution%get_gradients_set_space_time(coordinates, &
                                                         time_, &
                                                         this%work_array_gradients(1:n_q_points,1:1))
     else
        call exact_solution%get_gradients_set_space(coordinates, &
                                                    this%work_array_gradients(1:n_q_points,1))
     end if
     fe_function_gradients => this%cell_fe_function%get_quadrature_points_gradients()
     do q_point=1, n_q_points
        this%work_array_gradients(q_point,1) = this%work_array_gradients(q_point,1) - fe_function_gradients(q_point) 
     end do
  end if

    ! Do the same for curl values, if required by norm type 
  if (norm_requires_curl_values) then  
     if(present(time)) then
        call exact_solution%get_curl_set_space_time(coordinates, &
                                                    time_, &
                                                    this%work_array_curl_values(1:n_q_points,1:1))
     else
        call exact_solution%get_curl_set_space(coordinates, &
                                               this%work_array_curl_values(1:n_q_points,1))
     end if
     allocate(fe_function_curl_values(n_q_points), stat=istat); check(istat==0)
     call this%cell_fe_function%get_quadrature_points_curl_values(fe_function_curl_values)
     do q_point=1, n_q_points
        this%work_array_curl_values(q_point,1) = this%work_array_curl_values(q_point,1) - fe_function_curl_values(q_point) 
     end do
     deallocate(fe_function_curl_values, stat=istat); check(istat==0) 
  end if
  
  values_cell_contribution = 0.0_rp 
  select case ( trim(norm_type) )
  case (mean_norm)
     do q_point=1, n_q_points
        sum = 0.0_rp
        do idime=1, SPACE_DIM
           sum = sum + this%work_array_values(q_point,1)%get(idime)
        end do
        values_cell_contribution = values_cell_contribution + & 
             sum*fe_map%get_det_jacobian(q_point)*quadrature%get_weight(q_point)
     end do
  case (l1_norm)
     do q_point=1, n_q_points
        sum = 0.0_rp
        do idime=1, SPACE_DIM
           sum = sum + abs(this%work_array_values(q_point,1)%get(idime))
        end do
        values_cell_contribution = values_cell_contribution + & 
             sum*fe_map%get_det_jacobian(q_point)*quadrature%get_weight(q_point)
     end do
  case (l2_norm,h1_norm)
     do q_point=1, n_q_points
        values_cell_contribution = values_cell_contribution + & 
             (this%work_array_values(q_point,1)*this%work_array_values(q_point,1))*&
             fe_map%get_det_jacobian(q_point) * quadrature%get_weight(q_point)
     end do
  case (lp_norm,w1p_norm)
     do q_point=1, n_q_points
        values_cell_contribution = values_cell_contribution + & 
             (this%work_array_values(q_point,1)*this%work_array_values(q_point,1))**(exponent/2.0_rp)*&
             fe_map%get_det_jacobian(q_point) * quadrature%get_weight(q_point)
     end do
  case (linfty_norm,w1infty_norm)
     do q_point=1, n_q_points
        do idime=1, SPACE_DIM
           values_cell_contribution = max(values_cell_contribution, abs(this%work_array_values(q_point,1)%get(idime)))
        end do
     end do
  end select

  gradients_cell_contribution = 0.0_rp 
  select case ( trim(norm_type) )
  case (h1_norm, h1_seminorm)
     do q_point=1, n_q_points
        gradients_cell_contribution = gradients_cell_contribution + & 
             (double_contract(this%work_array_gradients(q_point,1),this%work_array_gradients(q_point,1)))*&
             fe_map%get_det_jacobian(q_point) * quadrature%get_weight(q_point)
     end do
  case (hdiv_seminorm)
     sum=0.0_rp
     do q_point=1, n_q_points
         do idime=1,SPACE_DIM
            sum = sum + this%work_array_gradients(q_point,1)%get(idime,idime)*this%work_array_gradients(q_point,1)%get(idime,idime)
         end do
         gradients_cell_contribution = gradients_cell_contribution + sum* &
             fe_map%get_det_jacobian(q_point) * quadrature%get_weight(q_point)
     end do   
  case (w1p_norm, w1p_seminorm)
     do q_point=1, n_q_points
        gradients_cell_contribution = gradients_cell_contribution + & 
             (double_contract(this%work_array_gradients(q_point,1),this%work_array_gradients(q_point,1)))**(exponent/2.0_rp)*&
             fe_map%get_det_jacobian(q_point) * quadrature%get_weight(q_point)
     end do
  case (w1infty_norm,w1infty_seminorm)
     do q_point=1, n_q_points
       do jdime=1, SPACE_DIM
        do idime=1, SPACE_DIM  
           gradient_component          = this%work_array_gradients(q_point,1)%get(idime,jdime)
           gradients_cell_contribution = max(gradients_cell_contribution, abs(gradient_component))
        end do
       end do 
     end do

  end select
  
  curl_values_cell_contribution = 0.0_rp 
  select case ( trim(norm_type) )
  case (hcurl_seminorm)
     do q_point=1, n_q_points
        curl_values_cell_contribution = curl_values_cell_contribution + & 
             this%work_array_curl_values(q_point,1)*this%work_array_curl_values(q_point,1)*&
             fe_map%get_det_jacobian(q_point) * quadrature%get_weight(q_point)
     end do
  end select

end subroutine error_norms_vector_compute_cell_contribution
