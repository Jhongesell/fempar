! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine array_set_number_components( this, number_components )
  class(array_function_t), intent(inout) :: this
  integer(ip), intent(in)          :: number_components
  this%number_components = number_components
end subroutine array_set_number_components

function array_function_get_number_components( this )
  class(array_function_t), intent(in) :: this
  integer(ip) :: array_function_get_number_components
  assert ( this%number_components >= 1  )
  array_function_get_number_components = this%number_components
end function array_function_get_number_components

subroutine array_function_get_component_value_space( this, point, component, result )
  class(array_function_t), intent(in) :: this
  type(point_t), intent(in)          :: point
  integer(ip), intent(in)             :: component
  real(rp), intent(inout)             :: result
  ! Error: Function f(x) not implemented 
  assert( .false. )
end subroutine array_function_get_component_value_space

subroutine array_function_get_component_value_space_time( this, point, time, component, result )
  class(array_function_t), intent(in) :: this
  type(point_t), intent(in)          :: point
  real(rp), intent(in)                :: time
  integer(ip), intent(in)             :: component
  real(rp), intent(inout)             :: result
  ! Error: Function f(x,t) not implemented 
  assert( .false. )
end subroutine array_function_get_component_value_space_time

subroutine array_function_get_component_values_set_space( this, point, component, result )
  class(array_function_t), intent(in) :: this
  type(point_t), intent(in)          :: point(:)
  integer(ip), intent(in)             :: component
  real(rp), intent(inout)             :: result(:)
  integer(ip) :: i, num_points
  num_points = size(point)
  do i = 1, num_points
     call this%get_component_value_space( point(i), component, result(i) )
  end do
end subroutine array_function_get_component_values_set_space

subroutine array_function_get_component_values_set_space_time( this, point, time, component, result )
  class(array_function_t), intent(in) :: this
  type(point_t), intent(in)          :: point(:)
  real(rp), intent(in)                :: time(:)
  integer(ip), intent(in)             :: component
  real(rp), intent(inout)             :: result(:,:)
  integer(ip) :: i, j, num_points, num_time_steps
  num_points = size(point)
  num_time_steps = size(time)
  do j = 1, num_time_steps
     do i = 1, num_points
        call this%get_component_value_space_time( point(i), time(j), component, result(i,j) )
     end do
  end do
end subroutine array_function_get_component_values_set_space_time

subroutine array_function_get_value_space( this, result, point )
  class(array_function_t), intent(in) :: this
  type(point_t), intent(in)          :: point
  real(rp), intent(inout)             :: result(:)
  integer(ip) :: i
  do i = 1, this%number_components
     call this%get_component_value_space( point, i, result(i) )
  end do
end subroutine array_function_get_value_space

subroutine array_function_get_value_space_time( this, point, time, result )
  class(array_function_t), intent(in) :: this
  type(point_t), intent(in)          :: point
  real(rp), intent(in)                :: time
  real(rp), intent(inout)             :: result(:)
  integer(ip) :: i
  do i = 1, this%number_components
     call this%get_component_value_space_time( point, time, i, result(i) )
  end do
end subroutine array_function_get_value_space_time

subroutine array_function_get_values_set_space( this, point, result )
  class(array_function_t), intent(in) :: this
  type(point_t), intent(in)          :: point(:)
  real(rp), intent(inout)             :: result(:,:)
  integer(ip) :: i
  do i = 1, this%number_components
     call this%get_component_values_set_space( point, i, result(i,:) )
  end do
end subroutine array_function_get_values_set_space

subroutine array_function_get_values_set_space_time( this, point, time, result )
  class(array_function_t), intent(in) :: this
  type(point_t), intent(in)          :: point(:)
  real(rp), intent(in)                :: time(:)
  real(rp), intent(inout)             :: result(:,:,:)
  integer(ip) :: i
  do i = 1, this%number_components
     call this%get_component_values_set_space_time( point, time, i, result(i,:,:) )
  end do
end subroutine array_function_get_values_set_space_time


