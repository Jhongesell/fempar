
subroutine fe_affine_operator_create (this, &
                                      sparse_matrix_storage_format, &
                                      diagonal_blocks_symmetric_storage,&
                                      diagonal_blocks_symmetric,&
                                      diagonal_blocks_sign,&
                                      fe_space,&
                                      discrete_integration, &
                                      trial_fe_space )
 implicit none
 class(fe_affine_operator_t)              , intent(inout) :: this
 character(*)                             , intent(in)    :: sparse_matrix_storage_format
 logical                                  , intent(in)    :: diagonal_blocks_symmetric_storage(:)
 logical                                  , intent(in)    :: diagonal_blocks_symmetric(:)
 integer(ip)                              , intent(in)    :: diagonal_blocks_sign(:)
 class(serial_fe_space_t)        , target, intent(inout) :: fe_space
 class(discrete_integration_t)   , target, intent(in)    :: discrete_integration
 class(serial_fe_space_t), target, optional, intent(inout) :: trial_fe_space
 integer(ip) :: istat
 
 call this%free()
 
 assert(.not. associated(this%state)) ! Equivalent to: this%state == start ?
 allocate(this%state, stat=istat); check(istat==0);
  
 this%sparse_matrix_storage_format = sparse_matrix_storage_format
 this%test_fe_space  => fe_space
 this%discrete_integration => discrete_integration
 
 if ( present(trial_fe_space) ) then
    this%trial_fe_space => trial_fe_space
 end if
 
  select type(fe_space => this%test_fe_space)
  class is(serial_fe_space_t) 
    this%assembler  => this%create_serial_assembler(diagonal_blocks_symmetric_storage, &
                                                                 diagonal_blocks_symmetric, &
                                                                 diagonal_blocks_sign)
  class is(par_fe_space_t) 
    this%assembler  => this%create_par_assembler(diagonal_blocks_symmetric_storage, &
                                                              diagonal_blocks_symmetric, &
                                                              diagonal_blocks_sign)
  class default
    check(.false.)
  end select
    
 call this%create_vector_spaces()
 this%state = created_affine
end subroutine fe_affine_operator_create

  !subroutine fe_affine_operator_create_vector_spaces(this)
  !  implicit none
  !  class(fe_affine_operator_t), intent(inout) :: this
  !  type(vector_space_t), pointer                 :: fe_affine_operator_domain_vector_space
  !  type(vector_space_t), pointer                 :: fe_affine_operator_range_vector_space
  !  type(vector_space_t), pointer                 :: matrix_domain_vector_space
  !  type(vector_space_t), pointer                 :: matrix_range_vector_space
  !  class(matrix_t)     , pointer :: matrix
  !  matrix => this%assembler%get_matrix()
  !  matrix_domain_vector_space => matrix%get_domain_vector_space()
  !  matrix_range_vector_space => matrix%get_range_vector_space()
  !  fe_affine_operator_domain_vector_space => operator_get_domain_vector_space(this)
  !  fe_affine_operator_range_vector_space => operator_get_range_vector_space(this)
  !  call matrix_domain_vector_space%clone(fe_affine_operator_domain_vector_space)
  !  call matrix_range_vector_space%clone(fe_affine_operator_range_vector_space)
  !end subroutine fe_affine_operator_create_vector_spaces


subroutine fe_affine_operator_symbolic_setup (this)
 implicit none
 class(fe_affine_operator_t), intent(inout) :: this
 
 assert ( associated(this%state) )
 if ( this%state == created_affine ) then 
    this%state = symbolically_setup
 end if
end subroutine fe_affine_operator_symbolic_setup

subroutine fe_affine_operator_numerical_setup (this)
 implicit none
 class(fe_affine_operator_t), intent(inout) :: this

 assert ( associated(this%state) )

 if ( this%state == created_affine ) then
    call this%symbolic_setup()
 end if
 if ( this%state == symbolically_setup ) then
    this%state = numerically_setup
    call this%assembler%allocate_array()
    call this%assembler%init_array(0.0_rp)
 elseif ( this%state == numerically_setup ) then
    call this%assembler%init_array(0.0_rp)
    call this%assembler%init_matrix(0.0_rp)
 end if

 call this%fe_affine_operator_fill_values()
 call this%assembler%compress_storage(this%sparse_matrix_storage_format)
end subroutine fe_affine_operator_numerical_setup

!function fe_affine_operator_create_serial_assembler (this, &
!                                                     diagonal_blocks_symmetric_storage,&
!                                                     diagonal_blocks_symmetric, & 
!                                                     diagonal_blocks_sign)
!  implicit none
!  class(fe_affine_operator_t)     , intent(in) :: this
!  logical                         , intent(in) :: diagonal_blocks_symmetric_storage(:)
!  logical                         , intent(in) :: diagonal_blocks_symmetric(:)
!  integer(ip)                     , intent(in) :: diagonal_blocks_sign(:)
!  class(assembler_t) , pointer    :: fe_affine_operator_create_serial_assembler

!  ! Locals
!  class(matrix_t), pointer :: matrix
!  class(array_t) , pointer :: array
!  integer(ip)          :: ife_space, jfe_space
!  integer(ip)          :: iblock, jblock
!  type(block_layout_t), pointer :: block_layout
! 
!  block_layout => this%test_fe_space%get_block_layout()
!  if (block_layout%get_num_blocks() == 1) then
!     allocate ( sparse_assembler_t :: fe_affine_operator_create_serial_assembler )
!     allocate ( sparse_matrix_t :: matrix )
!     allocate ( serial_scalar_array_t  :: array )
!     select type(matrix)
!        class is(sparse_matrix_t)
!        call matrix%create(block_layout%get_block_num_dofs(1), &
!                           diagonal_blocks_symmetric_storage(1),&
!                           diagonal_blocks_symmetric(1),&
!                           diagonal_blocks_sign(1))
!        class default
!        check(.false.)
!     end select
!     select type(array)
!        class is(serial_scalar_array_t)
!        call array%create(block_layout%get_block_num_dofs(1))
!        class default
!        check(.false.)
!     end select
!  else
!     allocate ( block_sparse_assembler_t :: fe_affine_operator_create_serial_assembler )
!     allocate ( block_sparse_matrix_t :: matrix )
!     allocate ( serial_block_array_t  :: array )
!     select type(matrix)
!        class is (block_sparse_matrix_t)
!        call matrix%create(block_layout%get_num_blocks(), &
!             block_layout%get_num_dofs_x_block(),&
!             block_layout%get_num_dofs_x_block(),&
!             diagonal_blocks_symmetric_storage,&
!             diagonal_blocks_symmetric,&
!             diagonal_blocks_sign)

!        do jblock=1,block_layout%get_num_blocks()
!           do iblock=1,block_layout%get_num_blocks()
!              if (.not. block_layout%blocks_coupled(iblock,jblock) ) then
!                 call matrix%set_block_to_zero(iblock,jblock)
!              end if
!           end do
!        end do
!        class default
!        check(.false.)
!     end select
!     select type(array)
!        class is(serial_block_array_t)
!        call array%create(block_layout%get_num_blocks(),block_layout%get_num_dofs_x_block())
!        class default
!        check(.false.)
!     end select
!  end if
!  call fe_affine_operator_create_serial_assembler%set_matrix(matrix)
!  call fe_affine_operator_create_serial_assembler%set_array(array)
!end function fe_affine_operator_create_serial_assembler

!function fe_affine_operator_create_par_assembler(this, &
!                                                 diagonal_blocks_symmetric_storage,&
!                                                 diagonal_blocks_symmetric, & 
!                                                 diagonal_blocks_sign)
!  implicit none
!  class(fe_affine_operator_t)       , intent(in) :: this
!  logical                           , intent(in) :: diagonal_blocks_symmetric_storage(:)
!  logical                           , intent(in) :: diagonal_blocks_symmetric(:)
!  integer(ip)                       , intent(in) :: diagonal_blocks_sign(:)
!  class(assembler_t)   , pointer    :: fe_affine_operator_create_par_assembler

!  ! Locals
!  class(matrix_t), pointer :: matrix
!  class(array_t) , pointer :: array
!  type(environment_t), pointer :: par_environment
!  type(block_layout_t), pointer :: block_layout
! 
!  block_layout => this%test_fe_space%get_block_layout()
!  
!  select type(fe_space => this%test_fe_space)
!  class is(par_fe_space_t)
!   par_environment => fe_space%get_environment()
!   if (block_layout%get_num_blocks() == 1) then
!     allocate ( par_sparse_assembler_t :: fe_affine_operator_create_par_assembler )
!     allocate ( par_sparse_matrix_t :: matrix )
!     allocate ( par_scalar_array_t  :: array )
!     select type(matrix)
!        class is(par_sparse_matrix_t)
!        call matrix%create(par_environment, &
!                           fe_space%get_block_dof_import(1), &
!                           diagonal_blocks_symmetric_storage(1),&
!                           diagonal_blocks_symmetric(1),&
!                           diagonal_blocks_sign(1))
!        class default
!        check(.false.)
!     end select
!     select type(array)
!        class is(par_scalar_array_t)
!        call array%create(par_environment, &
!                          fe_space%get_block_dof_import(1))
!        class default
!        check(.false.)
!     end select
!   else
!     check(.false.)
!   end if
!   call fe_affine_operator_create_par_assembler%set_matrix(matrix)
!   call fe_affine_operator_create_par_assembler%set_array(array)
!  class default
!   check(.false.)
!  end select
!end function fe_affine_operator_create_par_assembler

subroutine fe_affine_operator_free_numerical_setup(this)
 implicit none
 class(fe_affine_operator_t), intent(inout) :: this
 call this%assembler%free_in_stages(free_numerical_setup)
end subroutine fe_affine_operator_free_numerical_setup

subroutine fe_affine_operator_free_symbolic_setup(this)
 implicit none
 class(fe_affine_operator_t), intent(inout) :: this
 call this%assembler%free_in_stages(free_symbolic_setup)
end subroutine fe_affine_operator_free_symbolic_setup

subroutine fe_affine_operator_free_clean(this)
 implicit none
 class(fe_affine_operator_t), intent(inout) :: this
 integer(ip) :: istat
 deallocate(this%sparse_matrix_storage_format)
 nullify(this%test_fe_space)
 nullify(this%trial_fe_space)
 nullify(this%discrete_integration)
 call this%assembler%free_in_stages(free_clean)
 deallocate(this%assembler, stat=istat )
 check(istat==0)
 nullify(this%assembler)
 call this%free_vector_spaces()
end subroutine fe_affine_operator_free_clean

subroutine fe_affine_operator_free_in_stages(this,action)
 implicit none
 class(fe_affine_operator_t), intent(inout) :: this
 integer(ip)                , intent(in)    :: action
 integer(ip)                                :: istat

 if ( .not. associated(this%state) ) then
    return
 else if ( this%state == created_affine ) then
    if ( action == free_clean ) then
       call this%fe_affine_operator_free_clean()
       this%state => NULL()
    end if
 else if ( this%state == symbolically_setup ) then
    if ( action == free_symbolic_setup ) then
       call this%fe_affine_operator_free_symbolic_setup()
       this%state = created_affine
    else if ( action == free_clean ) then
       call this%fe_affine_operator_free_symbolic_setup()
       call this%fe_affine_operator_free_clean()
       this%state => NULL()
    end if
 else if ( this%state == numerically_setup ) then
    if ( action == free_numerical_setup ) then
       call this%fe_affine_operator_free_numerical_setup()
       this%state = symbolically_setup
    else if ( action == free_symbolic_setup ) then
       call this%fe_affine_operator_free_numerical_setup()
       call this%fe_affine_operator_free_symbolic_setup()
       this%state = created_affine
    else if ( action == free_clean ) then
       call this%fe_affine_operator_free_numerical_setup()
       call this%fe_affine_operator_free_symbolic_setup()
       call this%fe_affine_operator_free_clean()
       this%state => NULL()
    end if
 end if

end subroutine fe_affine_operator_free_in_stages

subroutine fe_affine_operator_free(this)
 implicit none
 class(fe_affine_operator_t), intent(inout) :: this
 call this%free_in_stages(free_numerical_setup)
 call this%free_in_stages(free_symbolic_setup)
 call this%free_in_stages(free_clean)
end subroutine fe_affine_operator_free

function fe_affine_operator_get_matrix(this)
 implicit none
 class(fe_affine_operator_t), target, intent(in) :: this
 class(matrix_t), pointer :: fe_affine_operator_get_matrix
 call this%fe_affine_operator_setup()
 fe_affine_operator_get_matrix => this%assembler%get_matrix()
end function fe_affine_operator_get_matrix

!function fe_affine_operator_get_array(this)
! implicit none
! class(fe_affine_operator_t), target, intent(in) :: this
! class(array_t), pointer :: fe_affine_operator_get_array
! call this%fe_affine_operator_setup()
! fe_affine_operator_get_array => this%assembler%get_array()
!end function fe_affine_operator_get_array

!function fe_affine_operator_get_fe_space(this)
! implicit none
! class(fe_affine_operator_t), target, intent(in) :: this
! class(serial_fe_space_t), pointer :: fe_affine_operator_get_fe_space
! assert ( .not. this%state == start )
! fe_affine_operator_get_fe_space => this%test_fe_space
!end function fe_affine_operator_get_fe_space

!function fe_affine_operator_get_discrete_integration(this)
! implicit none
! class(fe_affine_operator_t), target, intent(in) :: this
! class(discrete_integration_t), pointer :: fe_affine_operator_get_discrete_integration
! assert ( .not. this%state == start )
! fe_affine_operator_get_discrete_integration => this%discrete_integration
!end function fe_affine_operator_get_discrete_integration

! op%apply(x,y) <=> y <- op*x
! Implicitly assumes that y is already allocated
subroutine fe_affine_operator_apply(this,x,y) 
 implicit none
 class(fe_affine_operator_t), intent(in)    :: this
 class(vector_t) , intent(in)    :: x
 class(vector_t) , intent(inout) :: y 
 class(matrix_t) , pointer       :: matrix
 class(array_t)  , pointer       :: array
 call this%fe_affine_operator_setup()
 call this%abort_if_not_in_domain(x)
 call this%abort_if_not_in_range(y)
 call x%GuardTemp()
 matrix => this%assembler%get_matrix()
 call matrix%apply(x,y)
 array => this%assembler%get_array()
 call y%axpby( -1.0_rp, array, 1.0_rp )
 call x%CleanTemp()
end subroutine fe_affine_operator_apply

! op%apply(x,y) <=> y <- op*x+y
! Implicitly assumes that y is already allocated
subroutine fe_affine_operator_apply_add(this,x,y) 
 implicit none
 class(fe_affine_operator_t), intent(in)    :: this
 class(vector_t) , intent(in)    :: x
 class(vector_t) , intent(inout) :: y 
 class(matrix_t) , pointer       :: matrix
 class(array_t)  , pointer       :: array
 call this%fe_affine_operator_setup()
 call this%abort_if_not_in_domain(x)
 call this%abort_if_not_in_range(y)
 call x%GuardTemp()
 matrix => this%assembler%get_matrix()
 call matrix%apply_add(x,y)
 array => this%assembler%get_array()
 call y%axpby( -1.0_rp, array, 1.0_rp )
 call x%CleanTemp()
end subroutine fe_affine_operator_apply_add

function fe_affine_operator_is_linear(this)
 implicit none
 class(fe_affine_operator_t), intent(in) :: this
 logical :: fe_affine_operator_is_linear
 fe_affine_operator_is_linear = .true.
end function fe_affine_operator_is_linear

function fe_affine_operator_get_tangent(this) result(tangent)
 implicit none
 class(fe_affine_operator_t), intent(in) :: this
 type(lvalue_operator_t)          :: tangent
 call this%fe_affine_operator_setup()
 tangent = this%assembler%get_matrix()
 call tangent%SetTemp()
end function fe_affine_operator_get_tangent

function fe_affine_operator_get_translation(this) result(translation)
 implicit none
 class(fe_affine_operator_t), intent(in) :: this
 class(vector_t), pointer                :: translation
 call this%fe_affine_operator_setup()
 translation => this%assembler%get_array()
end function fe_affine_operator_get_translation

!subroutine fe_affine_operator_abort_if_not_in_domain ( this, vector )
! implicit none
! class(fe_affine_operator_t), intent(in)  :: this
! class(vector_t)            , intent(in)  :: vector
! assert ( .not. this%state == start )
! call operator_abort_if_not_in_domain(this,vector)
!end subroutine fe_affine_operator_abort_if_not_in_domain

!subroutine fe_affine_operator_abort_if_not_in_range ( this, vector )
! implicit none
! class(fe_affine_operator_t), intent(in) :: this
! class(vector_t)            , intent(in) :: vector
! assert ( .not. this%state == start )
! call operator_abort_if_not_in_range(this,vector)
!end subroutine fe_affine_operator_abort_if_not_in_range

!function fe_affine_operator_get_domain_vector_space ( this )
! implicit none
! class(fe_affine_operator_t), target, intent(in) :: this
! type(vector_space_t)               , pointer    :: fe_affine_operator_get_domain_vector_space
! assert ( .not. this%state == start )
! fe_affine_operator_get_domain_vector_space => operator_get_domain_vector_space(this)
!end function fe_affine_operator_get_domain_vector_space

!function fe_affine_operator_get_range_vector_space ( this )
! implicit none
! class(fe_affine_operator_t), target, intent(in) :: this
! type(vector_space_t)                  , pointer :: fe_affine_operator_get_range_vector_space
! assert ( .not. this%state == start )
! fe_affine_operator_get_range_vector_space => operator_get_range_vector_space(this)
!end function fe_affine_operator_get_range_vector_space

function fe_affine_operator_apply_fun(op,x) result(y)
 implicit none
 class(fe_affine_operator_t)   , intent(in)  :: op
 class(vector_t)     , intent(in)  :: x
 class(vector_t)     , allocatable :: y
 type(vector_space_t), pointer     :: range_vector_space
 range_vector_space => op%get_range_vector_space()
 call op%fe_affine_operator_setup()
 call range_vector_space%create_vector(y)
 call op%apply(x,y)
end function fe_affine_operator_apply_fun

subroutine fe_affine_operator_setup(this)
 implicit none
 class(fe_affine_operator_t)  :: this
  assert ( associated(this%state) ) 
  if(this%state==created_affine .or. this%state==symbolically_setup) call this%numerical_setup()
end subroutine fe_affine_operator_setup

subroutine fe_affine_operator_fill_values(this)
  implicit none
  class(fe_affine_operator_t), intent(inout) :: this
  class(environment_t), pointer :: environment
  environment => this%test_fe_space%get_environment()
  if ( environment%am_i_l1_task() ) then
    if ( associated(this%trial_fe_space) ) then
     call this%discrete_integration%integrate( this%test_fe_space, this%trial_fe_space, this%assembler )
    else
     call this%discrete_integration%integrate( this%test_fe_space, this%assembler )
    end if  
  end if  
end subroutine fe_affine_operator_fill_values 

