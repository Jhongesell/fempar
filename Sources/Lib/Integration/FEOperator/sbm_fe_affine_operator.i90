subroutine fe_affine_operator_compute_residual (this,y)
  implicit none
  class(fe_affine_operator_t), intent(inout) :: this
  class(vector_t) , intent(inout) :: y 
  class(matrix_t) , pointer       :: matrix
  class(array_t)  , pointer       :: array
  assert ( associated(this%current_evaluation_point) )
  call this%compute()
  matrix => this%assembler%get_matrix()
  call matrix%apply(this%current_evaluation_point,y)
  array => this%assembler%get_array()
  call y%axpby( -1.0_rp, array, 1.0_rp )
end subroutine fe_affine_operator_compute_residual

subroutine fe_affine_operator_compute (this)
  implicit none
  class(fe_affine_operator_t), intent(in) :: this
  class(environment_t), pointer :: environment
  
  assert ( associated(this%state) )
  
  if ( .not. ( this%state == assembler_computed ) ) then
    environment => this%test_fe_space%get_environment()
    if ( environment%am_i_l1_task() ) then
      if ( associated(this%trial_fe_space) ) then
         call this%discrete_integration%integrate( this%test_fe_space, this%trial_fe_space, this%assembler )
      else
         call this%discrete_integration%integrate( this%test_fe_space, this%assembler )
      end if
    end if
    call this%assembler%compress_storage(this%sparse_matrix_storage_format)
    this%state = assembler_computed
 end if
end subroutine fe_affine_operator_compute



subroutine fe_affine_operator_set_evaluation_point(this,x) 
  implicit none
  class(fe_affine_operator_t), intent(inout)    :: this
  class(vector_t) ,  target,      intent(in)    :: x
  this%current_evaluation_point => x
end subroutine fe_affine_operator_set_evaluation_point  
  
! Triggers the computation of the linear system matrix and 
! right hand side independently of the current state of this. 
! This is though to be called whenever something external to this, 
! but that affects to the entries of the coefficient matrix AND/OR
! right hand side, e.g., the level set function in a topology optimization 
! simulation.
subroutine fe_affine_operator_force_compute(this)
  implicit none
  class(fe_affine_operator_t), intent(inout)    :: this
  assert ( associated(this%state) )
  this%state = created
  call this%assembler%init_array(0.0_rp)  
  call this%assembler%init_matrix(0.0_rp)
  call this%compute()
end subroutine fe_affine_operator_force_compute


function fe_affine_operator_is_linear(this)
  implicit none
  class(fe_affine_operator_t), intent(in) :: this
  logical :: fe_affine_operator_is_linear
  fe_affine_operator_is_linear = .true.
end function fe_affine_operator_is_linear

