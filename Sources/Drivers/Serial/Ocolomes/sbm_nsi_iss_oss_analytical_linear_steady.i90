! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!====================================================================================================
subroutine linear_steady_velocity_get_value_space_time(this,point,time,result)
  implicit none
  class(linear_steady_velocity_function_t), intent(in)    :: this
  type(point_t)                           , intent(in)    :: point
  real(rp)                                , intent(in)    :: time
  type(vector_field_t)                    , intent(inout) :: result

  call result%init(0.0_rp)
  call result%set(1,point%get(1))
  call result%set(2,-1.0_rp*point%get(2))

end subroutine linear_steady_velocity_get_value_space_time

!====================================================================================================
subroutine linear_steady_dt_velocity_get_value_space_time(this,point,time,result)
  implicit none
  class(linear_steady_dt_velocity_function_t), intent(in)    :: this
  type(point_t)                              , intent(in)    :: point
  real(rp)                                   , intent(in)    :: time
  type(vector_field_t)                       , intent(inout) :: result

  call result%init(0.0_rp)

end subroutine linear_steady_dt_velocity_get_value_space_time

!====================================================================================================
subroutine linear_steady_velocity_gradient_get_value_space_time(this,point,time,result)
  implicit none
  class(linear_steady_velocity_gradient_function_t), intent(in)    :: this
  type(point_t)                                    , intent(in)    :: point
  real(rp)                                         , intent(in)    :: time
  type(tensor_field_t)                             , intent(inout) :: result

  call result%init(0.0_rp)
  call result%set(1,1,1.0_rp)
  call result%set(2,2,-1.0_rp)

end subroutine linear_steady_velocity_gradient_get_value_space_time

!====================================================================================================
subroutine linear_steady_velocity_grad_div_get_value_space_time(this,point,time,result)
  implicit none
  class(linear_steady_velocity_grad_div_function_t), intent(in)    :: this
  type(point_t)                                    , intent(in)    :: point
  real(rp)                                         , intent(in)    :: time
  type(vector_field_t)                             , intent(inout) :: result

  call result%init(0.0_rp)

end subroutine linear_steady_velocity_grad_div_get_value_space_time

!====================================================================================================
subroutine linear_steady_pressure_get_value_space_time(this,point,time,result)
  implicit none
  class(linear_steady_pressure_function_t), intent(in)    :: this
  type(point_t)                           , intent(in)    :: point
  real(rp)                                , intent(in)    :: time
  real(rp)                                , intent(inout) :: result

  result = 0.0_rp
  result = point%get(1) + point%get(2)

end subroutine linear_steady_pressure_get_value_space_time

!====================================================================================================
subroutine linear_steady_pressure_gradient_get_value_space_time(this,point,time,result)
  implicit none
  class(linear_steady_pressure_gradient_function_t), intent(in)    :: this
  type(point_t)                                    , intent(in)    :: point
  real(rp)                                         , intent(in)    :: time
  type(vector_field_t)                             , intent(inout) :: result

  call result%init(0.0_rp)
  call result%set(1,1.0_rp)
  call result%set(2,1.0_rp)

end subroutine linear_steady_pressure_gradient_get_value_space_time
