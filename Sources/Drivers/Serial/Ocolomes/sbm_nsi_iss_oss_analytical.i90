! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!====================================================================================================
subroutine nsi_iss_oss_analytical_functions_create(this,params)
  implicit none
  class(nsi_iss_oss_analytical_functions_t), intent(inout) :: this
  type(test_nsi_iss_oss_params_t)          , intent(in)    :: params

  call this%free()

  ! Getters
  this%function_name = params%get_analytical_function_name()

  select case(trim(this%function_name))
  case(nsi_linear_steady)
     allocate(linear_steady_velocity_function_t          :: this%velocity)
     allocate(linear_steady_dt_velocity_function_t       :: this%dt_velocity)
     allocate(linear_steady_velocity_gradient_function_t :: this%velocity_gradient)
     allocate(linear_steady_velocity_grad_div_function_t :: this%velocity_grad_div)
     allocate(linear_steady_pressure_gradient_function_t :: this%pressure_gradient)
     allocate(linear_steady_pressure_function_t          :: this%pressure)
  case default
     check(.false.)
  end select

end subroutine nsi_iss_oss_analytical_functions_create

!====================================================================================================
subroutine nsi_iss_oss_analytical_functions_free(this)
  implicit none
  class(nsi_iss_oss_analytical_functions_t), intent(inout) :: this

  if(allocated(this%velocity)) deallocate(this%velocity)  
  if(allocated(this%dt_velocity)) deallocate(this%dt_velocity)    
  if(allocated(this%velocity_gradient)) deallocate(this%velocity_gradient)
  if(allocated(this%velocity_grad_div)) deallocate(this%velocity_grad_div)
  if(allocated(this%pressure_gradient)) deallocate(this%pressure_gradient)
  if(allocated(this%pressure)) deallocate(this%pressure)      
  if(allocated(this%function_name)) deallocate(this%function_name)    

end subroutine nsi_iss_oss_analytical_functions_free

!====================================================================================================
function nsi_iss_oss_analytical_functions_get_velocity_function(this) result(velocity_function)
  implicit none
  class(nsi_iss_oss_analytical_functions_t), target, intent(in) :: this
  class(vector_function_t), pointer :: velocity_function

  velocity_function => this%velocity
  
end function nsi_iss_oss_analytical_functions_get_velocity_function

!====================================================================================================
function nsi_iss_oss_analytical_functions_get_pressure_function(this) result(pressure_function)
  implicit none
  class(nsi_iss_oss_analytical_functions_t), target, intent(in) :: this
  class(scalar_function_t), pointer :: pressure_function

  pressure_function => this%pressure
  
end function nsi_iss_oss_analytical_functions_get_pressure_function

!====================================================================================================
subroutine nsi_iss_oss_analytical_functions_get_value_velocity(this,point,time,field)
  implicit none
  class(nsi_iss_oss_analytical_functions_t), intent(in)    :: this
  type(point_t)                            , intent(in)    :: point
  real(rp)                                 , intent(in)    :: time
  type(vector_field_t)                     , intent(inout) :: field

  call this%velocity%get_value_space_time(point,time,field)
  
end subroutine nsi_iss_oss_analytical_functions_get_value_velocity

!====================================================================================================
subroutine nsi_iss_oss_analytical_functions_get_value_dt_velocity(this,point,time,field)
  implicit none
  class(nsi_iss_oss_analytical_functions_t), intent(in)    :: this
  type(point_t)                            , intent(in)    :: point
  real(rp)                                 , intent(in)    :: time
  type(vector_field_t)                     , intent(inout) :: field

  call this%dt_velocity%get_value_space_time(point,time,field)
  
end subroutine nsi_iss_oss_analytical_functions_get_value_dt_velocity


!====================================================================================================
subroutine nsi_iss_oss_analytical_functions_get_value_velocity_gradient(this,point,time,field)
  implicit none
  class(nsi_iss_oss_analytical_functions_t), intent(in)    :: this
  type(point_t)                            , intent(in)    :: point
  real(rp)                                 , intent(in)    :: time
  type(tensor_field_t)                     , intent(inout) :: field

  call this%velocity_gradient%get_value_space_time(point,time,field)
  
end subroutine nsi_iss_oss_analytical_functions_get_value_velocity_gradient

!====================================================================================================
subroutine nsi_iss_oss_analytical_functions_get_value_velocity_grad_div(this,point,time,field)
  implicit none
  class(nsi_iss_oss_analytical_functions_t), intent(in)    :: this
  type(point_t)                            , intent(in)    :: point
  real(rp)                                 , intent(in)    :: time
  type(vector_field_t)                     , intent(inout) :: field

  call this%velocity_grad_div%get_value_space_time(point,time,field)
  
end subroutine nsi_iss_oss_analytical_functions_get_value_velocity_grad_div

!====================================================================================================
subroutine nsi_iss_oss_analytical_functions_get_value_pressure_gradient(this,point,time,field)
  implicit none
  class(nsi_iss_oss_analytical_functions_t), intent(in) :: this
  type(point_t)                            , intent(in)    :: point
  real(rp)                                 , intent(in)    :: time
  type(vector_field_t)                     , intent(inout) :: field

  call this%pressure_gradient%get_value_space_time(point,time,field)
  
end subroutine nsi_iss_oss_analytical_functions_get_value_pressure_gradient

!====================================================================================================
subroutine nsi_iss_oss_analytical_functions_get_value_pressure(this,point,time,field)
  implicit none
  class(nsi_iss_oss_analytical_functions_t), intent(in)    :: this
  type(point_t)                            , intent(in)    :: point
  real(rp)                                 , intent(in)    :: time
  real(rp)                                 , intent(inout) :: field

  call this%pressure%get_value_space_time(point,time,field)
  
end subroutine nsi_iss_oss_analytical_functions_get_value_pressure
