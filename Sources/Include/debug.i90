! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!
! Tests to be performed in debug mode


#ifdef DEBUG 
#define assert(test) \
   if (.not.(test)) then ; \
      write(0,'(a,a,a,i10)') "Assertion failed in file ", __FILE__,", at line number", __LINE__  ; \
      call runend ; \
   endif 
#define massert(test,message) \
   if (.not.(test)) then ; \
      write(0,'(a,a,a,i10)') "Assertion failed in file ", __FILE__,", at line number", __LINE__  ; \
      write(0,'(a,a)') "Cause: ", message; \
      call runend ; \
   endif    
#define wassert(test,message) \
   if (.not.(test)) then ; \
      write(0,'(a,a,a,i10)') "Warning: Assertion failed in file ", __FILE__,", at line number", __LINE__  ; \
      write(0,'(a,a)') "Cause: ", message; \
   endif    
#else
#define assert(test) 
#define massert(test,message)
#define wassert(test,message)
#endif
!
! Tests to be performed always (basic error control).
# define check(test) \
   if (.not.(test)) then ; \
      write(0,'(a,a,a,i10)') "Check failed in file ", __FILE__,", at line number", __LINE__  ; \
      call runend ; \
   endif 
#define mcheck(test,message) \
   if (.not.(test)) then ; \
      write(0,'(a,a,a,i10)') "Check failed in file ", __FILE__,", at line number", __LINE__  ; \
      write(0,'(a,a)') "Cause: ", message; \
      call runend ; \
   endif     
#define wcheck(test,message) \
   if (.not.(test)) then ; \
      write(0,'(a,a,a,i10)') "Warning: Check failed in file ", __FILE__,", at line number", __LINE__  ; \
      write(0,'(a,a)') "Cause: ", message; \
   endif    
!
! Output debug information using a macro?
!#ifdef VERBOSE0
# define out0(write_statement) write_statement
!#else
!# define out0(write_statement)
!#endif
   
