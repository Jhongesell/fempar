subroutine irreducible_heterogeneous_discrete_integration_integrate ( this, fe_space, assembler )
  implicit none
  class(irreducible_heterogeneous_discrete_integration_t), intent(in)    :: this
  class(serial_fe_space_t)                 , intent(inout) :: fe_space
  class(assembler_t)          , intent(inout) :: assembler

  ! FE space traversal-related data types
  class(fe_cell_iterator_t), allocatable :: fe

  ! FE integration-related data types
  type(quadrature_t)       , pointer :: quad
  type(point_t)            , pointer :: quad_coords(:)
  type(tensor_field_t), allocatable  :: shape_gradients(:,:)
  type(vector_field_t), allocatable  :: shape_values(:,:)

  ! Workspace (FE matrix and vector, assembly data), it could be allocated in the creation
  real(rp)   , allocatable :: elmat(:,:), elvec(:)
  integer(ip), allocatable :: num_dofs_per_field(:)  

  integer(ip)  :: istat
  integer(ip)  :: qpoint, num_quad_points
  integer(ip)  :: idof, jdof, num_dofs

  ! Problem variables
  type(vector_field_t) :: source_term_value
  type(tensor_field_t) :: sigma, epsi, Id
  real(rp)     :: dV, Ev, nu,lambda_heterogeneous, mu_heterogeneous


  assert (associated(this%source_term)) 

  call Id%init(0.0)
  call Id%set(1,1,1.0)
  call Id%set(2,2,1.0)
  call Id%set(3,3,1.0)  

  call fe_space%create_fe_cell_iterator(fe)

  num_dofs = fe%get_num_dofs()
  call memalloc ( num_dofs, num_dofs, elmat, __FILE__, __LINE__ )
  call memalloc ( num_dofs, elvec, __FILE__, __LINE__ )
  call memalloc ( this%number_fields, num_dofs_per_field, __FILE__, __LINE__ )
  num_dofs_per_field(1) = fe%get_num_dofs_field(1)

  quad            => fe%get_quadrature()
  num_quad_points = quad%get_num_quadrature_points()

  do while ( .not. fe%has_finished())

     if ( fe%is_local() ) then
        ! Update FE-integration related data structures
        call fe%update_integration()

        ! Get quadrature coordinates to evaluate source_term
        quad_coords => fe%get_quadrature_points_coordinates()

        ! Get subset_id
        if ( fe%get_set_id() <= 1 ) then
           Ev = 1.0_rp
        else 
           Ev = this%elastic_modulus
        end if
        nu = nu_heterogeneous    
        lambda_heterogeneous = (nu*Ev)/((1+nu)*(1-2*nu))
        mu_heterogeneous     = Ev/(2*(1+nu))

        ! Compute element matrix and vector
        elmat = 0.0_rp
        elvec = 0.0_rp
        call fe%get_gradients(shape_gradients)
        call fe%get_values(shape_values)

        ! Compute element stiffness matrix
        do qpoint = 1, num_quad_points
           dV = fe%get_det_jacobian(qpoint) * quad%get_weight(qpoint)
           
           ! Source term
           call this%source_term%get_value_space(quad_coords(qpoint),source_term_value)
           
           ! Diffusive term
           do idof = 1, num_dofs
              do jdof = 1, num_dofs
                 epsi  = symmetric_part(shape_gradients(jdof,qpoint))
                 sigma = lambda_heterogeneous*trace(epsi)*Id + 2*mu_heterogeneous*epsi
                 elmat(idof,jdof) = elmat(idof,jdof) + this%residual_coefficient * dV * double_contract(shape_gradients(idof,qpoint),sigma)
              end do
              elvec(idof) = elvec(idof) + this%residual_coefficient * dV * source_term_value * shape_values(idof,qpoint)
           end do
        end do
        call fe%assembly( this%fe_function, elmat, elvec, assembler )
     end if
     call fe%next()
  end do

  call fe_space%free_fe_cell_iterator(fe)
  deallocate (shape_values, stat=istat); check(istat==0);
  deallocate (shape_gradients, stat=istat); check(istat==0);
  call memfree ( num_dofs_per_field, __FILE__, __LINE__ )
  call memfree ( elmat, __FILE__, __LINE__ )
  call memfree ( elvec, __FILE__, __LINE__ )
end subroutine irreducible_heterogeneous_discrete_integration_integrate
