#!/bin/sh
export MKL_NUM_THREADS=1
export OMP_NUM_THREADS=1
MPIEXEC_PATH="$1"
MPIEXEC_NP_FLAG="$2"
MPIEXEC_PREFLAGS="$3"
TEST_BINARY_PATH="$4"
TEST_INPUT_DATA_PATH="$5"
final_exit_code=0
DIR=$(dirname "$TEST_BINARY_PATH")
echo "$DIR"

if [ -d "$DIR" ]
then
if [ -f "$TEST_BINARY_PATH" ]
then
  if [ -d "$TEST_INPUT_DATA_PATH" ] 
  then
     #Analytical known function test with unit constant coefficients - test 1

    for order in 1 2; do 
     source $TEST_INPUT_DATA_PATH/test1_params.sh 
     echo "$MPIEXEC_PATH $MPIEXEC_NP_FLAG 9 $MPIEXEC_PREFLAGS $TEST_BINARY_PATH -tt 1 -dm 3 -n 8 8 8 -np 2 2 2 1 1 1 -l 2 -order $order -wsolution .false. -edge_cont tangential_average_and_first_order_moment -materials_case homogeneous -bddc_weights cardinality -bmass_trick .false. -coefficient_case unit_constant" 
$MPIEXEC_PATH $MPIEXEC_NP_FLAG 9 $MPIEXEC_PREFLAGS $TEST_BINARY_PATH -tt 1 -dm 3 -n 8 8 8 -np 2 2 2 1 1 1 -l 2 -order $order -wsolution .false. -edge_cont tangential_average_and_first_order_moment -materials_case homogeneous -bddc_weights cardinality -bmass_trick .false. -coefficient_case unit_constant
    done 

     #test 2
     echo " $MPIEXEC_PATH $MPIEXEC_NP_FLAG 9 $MPIEXEC_PREFLAGS $TEST_BINARY_PATH -tt 1 -dm 3 -n 8 8 8 -np 2 2 2 1 1 1 -l 2 -order 1 -wsolution .false. -edge_cont tangential_average_and_first_order_moment -mass_coeff_white 1.0 -curl_curl_coeff_white 1e2 -mass_coeff_black 1e-2 -curl_curl_coeff_black 1e4 -materials_case checkerboard -bddc_weights curl_curl_coeff -bmass_trick .true. -coefficient_case constant | tee tmp_output"
     $MPIEXEC_PATH $MPIEXEC_NP_FLAG 9 $MPIEXEC_PREFLAGS $TEST_BINARY_PATH -tt 1 -dm 3 -n 8 8 8 -np 2 2 2 1 1 1 -l 2 -order 1 -wsolution .false. -edge_cont tangential_average_and_first_order_moment -mass_coeff_white 1.0 -curl_curl_coeff_white 1e2 -mass_coeff_black 1e-2 -curl_curl_coeff_black 1e4 -materials_case checkerboard -bddc_weights curl_curl_coeff -bmass_trick .true. -coefficient_case constant | tee tmp_output


     # Check Number of iterations
     exit_code1=0
     n1=$(grep "CG converged to " tmp_output |sed s/" "" "*/"#"/g|cut -f6 -d#)
     n2=$(grep "CG converged to " $TEST_INPUT_DATA_PATH/test2_convergence_fast |sed s/" "" "*/"#"/g|cut -f6 -d#)
     if [ $n1 != $n2 ]; then
       exit_code1=1
     fi
     echo $exit_code1
     # Check Last iteration error
     exit_code2=0
     E1=$(grep "Last iteration error estimate:" tmp_output |sed s/" "" "*/"#"/g|cut -f5 -d#)
     E2=$(grep "Last iteration error estimate:" $TEST_INPUT_DATA_PATH/test2_convergence_fast |sed s/" "" "*/"#"/g|cut -f5 -d#)
     e1=`printf "%f" $E1`
     e2=`printf "%f" $E2`
     error=$(echo "$e1-$e2"|bc -l)
     if [ $(echo "$error>0.000000001"|bc -l) -eq 1 ]; then
        exit_code2=1
     fi
     if [ $(echo "$error<-0.000000001"|bc -l) -eq 1 ]; then
        exit_code2=1
     fi
     echo $exit_code2
     if [ $exit_code1 -eq 1 ]; then
        if [ $exit_code2 -eq 1 ]; then
           final_exit_code=1
	fi
     fi
     rm -f tmp_output 

     #test 3 
     echo "$MPIEXEC_PATH $MPIEXEC_NP_FLAG 9 $MPIEXEC_PREFLAGS $TEST_BINARY_PATH -tt 1 -dm 3 -n 12 12 12 -np 2 2 2 1 1 1 -l 2 -order 1 -wsolution .false. -edge_cont tangential_average_and_first_order_moment -materials_case heterogeneous -bddc_weights weighted_coefficients -bmass_trick .false. -rpb_bddc_threshold 1e3 -coefficient_case sinusoidal -mass_coeff_white 3 -curl_curl_coeff_white 3 -num_peaks_curl_curl_coeff 2 -num_peaks_mass_coeff 2 | tee tmp_output" 
     $MPIEXEC_PATH $MPIEXEC_NP_FLAG 9 $MPIEXEC_PREFLAGS $TEST_BINARY_PATH -tt 1 -dm 3 -n 12 12 12 -np 2 2 2 1 1 1 -l 2 -order 1 -wsolution .false. -edge_cont tangential_average_and_first_order_moment -materials_case heterogeneous -bddc_weights weighted_coefficients -bmass_trick .false. -rpb_bddc_threshold 1e3 -coefficient_case sinusoidal -mass_coeff_white 3 -curl_curl_coeff_white 3 -num_peaks_curl_curl_coeff 2 -num_peaks_mass_coeff 2  | tee tmp_output


     # Check Number of iterations
     exit_code1=0
     n1=$(grep "CG converged to " tmp_output |sed s/" "" "*/"#"/g|cut -f6 -d#)
     n2=$(grep "CG converged to " $TEST_INPUT_DATA_PATH/test3_convergence_fast |sed s/" "" "*/"#"/g|cut -f6 -d#)
     if [ $n1 != $n2 ]; then
       exit_code1=1
     fi
     echo $exit_code1
     # Check Last iteration error
     exit_code2=0
     E1=$(grep "Last iteration error estimate:" tmp_output |sed s/" "" "*/"#"/g|cut -f5 -d#)
     E2=$(grep "Last iteration error estimate:" $TEST_INPUT_DATA_PATH/test3_convergence_fast |sed s/" "" "*/"#"/g|cut -f5 -d#)
     e1=`printf "%f" $E1`
     e2=`printf "%f" $E2`
     error=$(echo "$e1-$e2"|bc -l)
     if [ $(echo "$error>0.000000001"|bc -l) -eq 1 ]; then
        exit_code2=1
     fi
     if [ $(echo "$error<-0.000000001"|bc -l) -eq 1 ]; then
        exit_code2=1
     fi
     echo $exit_code2
     if [ $exit_code1 -eq 1 ]; then
        if [ $exit_code2 -eq 1 ]; then
           final_exit_code=1
	fi
     fi
     rm -f tmp_output 

   else
      echo "$0: input data directory not found!"
      final_exit_code=1
   fi
else
  echo "$0: BINARY not found! Value PROVIDED: $4."
  final_exit_code=1
fi
else
  echo "$0: PART not found! Value PROVIDED: $DIR/part."
  final_exit_code=1
fi
rm -Rf $TEST_COMBINATIONS_FILE_NAME
exit $final_exit_code 