#!/bin/sh
TEST_BINARY_PATH="$1"
TEST_INPUT_DATA_PATH="$2"
final_exit_code=0
if [ -f "$TEST_BINARY_PATH" ]
then
 if [ -d "$TEST_INPUT_DATA_PATH" ] 
   then
      ###############################################################################################################################
      # Scalar-valued tests
      ###############################################################################################################################

      # Square + Quads        
      for gorder in 1 2 5
      do
       for order in 1 2 5
        do
          if [ $order -ge $gorder ]
          then
            echo "$TEST_BINARY_PATH --dir-path $TEST_INPUT_DATA_PATH/square_quads.gid --prefix square_quads -order $order -gorder $gorder"
            $TEST_BINARY_PATH --dir-path $TEST_INPUT_DATA_PATH/square_quads.gid --prefix square_quads -order $order -gorder $gorder 
            if [ $? -ne 0 ] 
            then
             final_exit_code=1
            fi
          fi
        done
      done

      # Square + Quads + dG 
      for gorder in 1 2 5
      do
       for order in 1 2 5
        do
          if [ $order -ge $gorder ]
          then
            echo "$TEST_BINARY_PATH --dir-path $TEST_INPUT_DATA_PATH/square_quads.gid --prefix square_quads -order $order -gorder $gorder -f dG"
            $TEST_BINARY_PATH --dir-path $TEST_INPUT_DATA_PATH/square_quads.gid --prefix square_quads -order $order -gorder $gorder -f dG
            if [ $? -ne 0 ]
            then
             final_exit_code=1
            fi
          fi
        done
      done

      # Square + Quads + Hybrid Void/Full FEs (half pattern)
      for gorder in 1
      do
       for order in 1 2 5
        do
          if [ $order -ge $gorder ]
          then
            echo "$TEST_BINARY_PATH -tt structured -nx 10 -ny 10 -order $order -gorder $gorder -use-voids T -use-voids-case half"
            $TEST_BINARY_PATH -tt structured -nx 10 -ny 10 -order $order -gorder $gorder -use-voids T -use-voids-case half 
            if [ $? -ne 0 ] 
            then
             final_exit_code=1
            fi
          fi
        done
      done

      # Square + Quads + Hybrid Void/Full FEs (quarter pattern)
      for gorder in 1
      do
       for order in 1 2 5
        do
          if [ $order -ge $gorder ]
          then
            echo "$TEST_BINARY_PATH -tt structured -nx 10 -ny 10 -order $order -gorder $gorder -use-voids T -use-voids-case quarter"
            $TEST_BINARY_PATH -tt structured -nx 10 -ny 10 -order $order -gorder $gorder -use-voids T -use-voids-case quarter 
            if [ $? -ne 0 ] 
            then
             final_exit_code=1
            fi
          fi
        done
      done


      # Circle + Quads        
      for gorder in 1 2 5
      do
       for order in 1 2 5
        do
          if [ $order -ge $gorder ]
          then
            echo "$TEST_BINARY_PATH --dir-path $TEST_INPUT_DATA_PATH/circle.gid --prefix circle -order $order -gorder $gorder"
            $TEST_BINARY_PATH --dir-path $TEST_INPUT_DATA_PATH/circle.gid --prefix circle -order $order -gorder $gorder
            if [ $? -ne 0 ]
            then
             final_exit_code=1
            fi
          fi
        done
      done

      # Square +  Tetrahedra       
      # for gorder in 1 #2 3 4 5 6
      # do
      #  for order in 1 2 3 #4 5 6
      #   do
      #     if [ $order -ge $gorder ]
      #     then
      #       echo "$TEST_BINARY_PATH --dir-path $TEST_INPUT_DATA_PATH/square_tetrahedra.gid --prefix square_tetrahedra -order $order -gorder $gorder"
      #       $TEST_BINARY_PATH --dir-path $TEST_INPUT_DATA_PATH/square_tetrahedra.gid --prefix square_tetrahedra -order $order -gorder $gorder
      #       if [ $? -ne 0 ]
      #       then
      #        final_exit_code=1
      #       fi
      #     fi
      #   done
      # done

      # Cube + Hexas       
      for gorder in 1 #2 3 4 5 6
      do
       for order in 1 2 3 #4 5 6
        do
          if [ $order -ge $gorder ]
          then
            echo "$TEST_BINARY_PATH --dir-path $TEST_INPUT_DATA_PATH/cube_hexas.gid/ --prefix cube_hexas -order $order -gorder $gorder"
            $TEST_BINARY_PATH --dir-path $TEST_INPUT_DATA_PATH/cube_hexas.gid/ --prefix cube_hexas -order $order -gorder $gorder
            if [ $? -ne 0 ]
            then
             final_exit_code=1
            fi
          fi
        done
      done

      # Cube + Hexas + dG  
      for gorder in 1 #2 3 4 5 6
      do
       for order in 1 2 3 #4 5 6
        do
          if [ $order -ge $gorder ]
          then
            echo "$TEST_BINARY_PATH --dir-path $TEST_INPUT_DATA_PATH/cube_hexas.gid/ --prefix cube_hexas -order $order -gorder $gorder -f dG"
            $TEST_BINARY_PATH --dir-path $TEST_INPUT_DATA_PATH/cube_hexas.gid/ --prefix cube_hexas -order $order -gorder $gorder -f dG
            if [ $? -ne 0 ]
            then
             final_exit_code=1
            fi
          fi
        done
      done

      # Cube + Hexas + Hybrid Void/Full FEs (popcorn pattern)
      for gorder in 1
      do
       for order in 1 2 #5
        do
          if [ $order -ge $gorder ]
          then
            echo "$TEST_BINARY_PATH -tt structured -dim 3 -nx 18 -ny 18 -nz 18 -order $order -gorder $gorder -use-voids T -use-voids-case popcorn"
            $TEST_BINARY_PATH -tt structured -dim 3 -nx 18 -ny 18 -nz 18 -order $order -gorder $gorder -use-voids T -use-voids-case popcorn 
            if [ $? -ne 0 ] 
            then
             final_exit_code=1
            fi
          fi
        done
      done

      # Cube + Tetrahedra
      # for gorder in 1 #2 3 4 5 6
      # do
      #  for order in 1 2 #3 4 5 6
      #   do
      #     if [ $order -ge $gorder ]
      #     then
      #       echo "$TEST_BINARY_PATH --dir-path $TEST_INPUT_DATA_PATH/cube_tetrahedra.gid/ --prefix cube_tetrahedra -order $order -gorder $gorder"
      #       $TEST_BINARY_PATH  --dir-path $TEST_INPUT_DATA_PATH/cube_tetrahedra.gid/ --prefix cube_tetrahedra -order $order -gorder $gorder
      #       if [ $? -ne 0 ]
      #       then
      #        final_exit_code=1
      #       fi
      #     fi
      #   done
      # done


      ###############################################################################################################################
      # Vector-valued tests
      ###############################################################################################################################

      # Square + Quads        

      for gorder in 1 2 5
      do
       for order in 1 2 5
        do
          if [ $order -ge $gorder ]
          then
            echo "$TEST_BINARY_PATH --dir-path $TEST_INPUT_DATA_PATH/square_quads.gid --prefix square_quads -order $order -gorder $gorder -lt vector"
            $TEST_BINARY_PATH --dir-path $TEST_INPUT_DATA_PATH/square_quads.gid --prefix square_quads -order $order -gorder $gorder  -lt vector
            if [ $? -ne 0 ] 
            then
             final_exit_code=1
            fi
          fi
        done
      done

      # Square + Quads + Hybrid Void/Full FEs (half pattern)
      for gorder in 1
      do
       for order in 1 2 5
        do
          if [ $order -ge $gorder ]
          then
            echo "$TEST_BINARY_PATH -tt structured -nx 10 -ny 10 -order $order -gorder $gorder -use-voids T -use-voids-case half -lt vector"
            $TEST_BINARY_PATH -tt structured -nx 10 -ny 10 -order $order -gorder $gorder -use-voids T -use-voids-case half -lt vector
            if [ $? -ne 0 ] 
            then
             final_exit_code=1
            fi
          fi
        done
      done

      # Square + Quads + Hybrid Void/Full FEs (quarter pattern)
      for gorder in 1
      do
       for order in 1 2 5
        do
          if [ $order -ge $gorder ]
          then
            echo "$TEST_BINARY_PATH -tt structured -nx 10 -ny 10 -order $order -gorder $gorder -use-voids T -use-voids-case quarter -lt vector"
            $TEST_BINARY_PATH -tt structured -nx 10 -ny 10 -order $order -gorder $gorder -use-voids T -use-voids-case quarter -lt vector
            if [ $? -ne 0 ] 
            then
             final_exit_code=1
            fi
          fi
        done
      done


      # Circle + Quads        
      for gorder in 1 2 5
      do
       for order in 1 2 5
        do
          if [ $order -ge $gorder ]
          then
            echo "$TEST_BINARY_PATH --dir-path $TEST_INPUT_DATA_PATH/circle.gid --prefix circle -order $order -gorder $gorder  -lt vector"
            $TEST_BINARY_PATH --dir-path $TEST_INPUT_DATA_PATH/circle.gid --prefix circle -order $order -gorder $gorder  -lt vector
            if [ $? -ne 0 ]
            then
             final_exit_code=1
            fi
          fi
        done
      done

      # Square +  Tetrahedra       
      # for gorder in 1 #2 3 4 5 6
      # do
      #  for order in 1 2 3 #4 5 6
      #   do
      #     if [ $order -ge $gorder ]
      #     then
      #       echo "$TEST_BINARY_PATH --dir-path $TEST_INPUT_DATA_PATH/square_tetrahedra.gid --prefix square_tetrahedra -order $order -gorder $gorder  -lt vector"
      #       $TEST_BINARY_PATH --dir-path $TEST_INPUT_DATA_PATH/square_tetrahedra.gid --prefix square_tetrahedra -order $order -gorder $gorder  -lt vector
      #       if [ $? -ne 0 ]
      #       then
      #        final_exit_code=1
      #       fi
      #     fi
      #   done
      # done

      # Cube + Hexas       
      for gorder in 1 #2 3 4 5 6
      do
       for order in 1 2 3 #4 5 6
        do
          if [ $order -ge $gorder ]
          then
            echo "$TEST_BINARY_PATH --dir-path $TEST_INPUT_DATA_PATH/cube_hexas.gid/ --prefix cube_hexas -order $order -gorder $gorder  -lt vector"
            $TEST_BINARY_PATH --dir-path $TEST_INPUT_DATA_PATH/cube_hexas.gid/ --prefix cube_hexas -order $order -gorder $gorder  -lt vector
            if [ $? -ne 0 ]
            then
             final_exit_code=1
            fi
          fi
        done
      done

      # Cube + Hexas + Hybrid Void/Full FEs (popcorn pattern)
      for gorder in 1
      do
       for order in 1 #2 5
        do
          if [ $order -ge $gorder ]
          then
            echo "$TEST_BINARY_PATH -tt structured -dim 3 -nx 18 -ny 18 -nz 18 -order $order -gorder $gorder -use-voids T -use-voids-case popcorn -lt vector"
            $TEST_BINARY_PATH -tt structured -dim 3 -nx 18 -ny 18 -nz 18 -order $order -gorder $gorder -use-voids T -use-voids-case popcorn -lt vector 
            if [ $? -ne 0 ] 
            then
             final_exit_code=1
            fi
          fi
        done
      done

      # Cube + Tetrahedra
      # for gorder in 1 #2 3 4 5 6
      # do
      #  for order in 1 2 #3 4 5 6
      #   do
      #     if [ $order -ge $gorder ]
      #     then
      #       echo "$TEST_BINARY_PATH --dir-path $TEST_INPUT_DATA_PATH/cube_tetrahedra.gid/ --prefix cube_tetrahedra -order $order -gorder $gorder  -lt vector"
      #       $TEST_BINARY_PATH  --dir-path $TEST_INPUT_DATA_PATH/cube_tetrahedra.gid/ --prefix cube_tetrahedra -order $order -gorder $gorder  -lt vector
      #       if [ $? -ne 0 ]
      #       then
      #        final_exit_code=1
      #       fi
      #     fi
      #   done
      # done


   else
      echo "$0: input data directory not found!"
      final_exit_code=1
   fi
else
  echo "$0: BINARY not found! Value PROVIDED: $1."
  final_exit_code=1
fi
rm -Rf $TEST_INPUT_FILE
exit $final_exit_code
