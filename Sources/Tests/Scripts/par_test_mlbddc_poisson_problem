#!/bin/sh
TEST_COMBINATIONS_FILE_NAME=$(($(dd if=/dev/urandom count=1 2> /dev/null | cksum | cut -d' ' -f1) % 32768))
echo ".true.             .true.    positive_definite            galerkin    corners_rest_part_solve_expl_schur       phit_minus_c_i_t_lambda           reuse_from_phis             .false." >  $TEST_COMBINATIONS_FILE_NAME
echo ".true.             .true.    positive_definite            galerkin    corners_rest_part_solve_expl_schur                  phit_a_i_phi           reuse_from_phis             .false." >> $TEST_COMBINATIONS_FILE_NAME
echo ".true.             .true.           indefinite            galerkin    corners_rest_part_solve_expl_schur       phit_minus_c_i_t_lambda           reuse_from_phis             .false." >> $TEST_COMBINATIONS_FILE_NAME
echo ".true.             .true.    positive_definite            galerkin      direct_solve_constrained_problem       phit_minus_c_i_t_lambda           reuse_from_phis             .false." >> $TEST_COMBINATIONS_FILE_NAME
echo ".true.             .true.           indefinite            galerkin      direct_solve_constrained_problem       phit_minus_c_i_t_lambda           reuse_from_phis             .false." >> $TEST_COMBINATIONS_FILE_NAME
echo ".true.             .true.    positive_definite     petrov_galerkin    corners_rest_part_solve_expl_schur       phit_minus_c_i_t_lambda           reuse_from_phis             .false." >> $TEST_COMBINATIONS_FILE_NAME
echo ".true.             .true.    positive_definite     petrov_galerkin    corners_rest_part_solve_expl_schur                  phit_a_i_phi           reuse_from_phis             .false." >> $TEST_COMBINATIONS_FILE_NAME
echo ".true.             .true.           indefinite     petrov_galerkin    corners_rest_part_solve_expl_schur       phit_minus_c_i_t_lambda           reuse_from_phis             .false." >> $TEST_COMBINATIONS_FILE_NAME
echo ".true.             .true.    positive_definite     petrov_galerkin      direct_solve_constrained_problem       phit_minus_c_i_t_lambda           reuse_from_phis             .false." >> $TEST_COMBINATIONS_FILE_NAME
echo ".true.             .true.           indefinite     petrov_galerkin      direct_solve_constrained_problem       phit_minus_c_i_t_lambda           reuse_from_phis             .false." >> $TEST_COMBINATIONS_FILE_NAME
echo ".false.           .false.              unknown            galerkin    corners_rest_part_solve_expl_schur       phit_minus_c_i_t_lambda           reuse_from_phis             .false." >> $TEST_COMBINATIONS_FILE_NAME
echo ".false.           .false.              unknown            galerkin    corners_rest_part_solve_expl_schur                  phit_a_i_phi           reuse_from_phis             .false." >> $TEST_COMBINATIONS_FILE_NAME
echo ".false.           .false.              unknown            galerkin      direct_solve_constrained_problem       phit_minus_c_i_t_lambda           reuse_from_phis             .false." >> $TEST_COMBINATIONS_FILE_NAME
echo ".false.           .false.              unknown     petrov_galerkin    corners_rest_part_solve_expl_schur       phit_minus_c_i_t_lambda           reuse_from_phis             .false." >> $TEST_COMBINATIONS_FILE_NAME
echo ".false.           .false.              unknown     petrov_galerkin    corners_rest_part_solve_expl_schur                  phit_a_i_phi           reuse_from_phis             .false." >> $TEST_COMBINATIONS_FILE_NAME
echo ".false.           .false.              unknown     petrov_galerkin      direct_solve_constrained_problem       phit_minus_c_i_t_lambda           reuse_from_phis             .false." >> $TEST_COMBINATIONS_FILE_NAME
echo ".false.            .true.    positive_definite            galerkin    corners_rest_part_solve_expl_schur       phit_minus_c_i_t_lambda           reuse_from_phis             .false." >> $TEST_COMBINATIONS_FILE_NAME
echo ".false.            .true.    positive_definite     petrov_galerkin    corners_rest_part_solve_expl_schur                  phit_a_i_phi           reuse_from_phis             .false." >> $TEST_COMBINATIONS_FILE_NAME

MPIEXEC_PATH="$1"
MPIEXEC_NP_FLAG="$2"
TEST_BINARY_PATH="$3"
TEST_INPUT_DATA_PATH="$4"
final_exit_code=0
if [ -f "$TEST_BINARY_PATH" ]
then
 if [ -d "$TEST_INPUT_DATA_PATH" ] 
   then
      num_combinations=$(cat $TEST_COMBINATIONS_FILE_NAME | grep -v ^# | wc -l)
      combination=1
     while [ $combination -le $num_combinations ]
      do
         line=$(cat $TEST_COMBINATIONS_FILE_NAME | grep -v ^# | head -n $combination | tail -n 1) 
         echo $line
         symmetric_storage=$(echo $line | awk '{print $1}') 
         is_symmetric=$(echo $line | awk '{print $2}')            
         sign=$(echo $line | awk '{print $3}')          
         projection=$(echo $line | awk '{print $4}')                      
         nn_sys_sol_strat=$(echo $line | awk '{print $5}')         
         subd_elmat_calc=$(echo $line | awk '{print $6}')       
         schur_edge_lag_mult=$(echo $line | awk '{print $7}')    
         pad_collectives=$(echo $line | awk '{print $8}')

         $MPIEXEC_PATH $MPIEXEC_NP_FLAG 5 $TEST_BINARY_PATH --dir-path $TEST_INPUT_DATA_PATH/ --prefix 'square' --ndime '3' --nparts '4'\
                                        --symmetric-storage $symmetric_storage --is-symmetric $is_symmetric\
                                        --sign $sign --projection $projection --nn-sys-sol-strat $nn_sys_sol_strat\
                                        --subd-elmat-calc $subd_elmat_calc --schur-edge-lag-mult $schur_edge_lag_mult\
                                        --pad-collectives $pad_collectives 

         if [ $? -ne 0 ] 
        then
           final_exit_code=1
         fi
         combination=$(expr $combination + 1)
      done
   else
      echo "$0: input data directory not found!"
      final_exit_code=1
   fi
else
  echo "$0: BINARY not found! Value PROVIDED: $3."
  final_exit_code=1
fi
rm -Rf $TEST_COMBINATIONS_FILE_NAME
exit $final_exit_code 
