  ! Templated implementation of a static element set and its iterator. 
  ! Templates are not natively supported by fortran.
  ! They are emulated using the preprocessor by including this file in a module 
  ! BEFORE the contains statement and after a definition of:
  !
  ! template_element_t
  ! static_template_element_set_t
  ! static_template_element_iterator_t
  !
  !=============================================================================
  type, extends(abstract_template_element_set_t) :: static_template_element_set_t
     private
     integer(ip)                            :: num_elements= -1  ! Number of elements in the set
     type(template_element_t), allocatable :: elements(:)       ! array of template_elements
   contains
     procedure, non_overridable :: create                   => create_static_set
     procedure, non_overridable :: free                     => free_static_set
     procedure, non_overridable :: get                      => get_element_pointer 
     procedure, non_overridable :: get_class                => get_element_class_pointer
     procedure, non_overridable :: create_iterator          => create_static_iterator
     procedure, non_overridable :: free_iterator            => free_static_iterator
     procedure, non_overridable :: get_elements_array
  end type static_template_element_set_t

  ! This iterator permits to iterate on a subset of the elements from first to last.
  type, extends(abstract_template_element_iterator_t) :: static_template_element_iterator_t
     private
     integer(ip)                                 :: first=0
     integer(ip)                                 :: last =0
     integer(ip)                                 :: ielem=0
     type(static_template_element_set_t), pointer :: static_template_element_set
   contains
     procedure, non_overridable :: begin         => static_iterator_begin
     procedure, non_overridable :: finished      => static_iterator_finished
     procedure, non_overridable :: next          => static_iterator_next
     procedure, non_overridable :: current       => static_template_element_iterator_current
     procedure, non_overridable :: set_first     => static_iterator_set_first
     procedure, non_overridable :: set_last      => static_iterator_set_last
     procedure, non_overridable :: get_local_id  => static_iterator_get_local_id
#ifdef abstract_element_t
     procedure, non_overridable :: current_class => static_abstract_element_iterator_current
#endif
  end type static_template_element_iterator_t

