  ! Templated implementation of an abstract element set and its iterator. 
  ! Templates are not natively supported by fortran.
  ! They are emulated using the preprocessor by including this file after a definition of:
  !
  ! template_element_t
  ! abstract_template_element_set_t
  ! abstract_template_element_iterator_t
  !
  type, abstract :: abstract_template_element_iterator_t
     private
   contains
     procedure(begin_interface)    , deferred :: begin
     procedure(finished_interface) , deferred :: finished
     procedure(current_interface)  , deferred :: current
     procedure(next_interface)     , deferred :: next
     procedure(get_id_interface)   , deferred :: get_local_id
  end type abstract_template_element_iterator_t

  abstract interface
     ! Iteration over the set
     subroutine begin_interface(this) ! Position the pointer in the first item
       import :: abstract_template_element_iterator_t
       implicit none
       class(abstract_template_element_iterator_t), intent(inout) :: this
     end subroutine begin_interface
     function finished_interface(this) result(res)
       import :: abstract_template_element_iterator_t
       implicit none
       class(abstract_template_element_iterator_t), intent(inout) :: this
       logical :: res
     end function finished_interface
     subroutine next_interface(this)
       import :: abstract_template_element_iterator_t
       implicit none
       class(abstract_template_element_iterator_t), intent(inout) :: this
     end subroutine next_interface
     function current_interface (this) result(p)
       import :: abstract_template_element_iterator_t, template_element_t
       implicit none
       class(abstract_template_element_iterator_t), intent(inout)  :: this
       type(template_element_t)                   , pointer        :: p
     end function current_interface
     subroutine get_id_interface(this,id)
       import :: ip, abstract_template_element_iterator_t
       implicit none
       class(abstract_template_element_iterator_t), intent(in)  :: this
       integer(ip)                       , intent(out) :: id
     end subroutine get_id_interface
  end interface

  type, abstract :: abstract_template_element_set_t
   contains
     procedure(create_set_interface)            , deferred :: create
     procedure(free_set_interface)              , deferred :: free
     procedure(create_iterator_interface)       , deferred :: create_iterator
     procedure(free_iterator_interface)         , deferred :: free_iterator
     procedure(get_interface)                   , deferred :: get
     procedure(get_class_interface)             , deferred :: get_class
  end type abstract_template_element_set_t

  ! Abstract interfaces
  abstract interface
     subroutine create_set_interface(this,size)
       import :: abstract_template_element_set_t, ip
       implicit none
       class(abstract_template_element_set_t), intent(inout) :: this
       integer(ip)                  , intent(in)    :: size
     end subroutine create_set_interface
     subroutine free_set_interface(this)
       import :: abstract_template_element_set_t
       implicit none
       class(abstract_template_element_set_t), intent(inout) :: this
     end subroutine free_set_interface
     subroutine create_iterator_interface(this,iterator)
       import :: abstract_template_element_set_t, abstract_template_element_iterator_t
       implicit none
       class(abstract_template_element_set_t)     , target     , intent(in)  :: this
       class(abstract_template_element_iterator_t), allocatable, intent(out) :: iterator
     end subroutine create_iterator_interface
     subroutine free_iterator_interface(this,iterator)
       import :: abstract_template_element_set_t, abstract_template_element_iterator_t
       implicit none
       class(abstract_template_element_set_t)                  , intent(in)    :: this
       class(abstract_template_element_iterator_t), allocatable, intent(inout) :: iterator
     end subroutine free_iterator_interface
     function get_interface(this,id,stat) result(p)
       import :: abstract_template_element_set_t, ip, template_element_t
       class(abstract_template_element_set_t),target   , intent(in)  :: this
       integer(ip)                            , intent(in)  :: id
       integer(ip)                  , optional, intent(out) :: stat     
       type(template_element_t)     , pointer  :: p
     end function get_interface
     function get_class_interface(this,id,stat) result(p)
       import :: abstract_template_element_set_t, ip, template_element_t
       class(abstract_template_element_set_t),target   , intent(in)  :: this
       integer(ip)                            , intent(in)  :: id
       integer(ip)                  , optional, intent(out) :: stat     
       class(template_element_t)    , pointer  :: p
     end function get_class_interface
  end interface
