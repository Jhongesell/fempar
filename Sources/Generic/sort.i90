! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!-----------------------------------------------------------------------
! the next routine is taken from fortran.com modified to handle an
! integer array data(n0,n) sort by the k-th element. it was used in
! previous versions of the code and is kept just in case is needed to
! check results. it was called only in mesh_partition.f90.
!
! created:  15 jul 1986  len moss
!
! here's a hybrid quicksort i wrote a number of years ago.  it's
! based on suggestions in knuth, volume 3, and performs much better
! than a pure quicksort on short or partially ordered input arrays.  
!
!-----------------------------------------------------------------------

subroutine name interface
  !===================================================================
  !
  !     sortix -- sort, integer input, index output
  !
  !
  !     input:  k     integer
  !             n0    integer
  !             n     integer
  !             data  integer
  !
  !     output: index integer (dimension n)
  !
  ! this routine performs an in-memory sort of the first n elements of
  ! array data, returning into array index the indices of elements of
  ! data arranged in ascending order.  thus,
  !
  !    data(:,index(1)) will be the smallest number in array data;
  !    data(:,index(n)) will be the largest number in data.
  !
  ! the original data is not physically rearranged.  the original order
  ! of equal input values is not necessarily preserved.
  !
  !
  ! sortrx uses a hybrid quicksort algorithm, based on several
  ! suggestions in knuth, volume 3, section 5.2.2.  in particular, the
  ! "pivot key" [my term] for dividing each subsequence is chosen to be
  ! the median of the first, last, and middle values of the subsequence;
  ! and the quicksort is cut off when a subsequence has 9 or fewer
  ! elements, and a straight insertion sort of the entire array is done
  ! at the end.  the result is comparable to a pure insertion sort for
  ! very short arrays, and very fast for very large arrays (of order 12
  ! micro-sec/element on the 3081k for arrays of 10k elements).  it is
  ! also not subject to the poor performance of the pure quicksort on
  ! partially ordered data.
  !
  !
  !===================================================================

  data_size_def
  data_input_def
  data_temp_def
  integer(ip), intent(in)              :: n
  integer(ip), optional, intent(inout) :: index(n)

  integer(ip)   :: lstk(31),rstk(31),istk
  integer(ip)   :: l,r,i,j,p,indexp,indext

  !     quicksort cutoff
  !
  !     quit quicksort-ing when a subsequence contains m or fewer
  !     elements and finish off at end with straight insertion sort.
  !     according to knuth, v.3, the optimum value of m is around 9.

  integer(ip), parameter :: m=9
  !parameter (m=9)

  !===================================================================
  !
  !     make initial guess for index

  !do 50 i=1,n
  !   index(i)=i
  ! 50   continue

     !     if array is short, skip quicksort and go directly to
     !     the straight insertion sort.

     if (n.le.m) goto 900

     !===================================================================
     !
     !     quicksort
     !
     !     the "qn:"s correspond roughly to steps in algorithm q,
     !     knuth, v.3, pp.116-117, modified to select the median
     !     of the first, last, and middle elements as the "pivot
     !     key" (in knuth's notation, "k").  also modified to leave
     !     data in place and produce an index array.  to simplify
     !     comments, let data[i]=data(index(i)).

     ! q1: initialize
     istk=0
     l=1
     r=n

200  continue

     ! q2: sort the subsequence data[l]..data[r].
     !
     !     at this point, data[l] <= data[m] <= data[r] for all l < l,
     !     r > r, and l <= m <= r.  (first time through, there is no
     !     data for l < l or r > r.)

     i=l
     j=r

     ! q2.5: select pivot key
     !
     !     let the pivot, p, be the midpoint of this subsequence,
     !     p=(l+r)/2; then rearrange index(l), index(p), and index(r)
     !     so the corresponding data values are in increasing order.
     !     the pivot key, datap, is then data[p].

#ifdef in_place
     if (present(index)) then
        p=(l+r)/2
        indexp=index(p)
        datap=data_acces(p)
        
        if ( greater(data_acces(l),datap) ) then
           index(p)=index(l)
           index(l)=indexp
           indexp=index(p)
           data_acces(p)=data_acces(l)
           data_acces(l)=datap
           datap=data_acces(p)
        endif
        
        if ( greater(datap,data_acces(r)) ) then
           if ( greater(data_acces(l),data_acces(r)) ) then
              data_acces(p)=data_acces(l)
              data_acces(l)=data_acces(r)
              index(p)=index(l)
              index(l)=index(r)
           else
              data_acces(p)=data_acces(r)
              index(p)=index(r)
           endif
           data_acces(r)=datap
           index(r)=indexp
           datap=data_acces(p)
           indexp=index(p)
        endif
     else
        p=(l+r)/2
        datap=data_acces(p)

        if ( greater(data_acces(l),datap) ) then
           data_acces(p)=data_acces(l)
           data_acces(l)=datap
           datap=data_acces(p)
        endif

        if ( greater(datap,data_acces(r)) ) then
           if ( greater(data_acces(l),data_acces(r)) ) then
              data_acces(p)=data_acces(l)
              data_acces(l)=data_acces(r)
           else
              data_acces(p)=data_acces(r)
           endif
           data_acces(r)=datap
           datap=data_acces(p)
        endif
     end if
#else
     ! If the data is not re-ordered "in_place",
     ! then the index array MUST be present as otherwise
     ! the calling subroutine would have no means to
     ! know the interchanges performed
     check(present(index))
     p=(l+r)/2
     indexp=index(p)
     datap=data_acces(indexp)

     if ( greater(data_acces(index(l)),datap) ) then
        index(p)=index(l)
        index(l)=indexp
        indexp=index(p)
        datap=data_acces(indexp)
     endif

     if ( greater(datap,data_acces(index(r))) ) then
        if ( greater(data_acces(index(l)),data_acces(index(r))) ) then
           index(p)=index(l)
           index(l)=index(r)
        else
           index(p)=index(r)
        endif
        index(r)=indexp
        indexp=index(p)
        datap=data_acces(indexp)
     endif
#endif

     !     now we swap values between the right and left sides and/or
     !     move datap until all smaller values are on the left and all
     !     larger values are on the right.  neither the left or right
     !     side will be internally ordered yet; however, datap will be
     !     in its final position.

300  continue

     ! q3: search for datum on left >= datap
     !
     !     at this point, data[l] <= datap.  we can therefore start scanning
     !     up from l, looking for a value >= datap (this scan is guaranteed
     !     to terminate since we initially placed datap near the middle of
     !     the subsequence).

     i=i+1
#ifdef in_place
     if ( greater(datap,data_acces(i)) ) goto 300
#else
     if ( greater(datap,data_acces(index(i))) ) goto 300
#endif
400  continue

     ! q4: search for datum on right <= datap
     !
     !     at this point, data[r] >= datap.  we can therefore start scanning
     !     down from r, looking for a value <= datap (this scan is guaranteed
     !     to terminate since we initially placed datap near the middle of
     !     the subsequence).

     j=j-1
#ifdef in_place
     if ( greater(data_acces(j),datap) ) goto 400
#else
     if ( greater(data_acces(index(j)),datap) ) goto 400
#endif

     ! q5: have the two scans collided?

     if (i.lt.j) then

        ! q6: no, interchange data[i] <--> data[j] and continue

#ifdef in_place
        datat=data_acces(i)
        data_acces(i)=data_acces(j)
        data_acces(j)=datat
#endif
        if ( present(index) ) then
           indext=index(i)
           index(i)=index(j)
           index(j)=indext
        end if
        goto 300
     else

        ! q7: yes, select next subsequence to sort
        !
        !     at this point, i >= j and data[l] <= data[i] == datap <= data[r],
        !     for all l <= l < i and j < r <= r.  if both subsequences are
        !     more than m elements long, push the longer one on the stack and
        !     go back to quicksort the shorter; if only one is more than m
        !     elements long, go back and quicksort it; otherwise, pop a
        !     subsequence off the stack and quicksort it.

        if (r-j .ge. i-l .and. i-l .gt. m) then
           istk=istk+1
           lstk(istk)=j+1
           rstk(istk)=r
           r=i-1
        else if (i-l .gt. r-j .and. r-j .gt. m) then
           istk=istk+1
           lstk(istk)=l
           rstk(istk)=i-1
           l=j+1
        else if (r-j .gt. m) then
           l=j+1
        else if (i-l .gt. m) then
           r=i-1
        else
           ! q8: pop the stack, or terminate quicksort if empty
           if (istk.lt.1) goto 900
           l=lstk(istk)
           r=rstk(istk)
           istk=istk-1
        endif
        goto 200
     endif

900  continue

     !===================================================================
     !
     ! q9: straight insertion sort

#ifdef in_place
     if ( present(index) ) then
       do 951 i=2,n
          if ( greater(data_acces(i-1),data_acces(i)) ) then
             indexp=index(i)
             datap=data_acces(i)
             p=i-1
921          continue
             index(p+1) = index(p)
             data_acces(p+1) = data_acces(p)
             p=p-1
             if (p.gt.0) then
                if ( greater(data_acces(p),datap) ) goto 921
             endif
             index(p+1) = indexp
             data_acces(p+1) = datap
          endif
951    continue
    else
       do 952 i=2,n
          if ( greater(data_acces(i-1),data_acces(i)) ) then
             datap=data_acces(i)
             p=i-1
922          continue
             data_acces(p+1) = data_acces(p)
             p=p-1
             if (p.gt.0) then
                if ( greater(data_acces(p),datap) ) goto 922
             endif
             data_acces(p+1) = datap
          endif
952    continue
    end if
#else
     check(present(index))
     do 950 i=2,n
        if ( greater(data_acces(index(i-1)),data_acces(index(i))) )then
           indexp=index(i)
           datap=data_acces(indexp)
           p=i-1
920        continue
           index(p+1) = index(p)
           p=p-1
           if (p.gt.0) then
              if ( greater(data_acces(index(p)),datap) ) goto 920
           endif
           index(p+1) = indexp
        endif
950     continue
#endif
        !===================================================================
        !
        !     all done

      end subroutine name

