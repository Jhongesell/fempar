module CDR_discrete_integration_names
  use field_names
  use SB_assembler_names
  use SB_fe_space_names
  use SB_discrete_integration_names
  use reference_fe_names
  use types_names
  use memor_names
  
  implicit none
# include "debug.i90"
  private
  type, extends(SB_discrete_integration_t) :: CDR_discrete_integration_t
     integer(ip) :: viscosity 
   contains
     procedure :: integrate
  end type CDR_discrete_integration_t
  
  public :: CDR_discrete_integration_t
  
contains
  
  subroutine integrate ( this, fe_space, assembler )
    implicit none
    class(CDR_discrete_integration_t), intent(in)    :: this
    class(SB_serial_fe_space_t)      , intent(inout) :: fe_space
    class(SB_assembler_t)            , intent(inout) :: assembler

    type(SB_finite_element_t), pointer :: fe
    type(SB_volume_integrator_t), pointer :: vol_int
    real(rp), allocatable :: elmat(:,:), elvec(:)
    type(fe_map_t), pointer :: fe_map
    type(SB_quadrature_t), pointer :: quad

    integer(ip)  :: igaus,inode,jnode,ngaus
    real(rp)     :: factor

    type(vector_field_t) :: grad_test, grad_trial

    integer(ip) :: number_fe_spaces

    integer(ip), pointer :: field_blocks(:)
    logical, pointer :: field_coupling(:,:)

    integer(ip) :: ielem, iapprox, number_nodes
    type(i1p_t), pointer :: elem2dof(:)
    type(i1p_t), pointer :: bc_code(:)
    type(r1p_t), pointer :: bc_value(:)
    integer(ip), allocatable :: number_nodes_per_field(:)

    
    number_fe_spaces = fe_space%get_number_fe_spaces()
    field_blocks => fe_space%get_field_blocks()
    field_coupling => fe_space%get_field_coupling()

    fe => fe_space%get_finite_element(1)
    number_nodes = fe%get_number_nodes()
    call memalloc ( number_nodes, number_nodes, elmat, __FILE__, __LINE__ )
    call memalloc ( number_nodes, elvec, __FILE__, __LINE__ )
    call memalloc ( number_fe_spaces, number_nodes_per_field, __FILE__, __LINE__ )
    call fe%get_number_nodes_per_field( number_nodes_per_field )

    call fe_space%initialize_integration()
    
    quad => fe%get_quadrature()
    ngaus = quad%get_number_evaluation_points()
    do ielem = 1, fe_space%get_number_elements()
       elmat = 0.0_rp
       elvec = 0.0_rp

       fe => fe_space%get_finite_element(ielem)
       call fe%update_integration()
       
       fe_map   => fe%get_fe_map()
       vol_int  => fe%get_volume_integrator(1)
       elem2dof => fe%get_elem2dof()
       bc_code  => fe%get_bc_code()
       bc_value => fe%get_bc_value()

       do igaus = 1,ngaus
          factor = fe_map%get_det_jacobian(igaus) * quad%get_weight(igaus)
          do inode = 1, number_nodes
             call vol_int%get_gradient(inode,igaus,grad_trial)
             do jnode = 1, number_nodes
                call vol_int%get_gradient(jnode,igaus,grad_test)
                elmat(inode,jnode) = elmat(inode,jnode) + factor * grad_test * grad_trial
             end do
          end do
       end do
       !write (*,*) 'XXXXXXXXX ELMAT XXXXXXXXX'
       !write (*,*) elmat
       
       ! Apply boundary conditions
       call this%impose_strong_dirichlet_data( elmat, elvec, bc_code, bc_value, number_nodes_per_field, number_fe_spaces )
       call assembler%assembly( number_fe_spaces, number_nodes_per_field, elem2dof, field_blocks,  field_coupling, elmat, elvec )
    end do
    call memfree ( number_nodes_per_field, __FILE__, __LINE__ )
    call memfree ( elmat, __FILE__, __LINE__ )
    call memfree ( elvec, __FILE__, __LINE__ )
  end subroutine integrate
end module CDR_discrete_integration_names

!==================================================================================================
module vector_dG_CDR_discrete_integration_names
use field_names
use SB_assembler_names
use SB_fe_space_names
use SB_discrete_integration_names
use reference_fe_names
use types_names
use memor_names

implicit none
# include "debug.i90"
private
type, extends(SB_discrete_integration_t) :: vector_dG_CDR_discrete_integration_t
real(rp) :: viscosity 
real(rp) :: C_IP ! Interior Penalty constant
real(rp) :: xi   ! DG symmetric parameter: (0-Symmetric, 1/2-Incomplete, 1-Antisymmetric)
contains
procedure :: set_problem
procedure :: integrate
end type vector_dG_CDR_discrete_integration_t

public :: vector_dG_CDR_discrete_integration_t

contains
  subroutine set_problem(this, viscosity, C_IP, xi)
    implicit none
    class(vector_dG_CDR_discrete_integration_t), intent(inout) :: this
    real(rp)                                   , intent(in)    :: viscosity 
    real(rp)                                   , intent(in)    :: C_IP 
    real(rp)                                   , intent(in)    :: xi
    
    this%viscosity = viscosity
    this%C_IP      = C_IP
    this%xi        = xi
  end subroutine set_problem
  subroutine integrate ( this, fe_space, assembler )
    implicit none
    class(vector_dG_CDR_discrete_integration_t), intent(in)    :: this
    class(SB_serial_fe_space_t)                , intent(inout) :: fe_space
    class(SB_assembler_t)                      , intent(inout) :: assembler

    type(SB_finite_element_t)   , pointer :: fe
    type(finite_face_t)         , pointer :: face
    type(SB_volume_integrator_t), pointer :: vol_int_first_fe, vol_int_second_fe
    type(face_integrator_t)     , pointer :: face_int
    real(rp)                , allocatable :: elmat(:,:), elvec(:), facemat(:,:,:,:), facevec(:,:)
    type(fe_map_t)              , pointer :: fe_map
    type(face_map_t)            , pointer :: face_map
    type(SB_quadrature_t)       , pointer :: quad
    integer(ip)             , allocatable :: number_nodes_per_field(:)

    integer(ip)  :: igaus,inode,jnode,ioffset,joffset,ngaus
    real(rp)     :: factor, h_length, bcvalue

    real(rp)             :: shape_test_scalar, shape_trial_scalar
    type(vector_field_t) :: grad_test_scalar, grad_trial_scalar
    type(tensor_field_t) :: grad_test_vector, grad_trial_vector
    type(vector_field_t) :: normal(2)
    
    integer(ip)          :: i, j, number_fe_spaces

    integer(ip), pointer :: field_blocks(:)
    logical    , pointer :: field_coupling(:,:)

    integer(ip)          :: ielem, iface, number_nodes, ineigh, jneigh, number_neighbours
    type(i1p_t), pointer :: elem2dof(:),test_elem2dof(:),trial_elem2dof(:)
    type(i1p_t), pointer :: bc_code(:)
    type(r1p_t), pointer :: bc_value(:)

    number_fe_spaces = fe_space%get_number_fe_spaces()
    field_blocks => fe_space%get_field_blocks()
    field_coupling => fe_space%get_field_coupling()

    fe => fe_space%get_finite_element(1)
    number_nodes = fe%get_number_nodes()

    call memalloc ( number_fe_spaces, number_nodes_per_field, __FILE__, __LINE__ )
    call fe%get_number_nodes_per_field( number_nodes_per_field )

    ! --------------------------- LOOP OVER THE ELEMENTS -------------------------
    call memalloc ( number_nodes, number_nodes, elmat, __FILE__, __LINE__ )
    call memalloc ( number_nodes, elvec, __FILE__, __LINE__ )
    
    call fe_space%initialize_integration()
    
    quad  => fe%get_quadrature()
    ngaus = quad%get_number_evaluation_points()
    do ielem = 1, fe_space%get_number_elements()
       elmat = 0.0_rp
       elvec = 0.0_rp

       fe => fe_space%get_finite_element(ielem)
       call fe%update_integration()
       
       fe_map            => fe%get_fe_map()
       vol_int_first_fe  => fe%get_volume_integrator(1)
       vol_int_second_fe => fe%get_volume_integrator(2)
       elem2dof          => fe%get_elem2dof()
       bc_code           => fe%get_bc_code()
       bc_value          => fe%get_bc_value()

       do igaus = 1,ngaus
          factor = fe_map%get_det_jacobian(igaus) * quad%get_weight(igaus)
          do inode = 1, number_nodes_per_field(1)
             call vol_int_first_fe%get_gradient(inode,igaus,grad_trial_scalar)
             do jnode = 1, number_nodes_per_field(1)
                call vol_int_first_fe%get_gradient(jnode,igaus,grad_test_scalar)
                elmat(inode,jnode) = elmat(inode,jnode) + factor *                                  &
                     &               this%viscosity * grad_test_scalar*grad_trial_scalar
             end do
          end do

          do inode = 1, number_nodes_per_field(2)
             ioffset = number_nodes_per_field(1)+inode
             call vol_int_second_fe%get_gradient(inode,igaus,grad_trial_vector)
             do jnode = 1, number_nodes_per_field(2)
                joffset = number_nodes_per_field(1)+jnode
                call vol_int_second_fe%get_gradient(jnode,igaus,grad_test_vector)
                elmat(ioffset,joffset) = elmat(ioffset,joffset) + factor *                        &
                     &          this%viscosity*double_contract(grad_test_vector,grad_trial_vector)
             end do
          end do
       end do
       
       
       call this%impose_strong_dirichlet_data( elmat, elvec, bc_code, bc_value,                   &
            &                                  number_nodes_per_field, number_fe_spaces )
       call assembler%assembly( number_fe_spaces, number_nodes_per_field, elem2dof, field_blocks, &
            &                   field_coupling, elmat, elvec )      
    end do
    call memfree ( elmat, __FILE__, __LINE__ )
    call memfree ( elvec, __FILE__, __LINE__ )


    ! --------------------------- LOOP OVER THE FACES -----------------------------
    call memalloc ( number_nodes, number_nodes,2,2,facemat, __FILE__, __LINE__ )
    call memalloc ( number_nodes, 2,facevec, __FILE__, __LINE__ )

    !call fe_space%initialize_face_integration()
    do iface = 1, fe_space%get_number_interior_faces()

       facemat = 0.0_rp
       facevec = 0.0_rp

       face => fe_space%get_finite_face(iface)
       number_neighbours = face%number_neighbours()
       write(*,*) __FILE__,__LINE__,iface,'------------------'
       call face%update_integration()
      
       quad   => face%get_quadrature()
       ngaus = quad%get_number_evaluation_points()
       face_map => face%get_map()

       j = 1
       face_int => face%get_face_integrator(j)
       
       do igaus = 1, ngaus
          call face_map%get_normals(igaus,normal)
          h_length = face_map%compute_characteristic_length(igaus,number_neighbours)
          factor = face_map%get_det_jacobian(igaus) * quad%get_weight(igaus)
          do ineigh = 1, number_neighbours
             do inode = 1, number_nodes_per_field(j)
                !ioffset = number_nodes_per_field(j)*(ineigh-1) + inode
                call face_int%get_value(inode,igaus,ineigh,shape_trial_scalar)
                call face_int%get_gradient(inode,igaus,ineigh,grad_trial_scalar)
                do jneigh = 1, number_neighbours
                   do jnode = 1, number_nodes_per_field(j)
                      !joffset = number_nodes_per_field(j)*(jneigh-1) + jnode
                      call face_int%get_value(jnode,igaus,jneigh,shape_test_scalar)
                      call face_int%get_gradient(jnode,igaus,jneigh,grad_test_scalar)
                      !- mu*({{grad u}}[[v]] + (1-xi)*[[u]]{{grad v}} ) + C*mu*p^2/h * [[u]] [[v]]
                      facemat(inode,jnode,ineigh,jneigh) = facemat(inode,jnode,ineigh,jneigh) +     &
                           &  factor * this%viscosity *   &
                           &  (-0.5_rp*grad_test_scalar*normal(ineigh)*shape_trial_scalar - &
                           &   0.5_rp*grad_trial_scalar*normal(jneigh)*shape_test_scalar  + &
                           &   this%c_IP / h_length * shape_test_scalar*shape_trial_scalar *        &
                           &   normal(ineigh)*normal(jneigh))
                   end do
                end do
             end do
          end do
       end do
       do ineigh = 1, number_neighbours
          test_elem2dof => face%get_elem2dof(ineigh)
          do jneigh = 1, number_neighbours
             trial_elem2dof => face%get_elem2dof(jneigh)
             call assembler%face_assembly(number_fe_spaces,number_nodes_per_field, number_nodes_per_field,&
                  &                  test_elem2dof,trial_elem2dof,field_blocks,field_coupling,       &
                  &                  facemat(:,:,ineigh,jneigh), facevec(:,ineigh) )   
          end do
       end do
    end do

    do inode = 1, number_nodes_per_field(j)
       write(*,*) inode, '-------'
       write(*,*) facemat(1:4,inode,1,1),  facemat(1:4,inode,2,1)
    end do
    do inode = 1, number_nodes_per_field(j)
       write(*,*) number_nodes_per_field(j)+inode, '-------'
       write(*,*) facemat(1:4,inode,1,2),  facemat(1:4,inode,2,2)
    end do

    do iface = fe_space%get_number_interior_faces() + 1, fe_space%get_number_interior_faces() +   &
         &                                               fe_space%get_number_boundary_faces()

       facemat = 0.0_rp
       facevec = 0.0_rp

       face => fe_space%get_finite_face(iface)
       number_neighbours = face%number_neighbours()
       write(*,*) __FILE__,__LINE__,iface,'------------------'
       call face%update_integration()

       face_map => face%get_map()
       quad   => face%get_quadrature()
       ngaus = quad%get_number_evaluation_points()

       j = 1
       face_int => face%get_face_integrator(j)
      
       do igaus = 1, ngaus
          call face_map%get_normals(igaus,normal)
          h_length = face_map%compute_characteristic_length(igaus,number_neighbours)
          factor = face_map%get_det_jacobian(igaus) * quad%get_weight(igaus)
          do ineigh = 1, number_neighbours
             do inode = 1, number_nodes_per_field(j)
                call face_int%get_value(inode,igaus,ineigh,shape_trial_scalar)
                call face_int%get_gradient(inode,igaus,ineigh,grad_trial_scalar)
                do jneigh = 1, number_neighbours
                   do jnode = 1, number_nodes_per_field(j)
                      call face_int%get_value(jnode,igaus,jneigh,shape_test_scalar)
                      call face_int%get_gradient(jnode,igaus,jneigh,grad_test_scalar)
                      facemat(inode,jnode,ineigh,jneigh) = facemat(inode,jnode,ineigh,jneigh) +     &
                           &  factor * this%viscosity *   &
                           &  (-grad_test_scalar*normal(ineigh)*shape_trial_scalar - &
                           &   grad_trial_scalar*normal(jneigh)*shape_test_scalar  + &
                           &   this%c_IP / h_length * shape_test_scalar*shape_trial_scalar)
                   end do
                end do
                bcvalue = 1.0_rp
                facevec(inode,ineigh) = facevec(inode,ineigh) + factor * this%viscosity *           &
                     &                  (bcvalue * grad_trial_scalar*normal(jneigh) +       &
                     &                  this%c_IP/h_length * bcvalue * shape_trial_scalar )
             end do
          end do
       end do
    end do
 
    call memfree ( facemat, __FILE__, __LINE__ )
    call memfree ( facevec, __FILE__, __LINE__ )
    ! ----------------------------------------------------------------------------
    call memfree ( number_nodes_per_field, __FILE__, __LINE__ )
  end subroutine integrate

end module vector_dG_CDR_discrete_integration_names
