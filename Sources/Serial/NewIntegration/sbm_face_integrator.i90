subroutine face_interpolation_create(this, local_quadrature, reference_fe)
  implicit none
  ! Parameters
  class(face_interpolation_t)  , intent(inout) :: this
  type(SB_quadrature_t)        ,  intent(in)   :: local_quadrature
  class(reference_fe_t), target, intent(in)    :: reference_fe

  integer(ip)           :: face_dimensions,local_face_id, istat
  type(SB_quadrature_t) :: face_quadrature

  this%number_shape_functions   = reference_fe%number_nodes
  this%number_evaluation_points = local_quadrature%number_evaluation_points
  face_dimensions               = reference_fe%number_dimensions - 1
  this%number_faces             = reference_fe%number_vefs_of_dimension(face_dimensions)
  this%reference_fe             => reference_fe

  allocate(this%interpolation(this%number_faces),stat = istat)
  check(istat == 0)

  do local_face_id =1, this%number_faces
     call reference_fe%create_face_interpolation(local_face_id,local_quadrature,                  &
          &                                      this%interpolation(local_face_id))
  end do

end subroutine face_interpolation_create

!==================================================================================================
subroutine face_interpolation_free(this)
  implicit none
  ! Parameters
  class(face_interpolation_t)  , intent(inout) :: this

  integer(ip) :: i

  do i = 1, this%number_faces
     call this%interpolation(i)%free()
  end do
  call this%interpolation_o_map%free

  this%number_shape_functions   = 0
  this%number_evaluation_points = 0
  this%number_faces             = 0

  this%reference_fe => NULL()
end subroutine face_interpolation_free

!==================================================================================================
subroutine face_integrator_initialize(this,left_reference_fe, right_reference_fe, max_order )
  implicit none
  ! Parameters
  class(face_integrator_t)     , intent(inout) :: this
  class(reference_fe_t), target, intent(in)    :: left_reference_fe, right_reference_fe
  integer(ip)       , optional , intent(in)    :: max_order

  integer(ip) :: i

  this%reference_fe(1)%p => left_reference_fe
  this%reference_fe(2)%p => right_reference_fe

  ! AH: This quadrature is created using the left reference element but in a future I would
  ! propose to define a reference element associated to face integration
  ! (in case we want to use diferente volume and face integration)
  call left_reference_fe%create_face_quadrature(this%quadrature, max_order)
  call this%face_map%create_from_face(this%quadrature, this%reference_fe(1)%p)

  do i = 1, 2
     call this%interpolation(i)%create(this%quadrature,this%reference_fe(i)%p)
  end do

end subroutine face_integrator_initialize

!==================================================================================================
subroutine face_integrator_free(this)
  implicit none
  ! Parameters
  class(face_integrator_t)     , intent(inout) :: this

  integer(ip) :: i
  call this%face_map%free()
  call this%quadrature%free()

  do i=1,2
     this%reference_fe(i)%p => NULL()
     call this%interpolation(i)%free()
  end do
end subroutine face_integrator_free
