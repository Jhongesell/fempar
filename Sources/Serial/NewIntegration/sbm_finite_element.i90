subroutine update_integration( this )
  implicit none
  class(SB_finite_element_t), intent(inout) :: this 
  integer(ip) :: i
  call this%fe_map%update( this%quadrature, this%cell%coordinates )
  do i = 1, this%number_fe_spaces
     call this%volume_integrator(i)%p%update( this%reference_fe_phy(i)%p, this%fe_map )
  end do
end subroutine update_integration

function get_number_nodes ( this )
  implicit none
  class(SB_finite_element_t), intent(in) :: this
  integer(ip)                            :: get_number_nodes
  get_number_nodes = this%number_nodes
end function get_number_nodes

function get_fe_map ( this )
  implicit none
  class(SB_finite_element_t), target, intent(in)  :: this
  type(fe_map_t)                        , pointer :: get_fe_map
  get_fe_map => this%fe_map
end function get_fe_map

function get_quadrature ( this )
  implicit none
  class(SB_finite_element_t), target, intent(in)  :: this
  type(SB_quadrature_t), pointer :: get_quadrature
  get_quadrature => this%quadrature
end function get_quadrature

function get_volume_integrator ( this, i )
  implicit none
  class(SB_finite_element_t), target, intent(in)  :: this
  integer(ip)                       , intent(in)  :: i
  type(SB_volume_integrator_t)      , pointer     :: get_volume_integrator
  get_volume_integrator => this%volume_integrator(i)%p
end function get_volume_integrator

function get_elem2dof( this )
  implicit none
  class(SB_finite_element_t), target, intent(in) :: this
  type(i1p_t), pointer :: get_elem2dof(:)
  get_elem2dof => this%elem2dof
end function get_elem2dof

function get_bc_code( this )
  implicit none
  class(SB_finite_element_t), target, intent(in) :: this
  type(i1p_t), pointer :: get_bc_code(:)
  get_bc_code => this%bc_code
end function get_bc_code

function get_bc_value( this )
  implicit none
  class(SB_finite_element_t), target, intent(in) :: this
  type(r1p_t), pointer :: get_bc_value(:)
  get_bc_value => this%bc_value
end function get_bc_value

subroutine get_number_nodes_per_field ( this, number_nodes )
  implicit none
  class(SB_finite_element_t), intent(in)  :: this
  integer(ip)               , intent(out) :: number_nodes(this%number_fe_spaces)
  integer(ip) :: i
  do i = 1, this%number_fe_spaces
     number_nodes(i) = this%reference_fe_phy(i)%p%get_number_nodes()
  end do
end subroutine get_number_nodes_per_field

function get_subset_id ( this )
  implicit none
  class(SB_finite_element_t), intent(in) :: this
  integer(ip)                            :: get_subset_id
  get_subset_id = this%cell%subset_id
end function get_subset_id

!**************************************************************************************************
! Update methods for fe_function_scalar/vector/tensor_t
!**************************************************************************************************

subroutine update_scalar_values (this, vector_dof_values, fe_function_scalar)
  implicit none
  class(SB_finite_element_t), intent(in)    :: this
  class(vector_t)           , intent(in)    :: vector_dof_values
  type(fe_function_scalar_t), intent(inout) :: fe_function_scalar

  integer(ip)       :: fe_space_id, block_id, number_nodes_fe_space
  real(rp), pointer :: nodal_values(:)

  assert ( associated(this%field_blocks) )

  fe_space_id = fe_function_scalar%get_fe_space_id()
  call fe_function_scalar%set_current_number_quadrature_points( &
                          & this%quadrature%get_number_evaluation_points() )
  call fe_function_scalar%set_current_number_nodes(             &
                          & this%reference_fe_phy(fe_space_id)%p%get_number_nodes() )

  block_id     =  this%field_blocks(fe_space_id)
  nodal_values => fe_function_scalar%get_nodal_values()

  number_nodes_fe_space = this%reference_fe_phy(fe_space_id)%p%get_number_nodes()
  nodal_values(1:number_nodes_fe_space) = this%bc_value(fe_space_id)%p(:)

  !call vector_dof_values%extract_subvector ( block_id, &
  !                                         & number_nodes_fe_space, &
  !                                         & this%elem2dof(fe_space_id)%p, &
  !                                         & nodal_values )

  !call this%volume_integrator(fe_space_id)%evaluate_fe_function ( nodal_values, &
  !                                          & fe_function_scalar%get_quadrature_points_values() )
end subroutine update_scalar_values

subroutine update_vector_values (this, vector_dof_values, fe_function_vector)
  implicit none
  class(SB_finite_element_t), intent(in)    :: this
  class(vector_t)           , intent(in)    :: vector_dof_values
  type(fe_function_vector_t), intent(inout) :: fe_function_vector

  integer(ip)       :: fe_space_id, block_id, number_nodes_fe_space
  real(rp), pointer :: nodal_values(:)

  assert ( associated(this%field_blocks) )

  fe_space_id = fe_function_vector%get_fe_space_id()
  call fe_function_vector%set_current_number_quadrature_points( &
                          & this%quadrature%get_number_evaluation_points() )
  call fe_function_vector%set_current_number_nodes(             &
                          & this%reference_fe_phy(fe_space_id)%p%get_number_nodes() )

  block_id     =  this%field_blocks(fe_space_id)
  nodal_values => fe_function_vector%get_nodal_values()

  number_nodes_fe_space = this%reference_fe_phy(fe_space_id)%p%get_number_nodes()
  nodal_values(1:number_nodes_fe_space) = this%bc_value(fe_space_id)%p(:)

  !call vector_dof_values%extract_subvector ( block_id, &
  !                                         & number_nodes_fe_space, &
  !                                         & this%elem2dof(fe_space_id)%p, &
  !                                         & nodal_values )

  !call this%volume_integrator(fe_space_id)%evaluate_fe_function ( nodal_values, &
  !                                          & fe_function_vector%get_quadrature_points_values() )
end subroutine update_vector_values

subroutine update_tensor_values (this, vector_dof_values, fe_function_tensor)
  implicit none
  class(SB_finite_element_t), intent(in)    :: this
  class(vector_t)           , intent(in)    :: vector_dof_values
  type(fe_function_tensor_t), intent(inout) :: fe_function_tensor

  integer(ip)       :: fe_space_id, block_id, number_nodes_fe_space
  real(rp), pointer :: nodal_values(:)

  assert ( associated(this%field_blocks) )

  fe_space_id = fe_function_tensor%get_fe_space_id()
  call fe_function_tensor%set_current_number_quadrature_points( &
                          & this%quadrature%get_number_evaluation_points() )
  call fe_function_tensor%set_current_number_nodes(             &
                          & this%reference_fe_phy(fe_space_id)%p%get_number_nodes() )

  block_id     =  this%field_blocks(fe_space_id)
  nodal_values => fe_function_tensor%get_nodal_values()

  number_nodes_fe_space = this%reference_fe_phy(fe_space_id)%p%get_number_nodes()
  nodal_values(1:number_nodes_fe_space) = this%bc_value(fe_space_id)%p(:)

  !call vector_dof_values%extract_subvector ( block_id, &
  !                                         & number_nodes_fe_space, &
  !                                         & this%elem2dof(fe_space_id)%p, &
  !                                         & nodal_values )

  !call this%volume_integrator(fe_space_id)%evaluate_fe_function ( nodal_values, &
  !                                          & fe_function_tensor%get_quadrature_points_values() )
end subroutine update_tensor_values


