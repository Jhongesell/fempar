! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine fe_vef_iterator_create ( this, lid, fe_space ) 
  implicit none
  class(fe_vef_iterator_t)    , intent(inout) :: this
  integer(ip)                 , intent(in)    :: lid
  class(new_serial_fe_space_t), intent(in)    :: fe_space
  call this%free()
  call this%current_fe_vef_accessor%create(lid, fe_space )
end subroutine fe_vef_iterator_create

subroutine fe_vef_iterator_free ( this ) 
  implicit none
  class(fe_vef_iterator_t), intent(inout) :: this
  call this%current_fe_vef_accessor%free()
end subroutine fe_vef_iterator_free

subroutine fe_vef_iterator_init ( this ) 
  implicit none
  class(fe_vef_iterator_t), intent(inout) :: this
  call this%current_fe_vef_accessor%set_lid(lid=1)
end subroutine fe_vef_iterator_init

subroutine fe_vef_iterator_next ( this ) 
  implicit none
  class(fe_vef_iterator_t), intent(inout) :: this
  call this%current_fe_vef_accessor%next()
end subroutine fe_vef_iterator_next

function fe_vef_iterator_has_finished ( this ) 
  implicit none
  class(fe_vef_iterator_t), intent(in) :: this
  logical                                  :: fe_vef_iterator_has_finished
  fe_vef_iterator_has_finished = this%current_fe_vef_accessor%past_the_end()
end function fe_vef_iterator_has_finished

subroutine fe_vef_iterator_current ( this, fe_vef ) 
  implicit none
  class(fe_vef_iterator_t), target, intent(in) :: this
  type(fe_vef_accessor_t), intent(inout) :: fe_vef
  fe_vef = this%current_fe_vef_accessor
end subroutine fe_vef_iterator_current

subroutine itfc_fe_vef_iterator_create ( this, fe_space ) 
  implicit none
  class(itfc_fe_vef_iterator_t), intent(inout) :: this
  class(new_serial_fe_space_t) , intent(in)    :: fe_space
  type(vef_accessor_t) :: vef
  call this%itfc_vef_iterator%create(fe_space%triangulation)
  call this%itfc_vef_iterator%current(vef)
  call this%current_vef_accessor%create(vef%get_lid(), fe_space)
end subroutine itfc_fe_vef_iterator_create

subroutine itfc_fe_vef_iterator_free ( this ) 
  implicit none
  class(itfc_fe_vef_iterator_t), intent(inout) :: this
  call this%itfc_vef_iterator%free()
  call this%current_vef_accessor%free()
end subroutine itfc_fe_vef_iterator_free

subroutine itfc_fe_vef_iterator_init (this) 
  implicit none
  class(itfc_fe_vef_iterator_t), intent(inout) :: this
  type(vef_accessor_t) :: vef
  call this%itfc_vef_iterator%init()
  call this%itfc_vef_iterator%current(vef)
  call this%current_vef_accessor%set_lid(vef%get_lid())
end subroutine itfc_fe_vef_iterator_init

subroutine itfc_fe_vef_iterator_next ( this ) 
  implicit none
  class(itfc_fe_vef_iterator_t), intent(inout) :: this
  type(vef_accessor_t) :: vef
  call this%itfc_vef_iterator%next()
  call this%itfc_vef_iterator%current(vef)
  call this%current_vef_accessor%set_lid(vef%get_lid())
end subroutine itfc_fe_vef_iterator_next

function itfc_fe_vef_iterator_has_finished ( this ) 
  implicit none
  class(itfc_fe_vef_iterator_t), intent(in) :: this
  logical                                  :: itfc_fe_vef_iterator_has_finished
  itfc_fe_vef_iterator_has_finished = this%itfc_vef_iterator%has_finished()
end function itfc_fe_vef_iterator_has_finished

function itfc_fe_vef_iterator_current ( this ) 
  implicit none
  class(itfc_fe_vef_iterator_t), target, intent(in) :: this
  type(fe_vef_accessor_t)            :: itfc_fe_vef_iterator_current
  itfc_fe_vef_iterator_current = this%current_vef_accessor
end function itfc_fe_vef_iterator_current
