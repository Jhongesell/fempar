! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine coarse_fe_vef_accessor_vef_accessor_create(this, lid, base_static_triangulation )
  implicit none
  class(coarse_fe_vef_accessor_t)           , intent(inout) :: this
  integer(ip)                               , intent(in)    :: lid
  class(base_static_triangulation_t), target, intent(in)    :: base_static_triangulation
  check(.false.)
end subroutine coarse_fe_vef_accessor_vef_accessor_create

subroutine coarse_fe_vef_accessor_create ( this, lid, coarse_fe_space )
  implicit none
  class(coarse_fe_vef_accessor_t)     , intent(inout) :: this
  integer(ip)                         , intent(in)    :: lid
  type(coarse_fe_space_t), target     , intent(in)    :: coarse_fe_space
  call this%vef_accessor_t%create(lid,coarse_fe_space%coarse_triangulation)
  this%coarse_fe_space => coarse_fe_space
end subroutine coarse_fe_vef_accessor_create

subroutine coarse_fe_vef_accessor_free ( this)
  implicit none
  class(coarse_fe_vef_accessor_t), intent(inout) :: this
  call this%vef_accessor_t%free()
  nullify(this%coarse_fe_space)
end subroutine coarse_fe_vef_accessor_free

function coarse_fe_vef_accessor_get_num_coarse_fes_around (this)
  implicit none
  class(coarse_fe_vef_accessor_t), intent(in) :: this
  integer(ip) :: coarse_fe_vef_accessor_get_num_coarse_fes_around
 coarse_fe_vef_accessor_get_num_coarse_fes_around = this%get_num_interface_cells_around()
end function coarse_fe_vef_accessor_get_num_coarse_fes_around

function coarse_fe_vef_accessor_get_coarse_fe_around (this, icoarse_fe_around)
  implicit none
  class(coarse_fe_vef_accessor_t), intent(in) :: this
  integer(ip)                    , intent(in) :: icoarse_fe_around
  type(coarse_fe_accessor_t)                  :: coarse_fe_vef_accessor_get_coarse_fe_around
  type(cell_accessor_t)                       :: cell
  cell = this%get_interface_cell_around(icoarse_fe_around)
  call coarse_fe_vef_accessor_get_coarse_fe_around%create(cell%get_lid(), this%coarse_fe_space)
end function coarse_fe_vef_accessor_get_coarse_fe_around

