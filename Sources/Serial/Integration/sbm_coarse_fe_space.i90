! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine coarse_fe_space_create (this, &
                                  coarse_triangulation, &
                                  number_fields, &
                                  field_type, &
                                  ptr_dofs_per_fe_and_field, &
                                  lst_dofs_gids, &
                                  lst_vefs_gids_dofs_objects, &
                                  field_blocks, &
                                  field_coupling )
  implicit none
  class(coarse_fe_space_t)            , intent(inout) :: this
  type(coarse_triangulation_t), target, intent(in)    :: coarse_triangulation
  integer(ip)                         , intent(in)    :: number_fields
  integer(ip)                         , intent(in)    :: field_type(*)
  integer(ip)                         , intent(in)    :: ptr_dofs_per_fe_and_field(*)
  integer(igp)                        , intent(in)    :: lst_dofs_gids(*)
  integer(igp)                        , intent(in)    :: lst_vefs_gids_dofs_objects(*)
  ! Still to be used ...
  integer(ip)               , optional, intent(in)    :: field_blocks(:)
  logical                   , optional, intent(in)    :: field_coupling(:,:)

  integer(igp)           , allocatable :: lst_dofs_gids_ghost_extended(:)
  integer(igp)           , allocatable :: lst_vefs_gids_dofs_objects_ghost_extended(:)
  type(par_environment_t), pointer     :: par_environment

  call this%free()

  this%coarse_triangulation => coarse_triangulation
  par_environment => this%get_par_environment()
  if(par_environment%am_i_l1_task()) then
     this%number_fields = number_fields
     assert ( number_fields == 1 )
     call this%allocate_and_fill_field_blocks_and_coupling(field_blocks,field_coupling)
     this%number_blocks = maxval(this%field_blocks)
     call this%allocate_and_fill_field_type(field_type)
     ! Allocate + fill coarse fes-related data
     call this%allocate_and_fill_ptr_dofs_per_fe_and_field( ptr_dofs_per_fe_and_field )
     call this%fetch_ghost_fes_data( lst_dofs_gids, & 
                                     lst_vefs_gids_dofs_objects, & 
                                     lst_dofs_gids_ghost_extended, & 
                                     lst_vefs_gids_dofs_objects_ghost_extended )
     call this%allocate_and_fill_own_dofs_vef_per_fe( lst_dofs_gids_ghost_extended, & 
                                                      lst_vefs_gids_dofs_objects_ghost_extended )
     call this%allocate_lst_dofs_lids()
     call this%count_dofs_and_fill_lst_dof_lids()
     call this%compute_blocks_dof_import(lst_dofs_gids_ghost_extended)
     call this%renumber_dofs_first_interior_then_interface()
     call memfree (lst_dofs_gids_ghost_extended, __FILE__, __LINE__)
     call memfree (lst_vefs_gids_dofs_objects_ghost_extended,  __FILE__, __LINE__)
  else
     ! This is VERY DIRTY. Client types of type(coarse_fe_space_t) require 
     ! that >L1 MPI tasks also know how many blocks there are. The actual number of
     ! blocks is obtained as this%number_blocks = maxval(this%field_blocks), BUT provided
     ! how the semantics of coarse_fe_space_create are currently defined, this%field_blocks
     ! is only available on L1 MPI tasks!!!! I am setting this%number_blocks = 1 temporarily,
     ! to let me advance (and also because the code is not currently prepared to work with
     ! blocks at the coarse-grid matrix level), BUT clearly a solution is required here
     this%number_blocks = 1
     
     ! This is VERY DIRTY. Several client types of type(coarse_fe_space_t) require 
     ! that >L1 MPI tasks also know how many fields there are. The actual number of
     ! fields is obtained from the number_fields dummy argument, BUT provided
     ! how the semantics of coarse_fe_space_create are currently defined, number_fields
     ! is only available on L1 MPI tasks!!!! I am setting this%number_fields = 1 temporarily,
     ! to let me advance (and also because the code is not currently prepared to work with
     ! multiple fields at the coarse-grid matrix level), BUT clearly a solution is required here
     this%number_fields = 1
     
     ! This is a very DIRTY. type(sparse_matrix_t) requires that this%blocks_dof_import is also
     ! allocated on >L1 MPI tasks. Once we have the actual value for this%number_blocks, I think
     ! that, although still dirty, we could live with this.
     allocate ( this%blocks_dof_import(this%number_blocks) )
  end if
end subroutine coarse_fe_space_create

subroutine coarse_fe_space_free (this)
  implicit none
  class(coarse_fe_space_t), intent(inout) :: this
  integer(ip) :: istat
  type(par_environment_t), pointer :: par_environment
  if ( associated(this%coarse_triangulation) ) then
      par_environment => this%get_par_environment()
      if (par_environment%am_i_l1_task()) then
        call this%free_field_blocks_and_coupling()
        call this%free_field_type()
        call this%free_ptr_dofs_per_fe_and_field()
        call this%free_own_dofs_vef_per_fe()
        call this%free_lst_dofs_lids()
        call this%free_number_dofs_per_field_and_block()
        call this%free_blocks_dof_import()
        this%number_fields = -1 
        this%number_blocks = -1
      else
        this%number_fields = -1 
        this%number_blocks = -1
        ! This is a very DIRTY. type(sparse_matrix_t) requires that this%blocks_dof_import is also
        ! allocated on >L1 MPI tasks. Once we have the actual value for this%number_blocks, I think
        ! that, although still dirty, we could live with this.
        deallocate ( this%blocks_dof_import )
      end if
      nullify(this%coarse_triangulation)
   end if   
end subroutine coarse_fe_space_free

subroutine coarse_fe_space_print ( this )
  class(coarse_fe_space_t), intent(in)    :: this
  type(par_environment_t), pointer        :: par_environment
  type(coarse_fe_iterator_t)              :: coarse_fe_iterator
  type(coarse_fe_accessor_t)              :: coarse_fe
  type(i1p_t), allocatable                :: elem2dof(:)
  integer(ip)                             :: field_id, istat
  
  par_environment => this%get_par_environment()
  if ( par_environment%am_i_l1_task() ) then
    write(*,'(a,i10,a)') '********* number_dofs_per_field ',this%number_dofs_per_field,'********'
    write(*,'(a,i10,a)') '********* number_dofs_per_block ',this%number_dofs_per_block,'********'
    
    allocate ( elem2dof(this%get_number_fields()), stat=istat)
    check(istat==0)
    
    coarse_fe_iterator = this%create_coarse_fe_iterator()
    do while ( .not. coarse_fe_iterator%has_finished() ) 
      coarse_fe = coarse_fe_iterator%current()
      write(*,'(a,i10,a)') '********* ELEMENT: ',coarse_fe%get_lid(),'********'
      write(*,'(a)') '********* ELEMENT 2 DOF********'
      call coarse_fe%get_elem2dof(elem2dof)
      do field_id = 1, this%get_number_fields()
          write(*,'(a,i10,a)') '********* FIELD: ',field_id,'********'
          write(*,'(10i10)') elem2dof(field_id)%p
      end do
      call coarse_fe_iterator%next()
    end do
    
    deallocate ( elem2dof, stat=istat)
    check(istat==0)
 end if   
end subroutine coarse_fe_space_print

subroutine coarse_fe_space_allocate_and_fill_field_type(this, field_type)
  implicit none
  class(coarse_fe_space_t), intent(inout) :: this
  integer(ip)             , intent(in)    :: field_type(this%number_fields)
  type(par_environment_t), pointer        :: par_environment
  par_environment => this%get_par_environment()
  assert ( associated ( par_environment ) )
  assert ( par_environment%am_i_l1_task() )
  call memalloc ( this%number_fields, this%field_type, __FILE__, __LINE__ )
  this%field_type = field_type
end subroutine coarse_fe_space_allocate_and_fill_field_type

subroutine coarse_fe_space_free_field_type(this)
 implicit none
 class(coarse_fe_space_t), intent(inout) :: this
 if (allocated(this%field_type)) call memfree ( this%field_type, __FILE__, __LINE__ )
end subroutine coarse_fe_space_free_field_type

subroutine coarse_fe_space_allocate_and_fill_field_blocks_and_coupling ( this, field_blocks, field_coupling )
  implicit none
  class(coarse_fe_space_t)        , intent(inout) :: this
  integer(ip)           , optional, intent(in)    :: field_blocks(:)
  logical               , optional, intent(in)    :: field_coupling(:,:)
  type(par_environment_t), pointer                :: par_environment
  par_environment => this%get_par_environment()
  assert ( associated ( par_environment ) )
  assert ( par_environment%am_i_l1_task() )
  
  call memalloc( this%number_fields, this%field_blocks, __FILE__, __LINE__)
  call memalloc( this%number_fields, this%number_fields, this%field_coupling, __FILE__, __LINE__)
  if ( present(field_blocks) ) then
     assert( size(field_blocks) == this%number_fields )
     assert( present(field_coupling) )
     assert( size(field_coupling,1) == this%number_fields )
     assert( size(field_coupling,2) == this%number_fields )
     this%field_blocks   = field_blocks
     this%field_coupling = field_coupling
  else
     this%field_blocks = 1
     this%field_coupling = .true.
  end if
end subroutine coarse_fe_space_allocate_and_fill_field_blocks_and_coupling

subroutine coarse_fe_space_free_field_blocks_and_coupling (this)
  implicit none
  class(coarse_fe_space_t)        , intent(inout) :: this
  if (allocated(this%field_blocks)) call memfree ( this%field_blocks, __FILE__, __LINE__ )
  if (allocated(this%field_coupling)) call memfree ( this%field_coupling, __FILE__, __LINE__ )
end subroutine coarse_fe_space_free_field_blocks_and_coupling

subroutine coarse_fe_space_allocate_and_fill_ptr_dofs_per_fe_and_field (this, ptr_dofs_per_fe_and_field)
  implicit none
  class(coarse_fe_space_t), intent(inout) :: this
  integer(ip)             , intent(in)    :: ptr_dofs_per_fe_and_field(*)

  ! Locals
  integer(ip)                      :: i
  integer(ip)                      :: num_local_cells
  integer(ip)                      :: num_ghost_cells
  type(par_environment_t), pointer :: par_environment
  type(cell_import_t) , pointer :: cell_import

  par_environment => this%get_par_environment()

  assert ( associated ( par_environment ) )
  assert ( par_environment%am_i_l1_task() )

  num_local_cells = this%coarse_triangulation%get_num_local_cells()
  num_ghost_cells = this%coarse_triangulation%get_num_ghost_cells()
  call memalloc ( (num_local_cells+num_ghost_cells)*this%number_fields+1, &
       this%ptr_dofs_per_fe_and_field, &
       __FILE__, __LINE__ )

  this%ptr_dofs_per_fe_and_field = 0
  do i = 1, num_local_cells*this%number_fields
     this%ptr_dofs_per_fe_and_field(i+1) = ptr_dofs_per_fe_and_field(i+1) - ptr_dofs_per_fe_and_field(i)
  end do

  cell_import => this%coarse_triangulation%get_cell_import()
  call par_environment%l1_neighbours_exchange ( cell_import%get_number_neighbours(), &
                                                cell_import%get_neighbours_ids(),&
                                                cell_import%get_rcv_ptrs(),&
                                                cell_import%get_rcv_leids(),&
                                                cell_import%get_number_neighbours(), &
                                                cell_import%get_neighbours_ids(),&
                                                cell_import%get_snd_ptrs(),&
                                                cell_import%get_snd_leids(),&
                                                this%ptr_dofs_per_fe_and_field(2:), &
                                                chunk_size = this%number_fields )
  this%ptr_dofs_per_fe_and_field(1) = 1
  do i=1, (num_local_cells + num_ghost_cells)*this%number_fields
     this%ptr_dofs_per_fe_and_field(i+1) = this%ptr_dofs_per_fe_and_field(i+1) + this%ptr_dofs_per_fe_and_field(i)
  end do
end subroutine coarse_fe_space_allocate_and_fill_ptr_dofs_per_fe_and_field
  

subroutine coarse_fe_space_free_ptr_dofs_per_fe_and_field(this)
  implicit none
  class(coarse_fe_space_t)        , intent(inout) :: this
  if (allocated(this%ptr_dofs_per_fe_and_field)) call memfree ( this%ptr_dofs_per_fe_and_field, __FILE__, __LINE__ )
end subroutine coarse_fe_space_free_ptr_dofs_per_fe_and_field

subroutine coarse_fe_space_fetch_ghost_fes_data(this, &
                                                lst_dofs_gids, &
                                                lst_vefs_gids_dofs_objects, & 
                                                lst_dofs_gids_ghost_extended, &
                                                lst_vefs_gids_dofs_objects_ghost_extended )
  implicit none
  class(coarse_fe_space_t)     , intent(in)    :: this
  integer(igp)                 , intent(in)    :: lst_dofs_gids(*)
  integer(igp)                 , intent(in)    :: lst_vefs_gids_dofs_objects(*)
  integer(igp), allocatable    , intent(inout) :: lst_dofs_gids_ghost_extended(:)
  integer(igp), allocatable    , intent(inout) :: lst_vefs_gids_dofs_objects_ghost_extended(:)
  
  integer(ieep), allocatable       :: snd_buf(:)  
  integer(ieep), allocatable       :: rcv_buf(:) 
  integer(ip)  , allocatable       :: snd_ptrs_buf(:)  
  integer(ip)  , allocatable       :: rcv_ptrs_buf(:) 
  integer(ip)  , allocatable       :: coarse_fe_sizes(:)
  integer(ip)  , pointer           :: snd_ptrs(:)
  integer(ip)  , pointer           :: snd_leids(:)
  integer(ip)  , pointer           :: rcv_ptrs(:)
  integer(ip)  , pointer           :: rcv_leids(:)
  type(coarse_fe_accessor_t)       :: coarse_fe
  integer(ip)                      :: coarse_fe_id, spos, epos
  integer(ip)                      :: start_buf, end_buf, current, i, j, number_neighbours
  type(par_environment_t), pointer :: par_environment
  type(cell_import_t) , pointer :: cell_import
  integer(ip)                      :: num_local_cells
  integer(ip)                      :: num_ghost_cells

  par_environment => this%get_par_environment()
  assert ( associated ( par_environment ) )
  assert ( par_environment%am_i_l1_task() )

  if ( allocated (lst_dofs_gids_ghost_extended) ) &
       call memfree(lst_dofs_gids_ghost_extended, __FILE__, __LINE__)

  if ( allocated (lst_vefs_gids_dofs_objects_ghost_extended) ) &
       call memfree(lst_vefs_gids_dofs_objects_ghost_extended, __FILE__, __LINE__)     
       
  num_local_cells = this%coarse_triangulation%get_num_local_cells()
  num_ghost_cells = this%coarse_triangulation%get_num_ghost_cells()
  call memalloc ( this%ptr_dofs_per_fe_and_field((num_local_cells+num_ghost_cells)*this%number_fields+1)-1, &
                  lst_dofs_gids_ghost_extended, &
                  __FILE__, &
                  __LINE__ )
  call memalloc ( this%ptr_dofs_per_fe_and_field((num_local_cells+num_ghost_cells)*this%number_fields+1)-1, &
                  lst_vefs_gids_dofs_objects_ghost_extended, &
                  __FILE__, &
                  __LINE__ )

  call memalloc ( num_local_cells+num_ghost_cells, &
                  coarse_fe_sizes, &
                  __FILE__, &
                  __LINE__ )

  cell_import  => this%coarse_triangulation%get_cell_import()
  number_neighbours = cell_import%get_number_neighbours()
  snd_ptrs => cell_import%get_snd_ptrs()
  rcv_ptrs => cell_import%get_rcv_ptrs()
  snd_leids => cell_import%get_snd_leids()
  rcv_leids => cell_import%get_rcv_leids()

  call memalloc ( number_neighbours+1, snd_ptrs_buf, __FILE__, __LINE__ )
  call memalloc ( number_neighbours+1, rcv_ptrs_buf, __FILE__, __LINE__ )

  call coarse_fe%create(1, this)

  spos = this%ptr_dofs_per_fe_and_field(1)
  epos   = this%ptr_dofs_per_fe_and_field(num_local_cells*this%number_fields+1)-1
  lst_dofs_gids_ghost_extended(spos:epos) = lst_dofs_gids(spos:epos)
  lst_vefs_gids_dofs_objects_ghost_extended(spos:epos) = lst_vefs_gids_dofs_objects(spos:epos) 

  snd_ptrs_buf = 0
  do i=1, number_neighbours
     do j=snd_ptrs(i),snd_ptrs(i+1)-1
        coarse_fe_id = snd_leids(j)
        call coarse_fe%set_lid(coarse_fe_id)
        coarse_fe_sizes(coarse_fe_id) = this%coarse_fe_size(coarse_fe)
        snd_ptrs_buf(i+1) = snd_ptrs_buf(i+1) + coarse_fe_sizes(coarse_fe_id)
     end do
  end do

  snd_ptrs_buf(1) = 1
  do i=1, number_neighbours
     snd_ptrs_buf(i+1) = snd_ptrs_buf(i) + snd_ptrs_buf(i+1)
  end do

  rcv_ptrs_buf = 0
  do i=1, number_neighbours
     do j=rcv_ptrs(i),rcv_ptrs(i+1)-1
        coarse_fe_id = rcv_leids(j)
        call coarse_fe%set_lid(coarse_fe_id)
        coarse_fe_sizes(coarse_fe_id) = this%coarse_fe_size(coarse_fe)
        rcv_ptrs_buf(i+1) = rcv_ptrs_buf(i+1) + coarse_fe_sizes(coarse_fe_id)
     end do
  end do

  rcv_ptrs_buf(1) = 1
  do i=1, number_neighbours
     rcv_ptrs_buf(i+1) = rcv_ptrs_buf(i) + rcv_ptrs_buf(i+1)
  end do

  call memalloc (snd_ptrs_buf(number_neighbours+1)-1, snd_buf, __FILE__,__LINE__)
  call memalloc (rcv_ptrs_buf(number_neighbours+1)-1, rcv_buf, __FILE__,__LINE__)

  ! Pack data items into send buffer
  current = 1
  do i=1, number_neighbours
     current = snd_ptrs_buf(i)
     do j=snd_ptrs(i),snd_ptrs(i+1)-1
        coarse_fe_id = snd_leids(j)
        call coarse_fe%set_lid(coarse_fe_id)
        spos     = this%ptr_dofs_per_fe_and_field((coarse_fe_id-1)*this%number_fields+1)
        epos     = this%ptr_dofs_per_fe_and_field(coarse_fe_id*this%number_fields+1)-1
        start_buf = current
        end_buf   = current + coarse_fe_sizes(coarse_fe_id)-1
        call this%coarse_fe_pack ( coarse_fe, &
                                   lst_dofs_gids_ghost_extended(spos:epos), &
                                   lst_vefs_gids_dofs_objects_ghost_extended(spos:epos), &
                                   snd_buf(start_buf:end_buf) )
        current = current + coarse_fe_sizes(coarse_fe_id)
     end do
  end do

  ! Exchange data with nearest neighbours
  call par_environment%l1_neighbours_exchange ( number_neighbours,&
                                                cell_import%get_neighbours_ids(),&
                                                snd_ptrs_buf,&
                                                snd_buf,&
                                                rcv_ptrs_buf,&
                                                rcv_buf) 

  ! Unpack data items from recv buffer
  current = rcv_ptrs_buf(1)
  do i=1, number_neighbours
     do j=rcv_ptrs(i),rcv_ptrs(i+1)-1
        coarse_fe_id = rcv_leids(j)
        call coarse_fe%set_lid(coarse_fe_id)
        spos     = this%ptr_dofs_per_fe_and_field((coarse_fe_id-1)*this%number_fields+1)
        epos     = this%ptr_dofs_per_fe_and_field(coarse_fe_id*this%number_fields+1)-1
        start_buf = current
        end_buf   = current + coarse_fe_sizes(coarse_fe_id)-1
        call this%coarse_fe_unpack ( coarse_fe, &
                                     rcv_buf(start_buf:end_buf), &
                                     lst_dofs_gids_ghost_extended(spos:epos), &
                                     lst_vefs_gids_dofs_objects_ghost_extended(spos:epos) )
        current = current + coarse_fe_sizes(coarse_fe_id)
     end do
  end do

  call memfree ( coarse_fe_sizes, __FILE__, __LINE__ )
  call memfree ( snd_ptrs_buf, __FILE__, __LINE__ )
  call memfree ( rcv_ptrs_buf, __FILE__, __LINE__ )
  call memfree ( snd_buf, __FILE__, __LINE__ )
  call memfree ( rcv_buf, __FILE__, __LINE__ )
end subroutine coarse_fe_space_fetch_ghost_fes_data

function coarse_fe_space_dof_gid2vef_gid(this, field_id, dof_gid )
  implicit none
  class(coarse_fe_space_t) , intent(in)  :: this
  integer(ip)              , intent(in)  :: field_id
  integer(igp)             , intent(in)  :: dof_gid
  integer(igp) :: coarse_fe_space_dof_gid2vef_gid
  assert ( this%field_type(field_id) == field_type_cg )
  coarse_fe_space_dof_gid2vef_gid = dof_gid
end function coarse_fe_space_dof_gid2vef_gid

subroutine coarse_fe_space_allocate_and_fill_own_dofs_vef_per_fe (this, & 
                                                                  lst_dofs_gids_ghost_extended, &
                                                                  lst_vefs_gids_dofs_objects_ghost_extended )
  implicit none
  class(coarse_fe_space_t) , intent(inout)  :: this
  integer(igp)             , intent(in)     :: lst_dofs_gids_ghost_extended(*)
  integer(igp)             , intent(in)     :: lst_vefs_gids_dofs_objects_ghost_extended(*)
  type(par_environment_t), pointer          :: par_environment
  integer(ip)                               :: sum_num_vefs_all_cells
  type(coarse_fe_accessor_t)                :: coarse_fe
  integer(ip)                               :: istat
  integer(ip)                               :: field_id
  par_environment => this%get_par_environment()
  assert ( associated ( par_environment ) )
  assert ( par_environment%am_i_l1_task() )
  
  ! We would save the following traversal over all cells if type(coarse_triangulation_t)
  ! provided a TBP which returns the sum of num_vefs over all cells. As we
  ! do not currently have it (does it make sense to have it?), then I need
  ! cell iterators and a traversal over all cells!
  
  call coarse_fe%create(this%coarse_triangulation%get_num_local_cells()+ &
                         this%coarse_triangulation%get_num_ghost_cells(), this)
  
  sum_num_vefs_all_cells = coarse_fe%get_lid() + & ! Interior VEFs 
                           coarse_fe%scan_sum_number_vefs() + coarse_fe%get_num_vefs()
                           
  allocate(this%own_dofs_vef_per_fe(this%number_fields), stat=istat)
  check(istat == 0)
  
  do field_id = 1, this%number_fields
    ! Create type(list_t) corresponding to current field
    call this%own_dofs_vef_per_fe(field_id)%create(n=sum_num_vefs_all_cells)
    
    ! Fill type(list_t) corresponding to current field
    call this%fill_own_dofs_per_fe_field (field_id, &
                                          lst_dofs_gids_ghost_extended, &
                                          lst_vefs_gids_dofs_objects_ghost_extended)
  end do
end subroutine coarse_fe_space_allocate_and_fill_own_dofs_vef_per_fe

subroutine coarse_fe_space_fill_own_dofs_per_fe_field(this, &
                                                      field_id, & 
                                                      lst_dofs_gids_ghost_extended, &
                                                      lst_vefs_gids_dofs_objects_ghost_extended )
  implicit none
  class(coarse_fe_space_t) , intent(inout)  :: this
  integer(ip)              , intent(in)     :: field_id
  integer(igp)             , intent(in)     :: lst_dofs_gids_ghost_extended(*)
  integer(igp)             , intent(in)     :: lst_vefs_gids_dofs_objects_ghost_extended(*)
  type(coarse_fe_iterator_t)                :: coarse_fe_iterator
  type(coarse_fe_accessor_t)                :: coarse_fe
  type(list_iterator_t)                     :: list_iterator
  integer(ip)                               :: base_pointer, current_pointer
  integer(ip)                               :: num_dofs_in_current_cell
  integer(ip)                               :: i, j, ivef
  integer(igp)                              :: vef_gid

  coarse_fe_iterator = this%create_coarse_fe_iterator()
  
  ! Count number of DoFs on each vef of each cell
  if ( this%field_type(field_id) == field_type_cg ) then
     ! In the case of DG coarse FE spaces, the boundary vefs do not have own coarse DoFs, i.e.,
     ! all interior coarse DoFs belong to the interior of the coarse cell
     base_pointer = 1
     i = field_id
     do while ( .not. coarse_fe_iterator%has_finished() ) 
       coarse_fe = coarse_fe_iterator%current()
       ! Traverse all DoFs in current cell
       do j = this%ptr_dofs_per_fe_and_field(i),this%ptr_dofs_per_fe_and_field(i+1)-1
          ! Retrieve vef gid
          vef_gid = lst_vefs_gids_dofs_objects_ghost_extended(j)
          ! Retrieve position of vef_gid in current cell
          ivef = coarse_fe%find_lpos_vef_gid(vef_gid)
          assert (ivef /= -1)
          ! Associate dof to vef
          call this%own_dofs_vef_per_fe(field_id)%sum_to_pointer_index(base_pointer+ivef-1, 1)
       end do
       i = i + this%number_fields
       base_pointer = base_pointer + coarse_fe%get_num_vefs() + 1
       call coarse_fe_iterator%next()
     end do
  else
     check ( .false. )
     !! Not completely implemented yet. The code below compiles, but was not tested. It is just
     !! my guess for the portion of code that should be placed here.
     !! In the case of DG coarse FE spaces, the boundary vefs do not have own coarse DoFs, i.e.,
     !! all interior coarse DoFs belong to the interior of the coarse cell
     !current_pointer = 1
     !i = field_id
     !do while ( .not. cell_iterator%has_finished() ) 
     !  cell => cell_iterator%current()
     !  ! Point to the interior vef in current cell
     !  current_pointer = current_pointer + cell%get_num_vefs()
     !  ! Associate all DoFs in current cell to interior vef 
     !  num_dofs_in_current_cell = this%ptr_dofs_per_fe_and_field(i+1)-this%ptr_dofs_per_fe_and_field(i)
     !  call this%own_dofs_vef_per_fe(field_id)%sum_to_pointer_index(current_pointer, num_dofs_in_current_cell)
     !  i = i + this%number_fields
     !  call cell_iterator%next()
     !end do
  end if
  call this%own_dofs_vef_per_fe(field_id)%calculate_header()
  call this%own_dofs_vef_per_fe(field_id)%allocate_list_from_pointer()
  
  coarse_fe_iterator = this%create_coarse_fe_iterator()
  
  ! List DoFs on each vef of each cell
  if ( this%field_type(field_id) == field_type_cg ) then
     ! In the case of DG coarse FE spaces, the boundary vefs do not have own coarse DoFs, i.e.,
     ! all interior coarse DoFs belong to the interior of the coarse cell
     base_pointer = 1
     i = field_id
     do while ( .not. coarse_fe_iterator%has_finished() ) 
       coarse_fe = coarse_fe_iterator%current()
       ! Traverse all DoFs in current cell
       do j = this%ptr_dofs_per_fe_and_field(i),this%ptr_dofs_per_fe_and_field(i+1)-1
          ! Retrieve vef gid
          vef_gid = lst_vefs_gids_dofs_objects_ghost_extended(j)
          
          ! Retrieve position of vef_gid in current cell
          ivef = coarse_fe%find_lpos_vef_gid(vef_gid)
          assert ( ivef /= -1 )
          ! Associate dof to vef
          list_iterator = this%own_dofs_vef_per_fe(field_id)%create_iterator(base_pointer+ivef-1)
          call list_iterator%set_current(j-this%ptr_dofs_per_fe_and_field(i)+1)
       end do  
       i = i + this%number_fields
       base_pointer = base_pointer + coarse_fe%get_num_vefs() + 1
       call coarse_fe_iterator%next()
     end do
  else
     check ( .false. )
     !! Not completely implemented yet. The code below compiles, but was not tested. It is just
     !! my guess for the portion of code that should be placed here.
     !! In the case of DG coarse FE spaces, the boundary vefs do not have own coarse DoFs, i.e.,
     !! all interior coarse DoFs belong to the interior of the coarse cell
     !current_pointer = 1
     !i = field_id
     !do while ( .not. cell_iterator%has_finished() ) 
     !  cell => cell_iterator%current()
     !  ! Point to the interior vef in current cell
     !  current_pointer = current_pointer + cell%get_num_vefs()
     !  ! Associate all DoFs in current cell to interior vef 
     !  num_dofs_in_current_cell = this%ptr_dofs_per_fe_and_field(i+1)-this%ptr_dofs_per_fe_and_field(i)
     !  list_iterator = this%own_dofs_vef_per_fe(field_id)%create_iterator(current_pointer)
     !  assert ( list_iterator%get_size() == num_dofs_in_current_cell )
     !  
     !  do j=1, num_dofs_in_current_cell
     !    call list_iterator%set_current(j)
     !    call list_iterator%next()
     !  end do
     !  
     !  i = i + this%number_fields
     !  call cell_iterator%next()
     !end do
  end if
end subroutine coarse_fe_space_fill_own_dofs_per_fe_field

subroutine coarse_fe_space_free_free_own_dofs_vef_per_fe (this)
  implicit none
  class(coarse_fe_space_t)        , intent(inout) :: this
  integer(ip) :: i, istat
  if (allocated(this%own_dofs_vef_per_fe)) then
     do i=1, this%number_fields
       call this%own_dofs_vef_per_fe(i)%free()
     end do
     deallocate(this%own_dofs_vef_per_fe, stat=istat)
     check(istat==0)
  end if
end subroutine coarse_fe_space_free_free_own_dofs_vef_per_fe 

subroutine coarse_fe_space_allocate_lst_dofs_lids (this)
  implicit none
  class(coarse_fe_space_t) , intent(in)  :: this
  type(par_environment_t)  , pointer     :: par_environment
  integer(ip)                            :: num_local_cells, num_ghost_cells
  integer(ip)                            :: sz_lst_dofs_lids
  
  par_environment => this%get_par_environment()
  assert ( associated ( par_environment ) )
  assert ( par_environment%am_i_l1_task() )
  
  num_local_cells = this%coarse_triangulation%get_num_local_cells()
  num_ghost_cells = this%coarse_triangulation%get_num_ghost_cells()
  sz_lst_dofs_lids = this%ptr_dofs_per_fe_and_field((num_local_cells+num_ghost_cells)*this%number_fields+1)-1 
  call memalloc (sz_lst_dofs_lids, this%lst_dofs_lids, __FILE__, __LINE__ ) 
end subroutine coarse_fe_space_allocate_lst_dofs_lids

subroutine coarse_fe_space_count_dofs_and_fill_lst_dof_lids( this )
  implicit none
  class(coarse_fe_space_t), intent(inout) :: this 
  type(par_environment_t) , pointer       :: par_environment
  integer(ip)                             :: field_id
  
  assert ( associated(this%coarse_triangulation) )
  par_environment => this%get_par_environment()
  assert ( associated ( par_environment ) )
  assert ( par_environment%am_i_l1_task() )

  this%lst_dofs_lids = -1
  call memalloc( this%number_blocks   , this%number_dofs_per_block, __FILE__, __LINE__ )
  call memalloc( this%number_fields, this%number_dofs_per_field, __FILE__, __LINE__ )
  this%number_dofs_per_block = 0
  this%number_dofs_per_field = 0
  do field_id = 1, this%number_fields
     call this%count_dofs_and_fill_lst_dof_lids_field ( field_id )
  end do
end subroutine coarse_fe_space_count_dofs_and_fill_lst_dof_lids

subroutine coarse_fe_space_count_dofs_and_fill_lst_dof_lids_field ( this, field_id )
  implicit none
  class(coarse_fe_space_t), intent(inout) :: this
  integer(ip)             , intent(in)    :: field_id

  ! Local variables
  integer(ip)                         :: ivef, vef_lid, ielem
  integer(ip)                         :: iblock, init_dof_block, current_dof_block
  integer(ip), allocatable            :: visited_vef_to_coarse_fe_map(:,:)
  type(coarse_fe_iterator_t)          :: coarse_fe_iterator
  type(coarse_fe_accessor_t)          :: coarse_fe
  type(coarse_fe_accessor_t)          :: source_fe
  integer(ip) :: source_ivef

  type(coarse_fe_vef_accessor_t)          :: vef
  type(coarse_fe_accessor_t)              :: coarse_fe_around
  
  iblock            = this%field_blocks(field_id)
  init_dof_block    = this%number_dofs_per_block(iblock)
  current_dof_block = init_dof_block

  call memalloc ( 2, this%coarse_triangulation%get_num_local_vefs(), visited_vef_to_coarse_fe_map,  __FILE__, __LINE__ )
  visited_vef_to_coarse_fe_map = -1

  call source_fe%create(1, this)

  ! Assign local identifiers to DoFs on local cells
  if ( this%field_type(field_id) == field_type_cg ) then
     coarse_fe_iterator = this%create_coarse_fe_iterator()
     do while ( .not. coarse_fe_iterator%has_finished() )
        coarse_fe = coarse_fe_iterator%current()
        if ( coarse_fe%is_local() ) then
           do ivef = 1, coarse_fe%get_num_vefs()
              vef_lid = coarse_fe%get_vef_lid(ivef)
              if ( visited_vef_to_coarse_fe_map ( 1, vef_lid ) == -1 ) then
                 visited_vef_to_coarse_fe_map ( 1, vef_lid ) = coarse_fe%get_lid()
                 visited_vef_to_coarse_fe_map ( 2, vef_lid ) = ivef
                 call coarse_fe%fill_own_dofs_on_vef ( ivef, field_id, current_dof_block  ) 
              else 
                 call source_fe%set_lid(visited_vef_to_coarse_fe_map(1,vef_lid))
                 call coarse_fe%fill_own_dofs_on_vef_from_source_coarse_fe ( ivef, &
                                                                             source_fe, &
                                                                             visited_vef_to_coarse_fe_map(2,vef_lid), &
                                                                             field_id) 
              end if
           end do
        end if
        call coarse_fe_iterator%next()
     end do
     
     coarse_fe_iterator = this%create_coarse_fe_iterator()
     do while ( .not. coarse_fe_iterator%has_finished() )
        coarse_fe = coarse_fe_iterator%current()
        if ( coarse_fe%is_ghost() ) then
          do ivef = 1, coarse_fe%get_num_vefs()
            vef = coarse_fe%get_coarse_fe_vef(ivef)
            if ( vef%is_at_interface() ) then
               do ielem=1, vef%get_num_cells_around()
                 coarse_fe_around = vef%get_coarse_fe_around(ielem)
                 if ( coarse_fe_around%is_local() ) then
                    source_ivef = coarse_fe_around%find_lpos_vef_lid(vef%get_lid())
                    call coarse_fe%fill_own_dofs_on_vef_from_source_coarse_fe ( ivef, &
                                                                                coarse_fe_around, &
                                                                                source_ivef, &
                                                                                field_id) 
                 end if
               end do
            end if
          end do
        end if
        call coarse_fe_iterator%next()
     end do
  else 
     ! field_type_dg not implemented yet!
     check (.false.)
  end if

  call memfree ( visited_vef_to_coarse_fe_map,  __FILE__, __LINE__ )  
  this%number_dofs_per_field(field_id) = current_dof_block - init_dof_block
  this%number_dofs_per_block(iblock) = this%number_dofs_per_block(iblock) + &
       this%number_dofs_per_field(field_id)   
end subroutine coarse_fe_space_count_dofs_and_fill_lst_dof_lids_field

subroutine coarse_fe_space_free_lst_dofs_lids ( this )
  implicit none
  class(coarse_fe_space_t), intent(inout) :: this 
  if ( allocated(this%lst_dofs_lids) ) call memfree(this%lst_dofs_lids, __FILE__, __LINE__ )
end subroutine coarse_fe_space_free_lst_dofs_lids

subroutine coarse_fe_space_free_number_dofs_per_field_and_block ( this )
  implicit none
  class(coarse_fe_space_t), intent(inout) :: this 
  if ( allocated(this%number_dofs_per_field) ) call memfree(this%number_dofs_per_field, __FILE__, __LINE__ )
  if ( allocated(this%number_dofs_per_block) ) call memfree(this%number_dofs_per_block, __FILE__, __LINE__ )
end subroutine coarse_fe_space_free_number_dofs_per_field_and_block

subroutine coarse_fe_space_free_blocks_dof_import ( this )
  implicit none
  class(coarse_fe_space_t), intent(inout) :: this 
  integer(ip) :: i, istat
  do i=1, this%number_blocks
     call this%blocks_dof_import(i)%free()
  end do
  deallocate(this%blocks_dof_import, stat=istat)
  check(istat == 0)
end subroutine coarse_fe_space_free_blocks_dof_import 

function coarse_fe_space_coarse_fe_size ( coarse_fe )
  implicit none
  type(coarse_fe_accessor_t) , intent(in)  :: coarse_fe
  integer(ip) :: coarse_fe_space_coarse_fe_size
  coarse_fe_space_coarse_fe_size = 2*size_of_igp*(coarse_fe%get_number_dofs())
end function coarse_fe_space_coarse_fe_size

subroutine coarse_fe_space_coarse_fe_pack (coarse_fe, dof_gids, vef_gids, buffer)
  implicit none
  type(coarse_fe_accessor_t), intent(in)  :: coarse_fe
  integer(igp)              , intent(in)  :: dof_gids(coarse_fe%get_number_dofs())
  integer(igp)              , intent(in)  :: vef_gids(coarse_fe%get_number_dofs())
  integer(ieep)             , intent(out) :: buffer(:)
  integer(ip)                             :: spos, epos 
  spos = 1
  epos = spos + coarse_fe%get_number_dofs()*size_of_igp - 1
  buffer(spos:epos) = transfer(dof_gids,mold)
  spos = epos + 1
  epos = spos + coarse_fe%get_number_dofs()*size_of_igp - 1
  buffer(spos:epos) = transfer(vef_gids,mold)
end subroutine coarse_fe_space_coarse_fe_pack
  
subroutine coarse_fe_space_coarse_fe_unpack (coarse_fe, buffer, dof_gids, vef_gids)
  implicit none
  type(coarse_fe_accessor_t), intent(inout) :: coarse_fe
  integer(ieep)             , intent(in)    :: buffer(:)
  integer(igp)              , intent(out)   :: dof_gids(coarse_fe%get_number_dofs())
  integer(igp)              , intent(out)   :: vef_gids(coarse_fe%get_number_dofs())
  integer(ip)                               :: spos, epos
  spos = 1
  epos = spos + coarse_fe%get_number_dofs()*size_of_igp - 1
  dof_gids = transfer(buffer(spos:epos), dof_gids)
  spos = epos + 1
  epos = spos + coarse_fe%get_number_dofs()*size_of_igp - 1
  vef_gids = transfer(buffer(spos:epos), vef_gids)
end subroutine coarse_fe_space_coarse_fe_unpack

subroutine coarse_fe_space_compute_blocks_dof_import ( this, lst_dof_gids )
  implicit none
  class(coarse_fe_space_t), intent(inout) :: this
  integer(igp)            , intent(in)    :: lst_dof_gids(*)
  integer(ip)                             :: iblock, istat
  type(par_environment_t), pointer        :: par_environment
  
  assert ( associated(this%coarse_triangulation) )
  par_environment => this%get_par_environment()
  assert ( associated ( par_environment ) )
  assert ( par_environment%am_i_l1_task() )     
  allocate ( this%blocks_dof_import(this%number_blocks), stat=istat )
  check(istat == 0)
  do iblock=1, this%number_blocks
     call this%compute_dof_import(iblock, lst_dof_gids)
  end do
end subroutine coarse_fe_space_compute_blocks_dof_import


subroutine coarse_fe_space_compute_dof_import ( this, iblock, lst_dof_gids )
  implicit none
  class(coarse_fe_space_t), intent(inout) :: this
  integer(ip)             , intent(in)    :: iblock
  integer(igp)            , intent(in)    :: lst_dof_gids(*)

  ! Local raw data
  integer(igp), allocatable    :: raw_interface_data(:,:)
  integer(ip) , allocatable    :: dofs_lid(:)
  integer(ip)                  :: total_ubound_num_itfc_couplings
  integer(ip)                  :: total_num_itfc_couplings
  integer(ip), allocatable     :: ubound_num_itfc_couplings(:)
  integer(ip)                  :: num_fields_in_iblock
  integer(ip)                  :: i, field_id
  type(par_context_t), pointer :: l1_context

  type(par_environment_t), pointer        :: par_environment
  
  assert ( associated(this%coarse_triangulation) )
  par_environment => this%get_par_environment()
  assert ( associated ( par_environment ) )
  assert ( par_environment%am_i_l1_task() )   
  assert ( iblock >= 1 .and. iblock <= this%number_blocks )

  num_fields_in_iblock = 0
  do field_id = 1, this%number_fields
     if ( this%field_blocks(field_id) == iblock ) then
        num_fields_in_iblock = num_fields_in_iblock + 1
     end if
  end do

  call memalloc ( num_fields_in_iblock, ubound_num_itfc_couplings, __FILE__, __LINE__ )
  total_ubound_num_itfc_couplings = 0 
  ubound_num_itfc_couplings = 0
  i = 1
  do field_id = 1, this%number_fields
     if ( this%field_blocks(field_id) == iblock ) then
        if ( this%field_type(field_id) == field_type_cg ) then
           ubound_num_itfc_couplings (i) = this%compute_ubound_num_itfc_couplings_by_continuity(field_id)
        else if ( this%field_type(field_id) == field_type_dg ) then
           ! Not implemented yet
           check(.false.)
           !ubound_num_itfc_couplings (i) = ubound_num_itfc_couplings (i) + &
           !     this%compute_ubound_num_itfc_couplings_by_face_integ(fe_space_id)
        end if
        total_ubound_num_itfc_couplings = total_ubound_num_itfc_couplings + ubound_num_itfc_couplings (i)
        i=i+1                                  
     end if
  end do

  call memalloc ( num_rows_raw_interface_data, &
       total_ubound_num_itfc_couplings, &
       raw_interface_data, __FILE__, __LINE__ )

  call memalloc ( total_ubound_num_itfc_couplings, dofs_lid, __FILE__, __LINE__)

  total_num_itfc_couplings = 0
  i = 1
  do field_id = 1, this%number_fields
     if ( this%field_blocks(field_id) == iblock ) then
        if ( this%field_type(field_id) == field_type_cg ) then
           total_num_itfc_couplings = total_num_itfc_couplings + & 
                this%compute_raw_interface_data_by_continuity(field_id, &
                                                              lst_dof_gids, &
                                                              total_num_itfc_couplings, &
                                                              ubound_num_itfc_couplings(i),&
                                                              dofs_lid,&
                                                              raw_interface_data )
        else if ( this%field_type(field_id) == field_type_dg ) then
           ! Not implemented yet
           check(.false.)
           !total_num_itfc_couplings = total_num_itfc_couplings + & 
           !     this%compute_raw_interface_data_by_face_integ(fe_space_id, &
           !                                                   total_num_itfc_couplings, &
           !                                                   ubound_num_itfc_couplings(i),&
           !                                                   dofs_lid,&
           !                                                   raw_interface_data )      
        end if
        i=i+1                                  
     end if
  end do

  l1_context => par_environment%get_l1_context()
  call this%blocks_dof_import(iblock)%create(l1_context%get_rank()+1, &
                                             l1_context%get_size(), &
                                             this%number_dofs_per_block(iblock), &
                                             total_num_itfc_couplings, &
                                             dofs_lid, &
                                             raw_interface_data )

  call memfree ( ubound_num_itfc_couplings, __FILE__, __LINE__ )                
  call memfree ( raw_interface_data, __FILE__, __LINE__ )
  call memfree ( dofs_lid, __FILE__, __LINE__ )
end subroutine coarse_fe_space_compute_dof_import

function coarse_fe_space_compute_ubound_num_itfc_couplings_by_continuity( this, field_id )
  implicit none
  class(coarse_fe_space_t), intent(inout) :: this
  integer(ip)             , intent(in)    :: field_id
  integer(ip)                             :: coarse_fe_space_compute_ubound_num_itfc_couplings_by_continuity

  integer(ip)  :: mypart_id, local_part_id
  integer(ip)  :: ivef, ielem
 
  integer(ip)                         :: result
  logical, allocatable                :: touched_neighbours(:)
  type(par_context_t)    , pointer    :: l1_context
  type(par_environment_t), pointer    :: par_environment
  type(cell_import_t)    , pointer    :: cell_import
  type(itfc_coarse_fe_vef_iterator_t) :: itfc_coarse_fe_vef_iterator
  type(coarse_fe_vef_accessor_t)      :: coarse_fe_vef
  type(coarse_fe_accessor_t)          :: coarse_fe
  type(list_iterator_t)               :: own_dofs_on_vef_iterator


  assert ( associated(this%coarse_triangulation) )
  par_environment => this%get_par_environment()
  assert ( associated ( par_environment ) )
  assert ( par_environment%am_i_l1_task() )   
  
  l1_context => par_environment%get_l1_context()
  mypart_id = l1_context%get_rank() + 1 
  cell_import => this%coarse_triangulation%get_cell_import()
  
  call memalloc ( cell_import%get_number_neighbours(), &
                  touched_neighbours, &
                  __FILE__, __LINE__ )

  itfc_coarse_fe_vef_iterator = this%create_itfc_coarse_fe_vef_iterator()
  result = 0 
  do while ( .not. itfc_coarse_fe_vef_iterator%has_finished() )
    touched_neighbours = .false.
    coarse_fe_vef = itfc_coarse_fe_vef_iterator%current()
    do ielem=1, coarse_fe_vef%get_num_coarse_fes_around()
       coarse_fe = coarse_fe_vef%get_coarse_fe_around(ielem)
       if ( coarse_fe%get_mypart() /= mypart_id ) then
          local_part_id = cell_import%get_local_neighbour_id(coarse_fe%get_mypart())
          if (.not. touched_neighbours (local_part_id)) then
             touched_neighbours (local_part_id) = .true.
             ivef = coarse_fe%find_lpos_vef_lid(coarse_fe_vef%get_lid())
             assert (ivef /= -1)
             own_dofs_on_vef_iterator = coarse_fe%create_own_dofs_on_vef_iterator(ivef,field_id)
             result = result + own_dofs_on_vef_iterator%get_size()
          end if       
       end if
    end do
    call itfc_coarse_fe_vef_iterator%next()
  end do 
  
  coarse_fe_space_compute_ubound_num_itfc_couplings_by_continuity = result

  call memfree ( touched_neighbours, __FILE__, __LINE__ )
end function coarse_fe_space_compute_ubound_num_itfc_couplings_by_continuity

function coarse_fe_space_compute_raw_interface_data_by_continuity (  this, &
                                                                     field_id, &
                                                                     lst_dofs_gids, &
                                                                     offset, &
                                                                     ubound_num_itfc_couplings, &
                                                                     dofs_lid, &
                                                                     raw_interface_data ) result(num_itfc_couplings)
  implicit none
  class(coarse_fe_space_t), intent(inout) :: this
  integer(ip)          , intent(in)       :: field_id
  integer(igp)         , intent(in)       :: lst_dofs_gids(*)
  integer(ip)          , intent(in)       :: offset
  integer(ip)          , intent(in)       :: ubound_num_itfc_couplings
  integer(ip)          , intent(inout)    :: dofs_lid(:)
  integer(igp)         , intent(inout)    :: raw_interface_data(:, :)
  integer(ip)                             :: num_itfc_couplings

  ! Locals
  integer(ip)  :: ivef, ielem
  integer(ip)  :: mypart_id, part_id
  integer(ip)  :: col, init_col, current_col
  integer(ip)  :: num_parts, local_part_id, ipart
  integer(ip)  :: max_part_id
  integer(ip)  :: dof_lid
  integer(igp) :: dof_gid
  
  logical     , allocatable :: touched_neighbours(:)
  integer(ip), allocatable  :: parts_visited(:)
  integer(ip), allocatable  :: dofs_max_part_id(:)
  integer(ip)               :: base_pos_lst_dofs
  type(par_context_t)    , pointer :: l1_context
  type(par_environment_t), pointer :: par_environment
  type(cell_import_t) , pointer :: cell_import
  type(itfc_coarse_fe_vef_iterator_t) :: itfc_coarse_fe_vef_iterator
  type(coarse_fe_vef_accessor_t)      :: coarse_fe_vef
  type(list_iterator_t)               :: own_dofs_on_vef_iterator
  type(coarse_fe_accessor_t)          :: coarse_fe
  


  assert ( associated(this%coarse_triangulation) )
  par_environment => this%get_par_environment()
  assert ( associated ( par_environment ) )
  assert ( par_environment%am_i_l1_task() )  
  
  cell_import => this%coarse_triangulation%get_cell_import()
  l1_context => par_environment%get_l1_context()
  mypart_id = l1_context%get_rank() + 1

  call memalloc ( ubound_num_itfc_couplings, dofs_max_part_id, __FILE__, __LINE__ )
  call memalloc ( cell_import%get_number_neighbours(), &
                  touched_neighbours, &
                  __FILE__, __LINE__ )
  call memalloc ( cell_import%get_number_neighbours(), &
                  parts_visited, &
                  __FILE__, __LINE__ )
  
  current_col  = offset + 1

  itfc_coarse_fe_vef_iterator = this%create_itfc_coarse_fe_vef_iterator()
  do while ( .not. itfc_coarse_fe_vef_iterator%has_finished() )
     coarse_fe_vef = itfc_coarse_fe_vef_iterator%current()
     touched_neighbours = .false.
     num_parts = 0
     max_part_id = mypart_id
     
     ! Find the list of parts around current itfc vef
     do ielem=1, coarse_fe_vef%get_num_coarse_fes_around()
        coarse_fe = coarse_fe_vef%get_coarse_fe_around(ielem)
        part_id = coarse_fe%get_mypart()
        if ( part_id /= mypart_id ) then 
           local_part_id = cell_import%get_local_neighbour_id(part_id)
           if ( .not. touched_neighbours(local_part_id) ) then
              touched_neighbours (local_part_id) = .true.
              num_parts = num_parts + 1
              parts_visited (num_parts) = part_id
              max_part_id = max(part_id, max_part_id)
           end if
        end if
     end do  
     
     coarse_fe = coarse_fe_vef%get_coarse_fe_around(1)
     ivef = coarse_fe%find_lpos_vef_lid(coarse_fe_vef%get_lid())
     base_pos_lst_dofs = coarse_fe%get_scan_sum_number_dofs(field_id)
     own_dofs_on_vef_iterator = coarse_fe%create_own_dofs_on_vef_iterator(ivef,field_id)
     init_col = current_col
     ! Traverse the dofs on top of current vef
     do while (.not. own_dofs_on_vef_iterator%is_upper_bound())     
        dof_gid = lst_dofs_gids(base_pos_lst_dofs+own_dofs_on_vef_iterator%get_current()) 
        dof_lid = this%lst_dofs_lids(base_pos_lst_dofs+own_dofs_on_vef_iterator%get_current())
        do ipart=1, num_parts
           part_id = parts_visited(ipart)
           dofs_lid ( current_col ) = dof_lid 
           dofs_max_part_id ( current_col-offset ) = max_part_id
           raw_interface_data(neighbor_part_id_row, current_col) = part_id
           raw_interface_data(dof_gid_row, current_col) = dof_gid
           raw_interface_data(owner_flag_row, current_col) = num_parts + 1
           current_col = current_col + 1
        end do
        call own_dofs_on_vef_iterator%next()
     end do     
  call itfc_coarse_fe_vef_iterator%next()
end do
  
  ! Free touch arrays
  call memfree ( parts_visited, __FILE__, __LINE__ )
  call memfree ( touched_neighbours, __FILE__, __LINE__ )

  call this%raw_interface_data_by_continuity_decide_owner (offset, &
                                                           current_col-1, &
                                                           raw_interface_data,&
                                                           dofs_max_part_id,&
                                                           dofs_lid)
  
  call memfree ( dofs_max_part_id, __FILE__, __LINE__ )

  num_itfc_couplings = current_col-1 
end function coarse_fe_space_compute_raw_interface_data_by_continuity

subroutine coarse_fe_space_raw_interface_data_by_continuity_decide_owner ( this, &
                                                                        offset, &
                                                                        num_cols, &
                                                                        raw_interface_data, &
                                                                        dofs_max_part_id,  &
                                                                        dofs_lid)
  implicit none
  class(coarse_fe_space_t), intent(in) :: this
  integer(ip)          , intent(in)    :: offset
  integer(ip)          , intent(in)    :: num_cols
  integer(igp)         , intent(inout) :: raw_interface_data(:,:)
  integer(ip)          , intent(inout) :: dofs_max_part_id(:)
  integer(ip)          , intent(inout) :: dofs_lid(:)

  integer(igp)                     :: l1(num_rows_raw_interface_data), l2(num_rows_raw_interface_data)
  integer(ip) , allocatable        :: perm(:)
  integer(ip) , allocatable        :: aux(:)
  integer(ip)                      :: start_col, end_col, col, mypart_id, ipart_max, j, size
  type(par_context_t)    , pointer :: l1_context
  type(par_environment_t), pointer :: par_environment


  !do col=1,num_cols
  !  write(*,"(10i10)") col, dofs_lid(col), dofs_max_part_id(col), raw_interface_data(:,col)
  !end do 
  !write(*,*) '============================================================================='

  if ( num_cols-offset == 0 ) return
  
  call memalloc ( num_cols-offset, aux, __FILE__, __LINE__ )
  call memalloc ( num_cols-offset, perm, __FILE__, __LINE__ )
  do col=1, num_cols-offset
     perm(col) = col
  end do

  ! Re-number interface DoF couplings in increasing order by neighbour part id, the
  ! number of neighbour parts around, and e_max + local_pos_dof_in_emax
  call sort_array_cols_by_row_section( num_rows_raw_interface_data, &
                                       num_rows_raw_interface_data, &
                                       num_cols-offset, &
                                       raw_interface_data(1:,offset+1:num_cols), &
                                       perm, &
                                       l1, &
                                       l2)

  aux = dofs_max_part_id(1:num_cols-offset)
  do col=1, num_cols-offset
     dofs_max_part_id(col) = aux(perm(col))
  end do

  aux = dofs_lid(offset+1:num_cols)
  do col=1, num_cols-offset
     dofs_lid(offset+col) = aux(perm(col))
  end do

  call memfree ( perm, __FILE__, __LINE__ )
  call memfree ( aux, __FILE__, __LINE__ )

  par_environment => this%get_par_environment()
  l1_context      => par_environment%get_l1_context()
  mypart_id       = l1_context%get_rank() + 1

  col = offset + 1
  do while ( col <= num_cols ) 
     if ( raw_interface_data ( owner_flag_row, col ) == 2 ) then
        start_col = col
        do while  (raw_interface_data ( owner_flag_row, col ) == 2)
           col = col + 1
           if ( col > num_cols ) exit
        end do
        end_col = col - 1

        ipart_max = dofs_max_part_id(start_col-offset)
        size = end_col - start_col + 1
        if ( mypart_id == ipart_max ) then
           do j= start_col, start_col + size/2 -1
              raw_interface_data ( owner_flag_row, j) = owner
           end do
           do j= start_col + size/2,  end_col
              raw_interface_data ( owner_flag_row, j) = non_owner
           end do
        else
           do j= start_col, start_col + size/2 -1
              raw_interface_data ( owner_flag_row, j) = non_owner
           end do
           do j= start_col + size/2,  end_col
              raw_interface_data ( owner_flag_row, j) = owner
           end do
        end if
     else
        if ( mypart_id == dofs_max_part_id(col-offset) ) then
           raw_interface_data ( owner_flag_row, col) = owner
        else
           if ( raw_interface_data ( neighbor_part_id_row, col) == dofs_max_part_id(col-offset) ) then
              raw_interface_data ( owner_flag_row, col) = non_owner
           else
              raw_interface_data ( owner_flag_row, col) = uncoupled
           end if
        end if
        col = col +1
     end if

  end do

  !do col=1,num_cols
  !  write(*,"(10i10)") col, dofs_lid(col), dofs_max_part_id(col), raw_interface_data(:,col)
  !end do 

end subroutine coarse_fe_space_raw_interface_data_by_continuity_decide_owner


subroutine coarse_fe_space_setup_dofs_objects_and_constraint_matrix ( this, &
                                                                      num_dofs_objects_per_field, &
                                                                      dofs_objects_per_field, &
                                                                      dofs_objects_gids_per_field, &
                                                                      vefs_lids_dofs_objects_per_field, &
                                                                      constraint_matrix)
  implicit none
  class(coarse_fe_space_t)                   , intent(inout) :: this
  integer(ip)                   , allocatable, intent(inout) :: num_dofs_objects_per_field(:)
  type(list_t)                  , allocatable, intent(inout) :: dofs_objects_per_field(:)
  type(allocatable_array_igp1_t), allocatable, intent(inout) :: dofs_objects_gids_per_field(:)
  type(allocatable_array_ip1_t) , allocatable, intent(inout) :: vefs_lids_dofs_objects_per_field(:)
  type(coo_sparse_matrix_t)                  , intent(inout) :: constraint_matrix
  
  integer(ip)                       :: istat, field_id
  type(par_environment_t), pointer  :: par_environment
  
  ! This routine only works temporarily for single scalar-valued reference FE cases
  ! We should think about:
  !  * How should it work for single vector-valued reference FE cases? (next more general case)
  !  * How should it work for arbitrary composite cases ? (most general case)
  assert ( this%number_fields == 1 )
  assert ( associated(this%coarse_triangulation) )
  par_environment => this%get_par_environment()
  assert ( associated ( par_environment ) )
  assert ( par_environment%am_i_l1_task() )   
  
  ! On the other hand, we should have control over on which type (accordingly to their dimension) of coarse vefs we want to put DoFs.
  ! E.g., either on vertices, vertices+edges, or just on faces. This is currently a MLBDDC preconditioner parameter
  ! so that this seems to indicate that type(coarse_fe_space_t) is not the proper place to store coarse DoF-related
  ! data and code. For simplicity, I will temporarily place associated data and code within type(coarse_fe_space_t), but I
  ! am pretty convinced that it should be moved to another place in the future.
  if (allocated(num_dofs_objects_per_field)) then 
    call memfree ( num_dofs_objects_per_field, __FILE__, __LINE__ )
  end if
  
  if (allocated(dofs_objects_per_field)) then
    do field_id=1, size(dofs_objects_per_field)
      call dofs_objects_per_field(field_id)%free()
    end do  
    deallocate ( dofs_objects_per_field, stat=istat )
    check (istat == 0)  
  end if
  
  if (allocated(dofs_objects_gids_per_field)) then
    do field_id=1, size(dofs_objects_gids_per_field)
      call dofs_objects_gids_per_field(field_id)%free()
    end do  
    deallocate ( dofs_objects_gids_per_field, stat=istat )
    check (istat == 0)  
  end if
  
  if (allocated(vefs_lids_dofs_objects_per_field)) then
    do field_id=1, size(vefs_lids_dofs_objects_per_field)
      call vefs_lids_dofs_objects_per_field(field_id)%free()
    end do  
    deallocate ( vefs_lids_dofs_objects_per_field, stat=istat )
    check (istat == 0)  
  end if
  
  call memalloc ( this%number_fields, num_dofs_objects_per_field, __FILE__, __LINE__ )
  
  allocate ( dofs_objects_per_field(this%number_fields), stat=istat )
  check ( istat == 0 )
  
  allocate ( dofs_objects_gids_per_field(this%number_fields), stat=istat )
  check ( istat == 0 )
  
  allocate ( vefs_lids_dofs_objects_per_field(this%number_fields), stat=istat )
  check ( istat == 0 )
  
  do field_id=1, this%number_fields
    if ( this%field_type(field_id) == field_type_cg ) then
      call this%setup_dofs_objects_by_continuity(field_id, &
                                                 num_dofs_objects_per_field(field_id), &
                                                 dofs_objects_per_field(field_id), &
                                                 dofs_objects_gids_per_field(field_id), & 
                                                 vefs_lids_dofs_objects_per_field(field_id) )
    else if ( this%field_type(field_id) == field_type_dg ) then
      ! Not implemented yet
      check(.false.)
    end if
  end do
  
  call this%setup_constraint_matrix( block_id               = 1,                      &
                                     dofs_objects_per_field = dofs_objects_per_field, &
                                     constraint_matrix      = constraint_matrix )
end subroutine coarse_fe_space_setup_dofs_objects_and_constraint_matrix

subroutine coarse_fe_space_setup_dofs_objects_by_continuity ( this, &
                                                              field_id, &
                                                              num_dofs_objects, &
                                                              dofs_objects, &
                                                              dofs_objects_gids, &
                                                              vefs_lids_dofs_objects)
  implicit none
  class(coarse_fe_space_t)      , intent(inout)  :: this
  integer(ip)                   , intent(in)     :: field_id
  integer(ip)                   , intent(inout)  :: num_dofs_objects
  type(list_t)                  , intent(inout)  :: dofs_objects
  type(allocatable_array_igp1_t), intent(inout)  :: dofs_objects_gids
  type(allocatable_array_ip1_t) , intent(inout)  :: vefs_lids_dofs_objects
  
  type(list_iterator_t)                :: vefs_object_iterator, dofs_object_iterator
  integer(ip)                          :: iobj_vef, iobj_dof, elem_lid, vef_lid, ivef
  integer(ip)                          :: idof_interior, idof, dof_lid
  integer(ip)                          :: number_dofs_on_vef_object
  integer(ip)                          :: offset, i
  logical                              :: dofs_on_vef
  integer(ip)                          :: current_dof_object
  integer(ip)                          :: base_pos_lst_dofs
  type(par_environment_t), pointer     :: par_environment
  type(coarse_fe_object_iterator_t)          :: object_iterator
  type(coarse_fe_object_accessor_t)          :: object
  type(coarse_fe_vefs_on_object_iterator_t)  :: vefs_on_object_iterator
  type(coarse_fe_vef_accessor_t)             :: vef
  type(coarse_fe_accessor_t)                 :: coarse_fe
  type(list_iterator_t)                      :: own_dofs_on_vef_iterator
  
  assert ( this%number_fields == 1 )
  assert ( associated(this%coarse_triangulation) )
  par_environment => this%get_par_environment()
  assert ( associated ( par_environment ) )
  assert ( par_environment%am_i_l1_task() )
  
  num_dofs_objects = 0
  
  object_iterator = this%create_coarse_fe_object_iterator()
  do while ( .not. object_iterator%has_finished() )
     object = object_iterator%current()
     vefs_on_object_iterator = object%create_coarse_fe_vefs_on_object_iterator()
     do while ( .not. vefs_on_object_iterator%has_finished() )
       vef = vefs_on_object_iterator%current()
       coarse_fe = vef%get_coarse_fe_around(1)
       ivef = coarse_fe%find_lpos_vef_lid(vef%get_lid())
       own_dofs_on_vef_iterator = coarse_fe%create_own_dofs_on_vef_iterator(ivef, field_id)
       if ( own_dofs_on_vef_iterator%get_size() > 0 ) then
         num_dofs_objects = num_dofs_objects + 1
         exit
       end if
       call vefs_on_object_iterator%next()
     end do 
     call object_iterator%next()
  end do
  
  ! Count number of dofs per dof object; set dofs_objects_gids
  call dofs_objects%create(num_dofs_objects)
  call dofs_objects_gids%create(num_dofs_objects)
  call vefs_lids_dofs_objects%create(num_dofs_objects)
  
  current_dof_object = 1
  call object_iterator%init()
  do while ( .not. object_iterator%has_finished() )
     number_dofs_on_vef_object = 0
     object = object_iterator%current()
     vefs_on_object_iterator = object%create_coarse_fe_vefs_on_object_iterator()
     do while ( .not. vefs_on_object_iterator%has_finished() )
       vef = vefs_on_object_iterator%current()
       coarse_fe = vef%get_coarse_fe_around(1)
       ivef = coarse_fe%find_lpos_vef_lid(vef%get_lid())
       own_dofs_on_vef_iterator = coarse_fe%create_own_dofs_on_vef_iterator(ivef, field_id)
       number_dofs_on_vef_object = number_dofs_on_vef_object + own_dofs_on_vef_iterator%get_size() 
       call vefs_on_object_iterator%next()
     end do 
     if ( number_dofs_on_vef_object > 0 ) then
       dofs_objects_gids%a(current_dof_object) = object%get_gid()
       vefs_lids_dofs_objects%a(current_dof_object) = object%get_lid()
       call dofs_objects%sum_to_pointer_index(current_dof_object, number_dofs_on_vef_object)
       current_dof_object = current_dof_object + 1
     end if
     call object_iterator%next()
  end do
  
  call dofs_objects%calculate_header()
  call dofs_objects%allocate_list_from_pointer()
  do iobj_dof=1, dofs_objects%get_num_pointers()
     dofs_object_iterator = dofs_objects%create_iterator(iobj_dof)
     iobj_vef = vefs_lids_dofs_objects%a(iobj_dof)
     vefs_on_object_iterator = this%create_coarse_fe_vefs_on_object_iterator(iobj_vef)
     do while ( .not. vefs_on_object_iterator%has_finished() )
       vef = vefs_on_object_iterator%current()
       coarse_fe = vef%get_coarse_fe_around(1)
       ivef = coarse_fe%find_lpos_vef_lid(vef%get_lid())
       own_dofs_on_vef_iterator = coarse_fe%create_own_dofs_on_vef_iterator(ivef, field_id)
       
       base_pos_lst_dofs = coarse_fe%get_scan_sum_number_dofs(field_id)
       do while (.not. own_dofs_on_vef_iterator%is_upper_bound())
          dof_lid = this%lst_dofs_lids(base_pos_lst_dofs+own_dofs_on_vef_iterator%get_current())
          call dofs_object_iterator%set_current(dof_lid)
          call dofs_object_iterator%next()
          call own_dofs_on_vef_iterator%next()
       end do
       call vefs_on_object_iterator%next()
     end do
  end do
end subroutine coarse_fe_space_setup_dofs_objects_by_continuity

subroutine coarse_fe_space_setup_constraint_matrix ( this, &
                                                     block_id, &
                                                     dofs_objects_per_field, &
                                                     constraint_matrix )
   implicit none
   class(coarse_fe_space_t)     , intent(in)     :: this
   integer(ip)               , intent(in)        :: block_id
   type(list_t)              , intent(in)        :: dofs_objects_per_field(this%number_fields)
   type(coo_sparse_matrix_t) , intent(inout)     :: constraint_matrix
   
   real(rp)              :: constraint_matrix_entry
   integer(ip)           :: field_id
   integer(ip)           :: num_rows, num_cols 
   integer(ip)           :: row_offset, i, j
   integer(ip)           :: num_dofs_current_row
   type(list_iterator_t) :: dofs_on_current_object
   
   assert ( this%number_fields == 1 )
   assert ( block_id == 1 ) 
   assert ( this%number_blocks == 1 )
   
   ! Free any dynamic memory that constraint_matrix may have inside
   call constraint_matrix%free()
   
   num_cols = this%number_dofs_per_block(block_id)

   num_rows = 0
   do field_id = 1, this%number_fields
     if ( this%field_blocks(field_id) == block_id  ) then
         num_rows = num_rows + dofs_objects_per_field(field_id)%get_num_pointers()
     end if
   end do
   
   ! Create constraint matrix (transposed)
   call constraint_matrix%create ( num_cols, num_rows )
   
   ! Fill constraint matrix entries (transposed)
   row_offset = 0
   do field_id = 1, this%number_fields
     if ( this%field_blocks(field_id) == block_id  ) then
         do i=1, dofs_objects_per_field(field_id)%get_num_pointers()
             dofs_on_current_object  = dofs_objects_per_field(field_id)%create_iterator(i)
             num_dofs_current_row    = dofs_on_current_object%get_size()
             constraint_matrix_entry = 1.0_rp/real(num_dofs_current_row,rp)
             do while ( .not. dofs_on_current_object%is_upper_bound() )
               j = dofs_on_current_object%get_current()
               call constraint_matrix%insert(j, row_offset+i, constraint_matrix_entry)
               call dofs_on_current_object%next()
             end do
         end do
         row_offset = row_offset + dofs_objects_per_field(field_id)%get_num_pointers()
     end if
   end do
   call constraint_matrix%sort_and_compress()
end subroutine coarse_fe_space_setup_constraint_matrix

subroutine coarse_fe_space_renumber_dofs_first_interior_then_interface( this )
  implicit none
  class(coarse_fe_space_t), intent(inout) :: this 
  type(par_environment_t), pointer        :: par_environment
  integer(ip)                             :: iblock
  integer(ip)            , allocatable    :: perm_old2new_block(:)
  
  par_environment => this%get_par_environment()
  if ( par_environment%am_i_l1_task() ) then
    do iblock=1, this%get_number_blocks()
      call memalloc (this%number_dofs_per_block(iblock), perm_old2new_block, __FILE__, __LINE__)
      call this%blocks_dof_import(iblock)%fill_first_I_then_G_renumbering(perm_old2new_block)
      call this%renumber_dofs_block(iblock, perm_old2new_block)
      call this%blocks_dof_import(iblock)%renumber_dofs(perm_old2new_block)
      call memfree (perm_old2new_block, __FILE__, __LINE__)
    end do
  end if
end subroutine coarse_fe_space_renumber_dofs_first_interior_then_interface

subroutine coarse_fe_space_renumber_dofs_block (this, block_id, perm_old2new)
  implicit none
  class(coarse_fe_space_t)   , intent(inout) :: this
  integer(ip)                , intent(in)    :: block_id
  integer(ip)                , intent(in)    :: perm_old2new(this%number_dofs_per_block(block_id))
  type(par_environment_t)    , pointer       :: par_environment
  
  type(coarse_fe_iterator_t)                 :: coarse_fe_iterator
  type(coarse_fe_accessor_t)                 :: coarse_fe
  
  par_environment => this%get_par_environment()
  assert ( par_environment%am_i_l1_task() )
  
  coarse_fe_iterator = this%create_coarse_fe_iterator()
  do while ( .not. coarse_fe_iterator%has_finished() ) 
    coarse_fe = coarse_fe_iterator%current()
    call coarse_fe%renumber_dofs_block ( block_id, perm_old2new )
    call coarse_fe_iterator%next()
  end do
end subroutine coarse_fe_space_renumber_dofs_block

function coarse_fe_space_create_coarse_fe_iterator ( this )
  implicit none
  class(coarse_fe_space_t), intent(in) :: this
  type(coarse_fe_iterator_t) :: coarse_fe_space_create_coarse_fe_iterator
  call coarse_fe_space_create_coarse_fe_iterator%create(1, this)
end function coarse_fe_space_create_coarse_fe_iterator

function coarse_fe_space_create_coarse_fe_vef_iterator ( this )
  implicit none
  class(coarse_fe_space_t), intent(in) :: this
  type(coarse_fe_vef_iterator_t) :: coarse_fe_space_create_coarse_fe_vef_iterator
  call coarse_fe_space_create_coarse_fe_vef_iterator%create(1, this)
end function coarse_fe_space_create_coarse_fe_vef_iterator

function coarse_fe_space_create_itfc_coarse_fe_vef_iterator ( this )
  implicit none
  class(coarse_fe_space_t), intent(in) :: this
  type(itfc_coarse_fe_vef_iterator_t) :: coarse_fe_space_create_itfc_coarse_fe_vef_iterator
  call coarse_fe_space_create_itfc_coarse_fe_vef_iterator%create(this)
end function coarse_fe_space_create_itfc_coarse_fe_vef_iterator

  function coarse_fe_space_create_coarse_fe_object_iterator(this)
    implicit none
    class(coarse_fe_space_t), intent(in) :: this
    type(coarse_fe_object_iterator_t) :: coarse_fe_space_create_coarse_fe_object_iterator
    call coarse_fe_space_create_coarse_fe_object_iterator%create(1,this)
  end function coarse_fe_space_create_coarse_fe_object_iterator
  
  function coarse_fe_space_create_coarse_fe_vefs_on_object_iterator(this, lid)
    implicit none
    class(coarse_fe_space_t), intent(in) :: this
    integer(ip)                           , intent(in) :: lid
    type(coarse_fe_vefs_on_object_iterator_t)                    :: coarse_fe_space_create_coarse_fe_vefs_on_object_iterator
    call coarse_fe_space_create_coarse_fe_vefs_on_object_iterator%create(lid, this)
  end function coarse_fe_space_create_coarse_fe_vefs_on_object_iterator
  
  function coarse_fe_space_get_par_environment(this)
    implicit none
    class(coarse_fe_space_t), intent(in) :: this
    type(par_environment_t)  , pointer   :: coarse_fe_space_get_par_environment
    coarse_fe_space_get_par_environment => this%coarse_triangulation%get_par_environment()
  end function coarse_fe_space_get_par_environment
  
  function coarse_fe_space_get_number_local_coarse_fes (this)
    implicit none
    class(coarse_fe_space_t), intent(in) :: this 
    integer(ip)                          :: coarse_fe_space_get_number_local_coarse_fes
    coarse_fe_space_get_number_local_coarse_fes = this%coarse_triangulation%get_num_local_cells()
  end function coarse_fe_space_get_number_local_coarse_fes
  
  function coarse_fe_space_get_number_ghost_coarse_fes (this)
    implicit none
    class(coarse_fe_space_t), intent(in) :: this 
    integer(ip)                          :: coarse_fe_space_get_number_ghost_coarse_fes
    coarse_fe_space_get_number_ghost_coarse_fes = this%coarse_triangulation%get_num_ghost_cells()
  end function coarse_fe_space_get_number_ghost_coarse_fes
  
  
  function coarse_fe_space_get_number_fields( this)
    implicit none
    class(coarse_fe_space_t), intent(in) :: this 
    integer(ip) :: coarse_fe_space_get_number_fields
    coarse_fe_space_get_number_fields = this%number_fields
  end function coarse_fe_space_get_number_fields
  
  function coarse_fe_space_get_number_blocks( this)
    implicit none
    class(coarse_fe_space_t), intent(in) :: this 
    integer(ip) :: coarse_fe_space_get_number_blocks
    coarse_fe_space_get_number_blocks = this%number_blocks
  end function coarse_fe_space_get_number_blocks
  
  
  function coarse_fe_space_get_total_number_dofs ( this )
   implicit none
   class(coarse_fe_space_t), intent(in) :: this
   integer(ip)                          :: coarse_fe_space_get_total_number_dofs
   type(par_environment_t), pointer     :: par_environment
   integer(ip)                          :: block_id
   par_environment => this%get_par_environment()
   coarse_fe_space_get_total_number_dofs = 0
   if ( par_environment%am_i_l1_task() ) then
     do block_id = 1, this%get_number_blocks()
      coarse_fe_space_get_total_number_dofs = coarse_fe_space_get_total_number_dofs + &
                                              this%number_dofs_per_block(block_id)
    end do 
   end if
  end function coarse_fe_space_get_total_number_dofs

function coarse_fe_space_get_field_number_dofs( this, field_id )
   implicit none
   class(coarse_fe_space_t), intent(in) :: this
   integer(ip)          , intent(in) :: field_id
   integer(ip)                       :: coarse_fe_space_get_field_number_dofs
   type(par_environment_t), pointer  :: par_environment
   par_environment => this%get_par_environment()
   coarse_fe_space_get_field_number_dofs = 0
   if ( par_environment%am_i_l1_task() ) then
     coarse_fe_space_get_field_number_dofs = this%number_dofs_per_field(field_id)
   end if
end function coarse_fe_space_get_field_number_dofs

function coarse_fe_space_get_block_number_dofs ( this, block_id )
   implicit none
   class(coarse_fe_space_t), intent(in) :: this
   integer(ip)          , intent(in) :: block_id
   integer(ip)                       :: coarse_fe_space_get_block_number_dofs
   type(par_environment_t), pointer  :: par_environment
   par_environment => this%get_par_environment()
   coarse_fe_space_get_block_number_dofs = 0
   if ( par_environment%am_i_l1_task() ) then
     coarse_fe_space_get_block_number_dofs = this%number_dofs_per_block(block_id)
   end if
end function coarse_fe_space_get_block_number_dofs

function coarse_fe_space_get_total_number_interior_dofs ( this )
   implicit none
   class(coarse_fe_space_t), intent(in) :: this
   integer(ip)                       :: coarse_fe_space_get_total_number_interior_dofs
   type(par_environment_t), pointer  :: par_environment
   integer(ip) :: block_id
   par_environment => this%get_par_environment()
   coarse_fe_space_get_total_number_interior_dofs = 0
   if ( par_environment%am_i_l1_task() ) then
    do block_id = 1, this%get_number_blocks()
      coarse_fe_space_get_total_number_interior_dofs = coarse_fe_space_get_total_number_interior_dofs + &
                                                     this%get_block_number_interior_dofs(block_id)
    end do 
   end if
end function coarse_fe_space_get_total_number_interior_dofs 

function coarse_fe_space_get_total_number_interface_dofs ( this )
   implicit none
   class(coarse_fe_space_t), intent(in) :: this
   integer(ip)                       :: coarse_fe_space_get_total_number_interface_dofs
   type(par_environment_t), pointer  :: par_environment
   integer(ip) :: block_id
   par_environment => this%get_par_environment()
   coarse_fe_space_get_total_number_interface_dofs = 0
   if ( par_environment%am_i_l1_task() ) then
      do block_id = 1, this%get_number_blocks()
        coarse_fe_space_get_total_number_interface_dofs = coarse_fe_space_get_total_number_interface_dofs + &
                                                       this%get_block_number_interface_dofs(block_id)
      end do
   end if
end function coarse_fe_space_get_total_number_interface_dofs

function coarse_fe_space_get_block_number_interior_dofs ( this, block_id )
   implicit none
   class(coarse_fe_space_t), intent(in) :: this
   integer(ip)          , intent(in) :: block_id
   integer(ip)                       :: coarse_fe_space_get_block_number_interior_dofs
      type(par_environment_t), pointer  :: par_environment
   par_environment => this%get_par_environment()
   coarse_fe_space_get_block_number_interior_dofs = 0
   if ( par_environment%am_i_l1_task() ) then
     coarse_fe_space_get_block_number_interior_dofs = this%blocks_dof_import(block_id)%get_number_interior_dofs()
   end if
end function coarse_fe_space_get_block_number_interior_dofs

! TBP temporarily required by type(mlbddc_t) in order to create
! the type(par_sparse_matrix_t) data structure holding the coarse-grid
! matrix.
function coarse_fe_space_get_block_dof_import ( this, block_id )
  implicit none
  class(coarse_fe_space_t), target, intent(in) :: this
  integer(ip)                     , intent(in) :: block_id
  type(dof_import_t), pointer                  :: coarse_fe_space_get_block_dof_import
  coarse_fe_space_get_block_dof_import => this%blocks_dof_import(block_id)
end function coarse_fe_space_get_block_dof_import

function coarse_fe_space_get_block_number_interface_dofs ( this, block_id )
   implicit none
   class(coarse_fe_space_t), intent(in) :: this
   integer(ip)          , intent(in) :: block_id
   integer(ip)                       :: coarse_fe_space_get_block_number_interface_dofs
   type(par_environment_t), pointer  :: par_environment
   par_environment => this%get_par_environment()
   coarse_fe_space_get_block_number_interface_dofs = 0
   if ( par_environment%am_i_l1_task() ) then
        coarse_fe_space_get_block_number_interface_dofs = this%blocks_dof_import(block_id)%get_number_interface_dofs()
   end if
end function coarse_fe_space_get_block_number_interface_dofs

function coarse_fe_space_get_number_coarse_fe_objects ( this )
  implicit none
  class(coarse_fe_space_t), intent(in) :: this
  integer(ip) :: coarse_fe_space_get_number_coarse_fe_objects
  coarse_fe_space_get_number_coarse_fe_objects = this%coarse_triangulation%get_number_objects()
end function coarse_fe_space_get_number_coarse_fe_objects 

  ! Although in principle this%field_type(:) was though to be
  ! private member variable, I had to make it visible to the exterior
  ! via a raw pointer it as type(mlbddc_coarse_t) requires it in order to construct 
  ! the type(coarse_fe_space_t) instance that it aggregrates. Perhaps there is a 
  ! better/cleaner solution, but at the present moment, this is the only solution 
  ! that comes into my mind and lets me advance
  function coarse_fe_space_get_field_type (this)
    implicit none
    class(coarse_fe_space_t), target, intent(in) :: this
    integer(ip), pointer :: coarse_fe_space_get_field_type(:)
    coarse_fe_space_get_field_type => this%field_type
  end function coarse_fe_space_get_field_type
  
  function coarse_fe_space_get_field_coupling (this)
    implicit none
    class(coarse_fe_space_t), target, intent(in) :: this
    logical, pointer :: coarse_fe_space_get_field_coupling(:,:)
    coarse_fe_space_get_field_coupling => this%field_coupling
  end function coarse_fe_space_get_field_coupling
  
  function coarse_fe_space_get_field_blocks (this)
    implicit none
    class(coarse_fe_space_t), target, intent(in) :: this
    integer(ip), pointer :: coarse_fe_space_get_field_blocks(:)
    coarse_fe_space_get_field_blocks => this%field_blocks
  end function coarse_fe_space_get_field_blocks
  
  function coarse_fe_space_get_triangulation(this)
    implicit none
    class(coarse_fe_space_t), target, intent(in) :: this
    type(coarse_triangulation_t), pointer :: coarse_fe_space_get_triangulation
    coarse_fe_space_get_triangulation => this%coarse_triangulation
 end function coarse_fe_space_get_triangulation
