! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!===============================================================================================
 subroutine serial_fe_space_create_fe_function_scalar ( this, fe_space_id, fe_function_scalar )
    implicit none
    class(serial_fe_space_t) , intent(in)    :: this
    integer(ip)                 , intent(in)    :: fe_space_id
    type(fe_function_scalar_t)  , intent(inout) :: fe_function_scalar

    assert ( fe_space_id >=1 .and. fe_space_id <= this%number_fe_spaces )
    assert ( this%reference_fe_phy_list(fe_space_id)%p%get_field_type() == field_type_scalar )
    
    call fe_function_scalar%create( fe_space_id, &
                                & this%get_max_number_nodes(fe_space_id), &
                                & this%get_max_number_quadrature_points() )
 
 end subroutine serial_fe_space_create_fe_function_scalar

 !===============================================================================================
 subroutine serial_fe_space_create_fe_function_vector ( this, fe_space_id, fe_function_vector )
    implicit none
    class(serial_fe_space_t) , intent(in)    :: this
    integer(ip)                 , intent(in)    :: fe_space_id
    type(fe_function_vector_t)  , intent(inout) :: fe_function_vector

    assert ( fe_space_id >=1 .and. fe_space_id <= this%number_fe_spaces )
    assert ( this%reference_fe_phy_list(fe_space_id)%p%get_field_type() == field_type_vector )

    call fe_function_vector%create( fe_space_id, &
                                & this%get_max_number_nodes(fe_space_id), &
                                & this%get_max_number_quadrature_points() )
 
 end subroutine serial_fe_space_create_fe_function_vector

 !===============================================================================================
 subroutine serial_fe_space_create_fe_function_tensor ( this, fe_space_id, fe_function_tensor )
    implicit none
    class(serial_fe_space_t) , intent(in)    :: this
    integer(ip)                 , intent(in)    :: fe_space_id
    type(fe_function_tensor_t)  , intent(inout) :: fe_function_tensor

    assert ( fe_space_id >=1 .and. fe_space_id <= this%number_fe_spaces )
    assert ( this%reference_fe_phy_list(fe_space_id)%p%get_field_type() == field_type_tensor )

    call fe_function_tensor%create( fe_space_id, &
                                & this%get_max_number_nodes(fe_space_id), &
                                & this%get_max_number_quadrature_points() )
 
 end subroutine serial_fe_space_create_fe_function_tensor
