! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!**************************************************************************************************
! Deferred TBP implementors from reference_fe_t
!**************************************************************************************************

!==================================================================================================
subroutine raviart_thomas_create_anisotropic_order ( this, topology, number_dimensions, order, field_type, & 
                                          &  continuity, enable_face_integration )
  implicit none 
  class(raviart_thomas_reference_fe_t), intent(inout) :: this
  character(*)                    , intent(in)    :: topology
  integer(ip)                     , intent(in)    :: number_dimensions
  integer(ip)                     , intent(in)    :: order(SPACE_DIM)
  character(*)                    , intent(in)    :: field_type
  logical                         , intent(in)    :: continuity
  logical              , optional , intent(in)    :: enable_face_integration

  call this%free()
  call this%set_common_data(number_dimensions,order,field_type,continuity,enable_face_integration)
  call this%set_topology ( topology )
  call this%set_fe_type( fe_type_raviart_thomas )
  call this%fill()
  call this%set_nodal_quadrature()
  
end subroutine raviart_thomas_create_anisotropic_order

!==================================================================================================
! This subroutine constructs a interpolation of order 1 of an element of one dimension less.
! This is used to construct the geometrical interpolation of the face
subroutine raviart_thomas_create_face_local_interpolation ( this, quadrature, &
                                                                   & interpolation)
  implicit none
  class(raviart_thomas_reference_fe_t), intent(in)    :: this
  type(quadrature_t)              , intent(in)    :: quadrature
  type(interpolation_t)           , intent(inout) :: interpolation
  
  write(*,*) 'Vector Laplacian cannot be used for geometry mapping'
  check(.false.)

end subroutine raviart_thomas_create_face_local_interpolation

!==================================================================================================
subroutine raviart_thomas_get_value_scalar( this, actual_cell_interpolation, & 
                                                   & ishape, qpoint, scalar_field )
  implicit none
  class(raviart_thomas_reference_fe_t), intent(in)    :: this 
  type(interpolation_t)           , intent(in)    :: actual_cell_interpolation 
  integer(ip)                     , intent(in)    :: ishape
  integer(ip)                     , intent(in)    :: qpoint
  real(rp)                        , intent(inout) :: scalar_field
  write(*,*) ' ERROR in: ',__FILE__,__LINE__
  write(*,*) ' Subroutine not implemented for vector-based FE spaces'
  check( .false. )
end subroutine raviart_thomas_get_value_scalar

!==================================================================================================
subroutine raviart_thomas_get_value_vector( this, actual_cell_interpolation, & 
                                                   & ishape, qpoint, vector_field )
  implicit none
  class(raviart_thomas_reference_fe_t), intent(in)    :: this 
  type(interpolation_t)           , intent(in)    :: actual_cell_interpolation 
  integer(ip)                     , intent(in)    :: ishape
  integer(ip)                     , intent(in)    :: qpoint
  type(vector_field_t)            , intent(inout) :: vector_field
  assert( this%field_type == field_type_vector )
  assert( ishape >= 1 .and. ishape <= this%number_shape_functions )
  assert( qpoint >= 1 )
  call vector_field%init(actual_cell_interpolation%shape_functions(:,ishape,qpoint))
end subroutine raviart_thomas_get_value_vector

 !!==================================================================================================
subroutine raviart_thomas_get_gradient_scalar( this, actual_cell_interpolation, & 
                                                      & ishape, qpoint, vector_field )
  implicit none
  class(raviart_thomas_reference_fe_t), intent(in)    :: this 
  type(interpolation_t)           , intent(in)    :: actual_cell_interpolation 
  integer(ip)                     , intent(in)    :: ishape
  integer(ip)                     , intent(in)    :: qpoint
  type(vector_field_t)            , intent(inout) :: vector_field
  integer(ip) :: idime
  write(*,*) ' ERROR in: ',__FILE__,__LINE__
  write(*,*) ' Subroutine not implemented for vector-based FE spaces'
  check( .false. )
end subroutine raviart_thomas_get_gradient_scalar

!==================================================================================================
subroutine raviart_thomas_get_gradient_vector( this, actual_cell_interpolation, & 
                                                      & ishape, qpoint, tensor_field )
  implicit none
  class(raviart_thomas_reference_fe_t), intent(in)    :: this 
  type(interpolation_t)           , intent(in)    :: actual_cell_interpolation 
  integer(ip)                     , intent(in)    :: ishape
  integer(ip)                     , intent(in)    :: qpoint
  type(tensor_field_t)            , intent(inout) :: tensor_field
  assert( this%field_type == field_type_vector )
  assert( ishape >= 1 .and. ishape <= this%number_shape_functions )
  assert( qpoint >= 1 )
  call tensor_field%init(actual_cell_interpolation%shape_derivatives(:,:,ishape,qpoint))
end subroutine raviart_thomas_get_gradient_vector

!==================================================================================================
subroutine raviart_thomas_get_divergence_vector( this, actual_cell_interpolation, & 
                                                        & ishape, qpoint, scalar_field )
  implicit none
  class(raviart_thomas_reference_fe_t), intent(in)    :: this 
  type(interpolation_t)           , intent(in)    :: actual_cell_interpolation 
  integer(ip)                     , intent(in)    :: ishape
  integer(ip)                     , intent(in)    :: qpoint
  real(rp)                        , intent(inout) :: scalar_field

  ! Locals 
  integer(ip) :: idime

  assert( this%field_type == field_type_vector )
  assert( ishape >= 1 .and. ishape <= this%number_shape_functions )
  assert( qpoint >= 1 )

  scalar_field = 0
  do idime = 1, this%number_dimensions
     scalar_field = actual_cell_interpolation%shape_derivatives(idime,idime,ishape,qpoint)
  end do

end subroutine raviart_thomas_get_divergence_vector 

!==================================================================================================
subroutine raviart_thomas_get_curl_vector( this, actual_cell_interpolation, &
                                                  & ishape, qpoint, vector_field )
  implicit none
  class(raviart_thomas_reference_fe_t), intent(in)    :: this 
  type(interpolation_t)           , intent(in)    :: actual_cell_interpolation 
  integer(ip)                     , intent(in)    :: ishape
  integer(ip)                     , intent(in)    :: qpoint
  type(vector_field_t)            , intent(inout) :: vector_field
  
  ! Locals 
  integer(ip) :: idime, jdime, kdime
  ! Epsilon_{ijk} = Levi_Civita(i,j,k)
  real(rp), parameter :: Levi_Civita(3,3,3) = reshape( (/0.0_rp, 0.0_rp, 0.0_rp, 0.0_rp, 0.0_rp, -1.0_rp, 0.0_rp, 1.0_rp, 0.0_rp, &
													                                            0.0_rp, 0.0_rp, 1.0_rp, 0.0_rp, 0.0_rp, 0.0_rp, -1.0_rp, 0.0_rp, 0.0_rp, &
													                                            0.0_rp, -1.0_rp, 0.0_rp, 1.0_rp, 0.0_rp, 0.0_rp, 0.0_rp, 0.0_rp, 0.0_rp/), (/3, 3, 3/) )

  assert( this%field_type == field_type_vector )
  assert( ishape >= 1 .and. ishape <= this%number_shape_functions )
  assert( qpoint >= 1 )
  

 call vector_field%init(0.0_rp)
 
 do idime=1,SPACE_DIM 
   do jdime = 1,this%number_dimensions
      do kdime = 1,this%number_dimensions
         if ( ( idime .ne. jdime ) .and. (idime .ne. kdime) .and. (jdime .ne. kdime) ) then 
            call vector_field%set( idime, &
                 Levi_Civita(idime,jdime,kdime)* &
                 actual_cell_interpolation%shape_derivatives(jdime,kdime,this%node_component_array(ishape,1),qpoint) )
                 ! @sbadia: I have to check it. 
         end if
      end do
   end do
 end do

end subroutine raviart_thomas_get_curl_vector

!==================================================================================================
subroutine raviart_thomas_evaluate_fe_function_scalar( this,                      &
                                                             &  actual_cell_interpolation, &
                                                             &  nodal_values,              &
                                                             &  quadrature_points_values)
  implicit none
  class(raviart_thomas_reference_fe_t), intent(in)    :: this 
  type(interpolation_t)           , intent(in)    :: actual_cell_interpolation 
  real(rp)                        , intent(in)    :: nodal_values(:)
  real(rp)                        , intent(inout) :: quadrature_points_values(:)
  integer(ip) :: qpoint, ishape

  write(*,*) ' ERROR in: ',__FILE__,__LINE__
  write(*,*) ' Subroutine not implemented for vector field unknowns '
  check( .false. )

end subroutine raviart_thomas_evaluate_fe_function_scalar

!==================================================================================================
subroutine raviart_thomas_evaluate_fe_function_vector( this,                      &
                                                             &  actual_cell_interpolation, &
                                                             &  nodal_values,              &
                                                             &  quadrature_points_values)
  implicit none
  class(raviart_thomas_reference_fe_t), intent(in)    :: this 
  type(interpolation_t)           , intent(in)    :: actual_cell_interpolation 
  real(rp)                        , intent(in)    :: nodal_values(:)
  type(vector_field_t)            , intent(inout) :: quadrature_points_values(:)
  integer(ip) :: qpoint, inode, icomp, inode_scalar
  
  do qpoint = 1, actual_cell_interpolation%number_quadrature_points
     call quadrature_points_values(qpoint)%init(0.0_rp)
     do inode = 1, this%number_shape_functions
        call quadrature_points_values(qpoint)%add( & 
             actual_cell_interpolation%shape_functions(:,inode,qpoint)*nodal_values(inode) )
     end do
  end do

end subroutine raviart_thomas_evaluate_fe_function_vector

!==================================================================================================
subroutine raviart_thomas_evaluate_fe_function_tensor( this,                      &
                                                             &  actual_cell_interpolation, &
                                                             &  nodal_values,              &
                                                             &  quadrature_points_values)
  implicit none
  class(raviart_thomas_reference_fe_t), intent(in)    :: this 
  type(interpolation_t)           , intent(in)    :: actual_cell_interpolation 
  real(rp)                        , intent(in)    :: nodal_values(:)
  type(tensor_field_t)            , intent(inout) :: quadrature_points_values(:)

  write(*,*) ' ERROR in: ',__FILE__,__LINE__
  write(*,*) ' Subroutine not implemented for tensor field unknowns '
  check( .false. )

end subroutine raviart_thomas_evaluate_fe_function_tensor

!**************************************************************************************************
! Concrete TBPs of this derived data type
!**************************************************************************************************

!==================================================================================================
subroutine raviart_thomas_apply_femap_to_interpolation(this,map,ref,phy)
  implicit none
  class(raviart_thomas_reference_fe_t), intent(in)    :: this 
  type(fe_map_t)                  , intent(in)    :: map
  type(interpolation_t)           , intent(in)    :: ref
  type(interpolation_t)           , intent(inout) :: phy
  real(rp), allocatable :: wmat1(:,:,:)
  real(rp), allocatable :: wmat2(:,:,:), wvec1(:)
  integer(ip) :: ndime,nnode,nlocs,ntens
  integer(ip) :: ilocs,inode,idime,jdime

  ndime = ref%number_dimensions
  ntens = ref%number_entries_symmetric_tensor
  nlocs = ref%number_quadrature_points
  !nnode = ref%number_shape_functions
  nnode = size(ref%shape_functions,2)

  phy%shape_derivatives=0.0_rp
  do ilocs=1,phy%number_quadrature_points
     do inode=1,this%number_shape_functions
        do idime=1,this%number_dimensions
           do jdime=1,this%number_dimensions
              phy%shape_derivatives(idime,jdime,inode,ilocs) = phy%shape_derivatives(idime,jdime,inode,ilocs) &
                   + map%inv_jacobian(jdime,idime,ilocs)*ref%shape_derivatives(idime,jdime,inode,ilocs)
              end do
        end do
     end do
  end do
end subroutine raviart_thomas_apply_femap_to_interpolation


