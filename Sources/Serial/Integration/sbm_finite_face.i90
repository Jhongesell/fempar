! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!==================================================================================================
subroutine finite_face_create(this,number_fe_spaces)
  implicit none
  class(finite_face_t), intent(inout) :: this
  integer(ip)         , intent(in)    :: number_fe_spaces

  integer(ip) :: istat
  this%number_fe_spaces = number_fe_spaces

  allocate(this%face_integrator(this%number_fe_spaces),stat = istat)
  check(istat == 0)
  
end subroutine finite_face_create

!==================================================================================================
subroutine finite_face_update_integration( this )
  implicit none
  class(finite_face_t), intent(inout) :: this 
  integer(ip) :: i

  type(point_t),  pointer :: coords(:)

  coords => this%map%get_face_coordinates()
  call this%face_topology%get_coordinates(coords)

  coords => this%map%get_coordinates_neighbour(1,this%face_topology%relative_face(1))
  call this%neighbour_fe(1)%p%cell%get_coordinates(coords)

  if (.not. this%is_boundary()) then
     coords => this%map%get_coordinates_neighbour(2,this%face_topology%relative_face(2))
     call this%neighbour_fe(2)%p%cell%get_coordinates(coords)
  end if

  call this%map%update(this%face_topology%relative_face,this%quadrature,                          &
       &               this%neighbour_fe(1)%p%cell%reference_fe_geo)

  do i = 1, this%number_fe_spaces
     call this%face_integrator(i)%p%update(this%face_topology%relative_face,this%map,             &
          &                         this%get_relative_orientation(),this%get_relative_rotation())
  end do
end subroutine finite_face_update_integration

!==================================================================================================
subroutine finite_face_free(this)
  implicit none
  class(finite_face_t), intent(inout) :: this

  integer(ip) :: i

  this%face_topology => NULL()
  this%map           => NULL()
  this%quadrature    => NULL()
  if (allocated(this%face_integrator)) deallocate (this%face_integrator)
  do i =1,2
     this%neighbour_fe(i)%p => NULL()
  end do
  this%number_fe_spaces = 0
end subroutine finite_face_free

!==================================================================================================
function finite_face_is_boundary(this) 
  implicit none
  class(finite_face_t), target, intent(in) :: this
  logical                                  :: finite_face_is_boundary

  finite_face_is_boundary = (this%face_topology%neighbour_elems_id(2) == -1)
end function finite_face_is_boundary

!==================================================================================================
function finite_face_number_neighbours(this)
  implicit none
  class(finite_face_t), target, intent(in) :: this
  integer(ip)                              :: finite_face_number_neighbours

  if (this%is_boundary()) then
     finite_face_number_neighbours = 1
  else
     finite_face_number_neighbours = 2
  end if
end function finite_face_number_neighbours

!==================================================================================================
function finite_face_get_elem2dof(this,i)
  implicit none
  class(finite_face_t), target, intent(in) :: this
  integer(ip)                 , intent(in) :: i
  type(i1p_t)                    , pointer :: finite_face_get_elem2dof(:)
  finite_face_get_elem2dof => this%neighbour_fe(i)%p%get_elem2dof()
end function finite_face_get_elem2dof

!==================================================================================================
function finite_face_get_map(this)
  implicit none
  class(finite_face_t), target, intent(in) :: this
  type(face_map_t)    , pointer            :: finite_face_get_map
  finite_face_get_map => this%map
end function finite_face_get_map

!==================================================================================================
function finite_face_get_quadrature(this)
  implicit none
  class(finite_face_t), target, intent(in) :: this
  type(quadrature_t)       , pointer    :: finite_face_get_quadrature
  finite_face_get_quadrature => this%quadrature
end function finite_face_get_quadrature

!==================================================================================================
function finite_face_get_face_integrator(this,i)
  implicit none
  class(finite_face_t), target, intent(in) :: this
  integer(ip)                 , intent(in) :: i
  type(face_integrator_t)     , pointer    :: finite_face_get_face_integrator
  finite_face_get_face_integrator => this%face_integrator(i)%p
end function finite_face_get_face_integrator

!==================================================================================================
function finite_face_get_relative_orientation(this)
  implicit none
  class(finite_face_t), target, intent(in) :: this
  integer(ip) :: finite_face_get_relative_orientation
  finite_face_get_relative_orientation = this%face_topology%get_relative_orientation()
end function finite_face_get_relative_orientation

!==================================================================================================
function finite_face_get_relative_rotation(this)
  implicit none
  class(finite_face_t), target, intent(in) :: this
  integer(ip) :: finite_face_get_relative_rotation
  finite_face_get_relative_rotation = this%face_topology%get_relative_rotation()
end function finite_face_get_relative_rotation

!==================================================================================================
function finite_face_get_finite_element(this,i)
  implicit none
  class(finite_face_t), target, intent(in) :: this
  integer(ip)                 , intent(in) :: i
  type(finite_element_t)      , pointer    :: finite_face_get_finite_element
  finite_face_get_finite_element => this%neighbour_fe(i)%p
end function finite_face_get_finite_element
