! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!**************************************************************************************************
! Methods associated to fe_function_t
!*************************************************************************************************
 !===============================================================================================
 subroutine fe_function_create( this, strong_dirichlet_values, dof_values )
    implicit none
    class(fe_function_t)            , intent(inout) :: this
    type(serial_scalar_array_t)     , intent(in)    :: strong_dirichlet_values
    class(vector_t)    , allocatable, intent(inout) :: dof_values
    call this%free()
    call move_alloc(from=dof_values, to=this%dof_values)
    call this%strong_dirichlet_values%clone(strong_dirichlet_values)
    call this%strong_dirichlet_values%copy(strong_dirichlet_values)
  end subroutine fe_function_create
 
 !===============================================================================================
 subroutine fe_function_copy_bc_values( this, strong_dirichlet_values )
    implicit none
    class(fe_function_t)       , intent(inout) :: this 
    type(serial_scalar_array_t), intent(in)    :: strong_dirichlet_values
    call this%strong_dirichlet_values%copy(strong_dirichlet_values)
  end subroutine fe_function_copy_bc_values
  
  subroutine fe_function_copy(this,other) 
    implicit none
    class(fe_function_t), intent(inout) :: this
    type (fe_function_t), intent(in)    :: other
    this%strong_dirichlet_values = other%strong_dirichlet_values
    this%dof_values = other%dof_values
  end subroutine fe_function_copy
  
 !===============================================================================================
 function fe_function_get_dof_values ( this )
    implicit none
    class(fe_function_t), target, intent(in) :: this 
    class(vector_t), pointer :: fe_function_get_dof_values
    fe_function_get_dof_values => this%dof_values
 end function fe_function_get_dof_values
 
 !===============================================================================================
 function fe_function_get_strong_dirichlet_values ( this )
    implicit none
    class(fe_function_t), target, intent(in) :: this 
    type(serial_scalar_array_t), pointer :: fe_function_get_strong_dirichlet_values
    fe_function_get_strong_dirichlet_values => this%strong_dirichlet_values
 end function fe_function_get_strong_dirichlet_values
  
 !=============================================================================================== 
 subroutine fe_function_free( this )
    implicit none
    class(fe_function_t), intent(inout) :: this
    integer(ip)                         :: istat
    if( allocated(this%dof_values) ) then
      call this%dof_values%free()
      deallocate ( this%dof_values, stat=istat )
      check (istat == 0)
    end if
    call this%strong_dirichlet_values%free()
  end subroutine fe_function_free
  
!**************************************************************************************************
! Methods associated to fe_function_scalar_t
!**************************************************************************************************

 !===============================================================================================
 subroutine fe_function_scalar_create ( this, ifesp, max_nnode, max_npoint )
    implicit none
    class(fe_function_scalar_t), intent(inout) :: this 
    integer(ip)                , intent(in)    :: ifesp, max_nnode, max_npoint
    integer(ip)                                :: istat
    
    call this%free()
    
    this%fe_space_id = ifesp

    this%max_number_nodes = max_nnode
    this%max_number_quadrature_points = max_npoint
    
    allocate ( this%nodal_values(max_nnode), stat = istat )
    check(istat==0)
    
    allocate ( this%quadrature_points_values(max_npoint), stat = istat )
    check(istat==0)
    
 end subroutine fe_function_scalar_create

 !===============================================================================================
 function fe_function_scalar_get_fe_space_id ( this )
    implicit none
    class(fe_function_scalar_t), intent(in) :: this 
    integer(ip) :: fe_function_scalar_get_fe_space_id
    fe_function_scalar_get_fe_space_id = this%fe_space_id
 end function fe_function_scalar_get_fe_space_id

 !===============================================================================================
 function fe_function_scalar_get_nodal_values ( this )
    implicit none
    class(fe_function_scalar_t), target, intent(in) :: this 
    real(rp), pointer :: fe_function_scalar_get_nodal_values(:)
    fe_function_scalar_get_nodal_values => this%nodal_values
 end function fe_function_scalar_get_nodal_values
 
 !===============================================================================================
 function fe_function_scalar_get_quadrature_points_values ( this )
    implicit none
    class(fe_function_scalar_t), target, intent(in) :: this 
    real(rp), pointer :: fe_function_scalar_get_quadrature_points_values(:)
    fe_function_scalar_get_quadrature_points_values => this%quadrature_points_values
 end function fe_function_scalar_get_quadrature_points_values
 
 !===============================================================================================
 subroutine fe_function_scalar_get_value ( this, point, value )
    implicit none
    class(fe_function_scalar_t), intent(in)    :: this 
    integer(ip)                , intent(in)    :: point
    real(rp)                   , intent(inout) :: value
    
    assert ( point <= this%current_number_quadrature_points )
    value = this%quadrature_points_values(point)
    
 end subroutine fe_function_scalar_get_value

 !===============================================================================================
 subroutine fe_function_scalar_set_current_number_nodes ( this, value )
    implicit none
    class(fe_function_scalar_t), intent(inout) :: this 
    integer(ip)                , intent(in)    :: value
    
    assert ( value <= this%max_number_nodes )
    this%current_number_nodes = value
    
 end subroutine fe_function_scalar_set_current_number_nodes
 
 !===============================================================================================
 subroutine fe_function_scalar_set_current_number_quadrature_points ( this, value )
    implicit none
    class(fe_function_scalar_t), intent(inout) :: this 
    integer(ip)                , intent(in)    :: value
    assert ( value <= this%max_number_quadrature_points ) 
    this%current_number_quadrature_points = value
    
 end subroutine fe_function_scalar_set_current_number_quadrature_points
 
 !===============================================================================================
 subroutine fe_function_scalar_free ( this )
    implicit none
    class(fe_function_scalar_t), intent(inout) :: this 
    integer(ip)                                :: istat
    
    this%fe_space_id = 0.0_ip
    
    this%current_number_nodes             = 0.0_ip
    this%current_number_quadrature_points = 0.0_ip
    
    this%max_number_nodes                 = 0.0_ip
    this%max_number_quadrature_points     = 0.0_ip
        
    if (allocated(this%nodal_values)) then 
       deallocate ( this%nodal_values, stat = istat )
       check(istat==0)
    end if
    
    if (allocated(this%quadrature_points_values)) then
       deallocate ( this%quadrature_points_values, stat = istat )
       check(istat==0)
    end if
    
 end subroutine fe_function_scalar_free

 
!**************************************************************************************************
! Methods associated to fe_function_vector_t
!**************************************************************************************************

 !===============================================================================================
 subroutine fe_function_vector_create ( this, ifesp, max_nnode, max_npoint )
    implicit none
    class(fe_function_vector_t), intent(inout) :: this 
    integer(ip)                , intent(in)    :: ifesp, max_nnode, max_npoint
    integer(ip)                                :: istat
    
    call this%free()
    
    this%fe_space_id = ifesp

    this%max_number_nodes = max_nnode
    this%max_number_quadrature_points = max_npoint
    
    allocate ( this%nodal_values(max_nnode), stat = istat )
    check(istat==0)
    
    allocate ( this%quadrature_points_values(max_npoint), stat = istat )
    check(istat==0)
    
 end subroutine fe_function_vector_create

 !===============================================================================================
 function fe_function_vector_get_fe_space_id ( this )
    implicit none
    class(fe_function_vector_t), intent(in) :: this 
    integer(ip) :: fe_function_vector_get_fe_space_id
    fe_function_vector_get_fe_space_id = this%fe_space_id
 end function fe_function_vector_get_fe_space_id

 !===============================================================================================
 function fe_function_vector_get_nodal_values ( this )
    implicit none
    class(fe_function_vector_t), target, intent(in) :: this 
    real(rp), pointer :: fe_function_vector_get_nodal_values(:)
    fe_function_vector_get_nodal_values => this%nodal_values
 end function fe_function_vector_get_nodal_values
 
 !===============================================================================================
 function fe_function_vector_get_quadrature_points_values ( this )
    implicit none
    class(fe_function_vector_t), target, intent(in) :: this 
    type(vector_field_t), pointer :: fe_function_vector_get_quadrature_points_values(:)
    fe_function_vector_get_quadrature_points_values => this%quadrature_points_values
 end function fe_function_vector_get_quadrature_points_values
 
 !===============================================================================================
 subroutine fe_function_vector_get_value ( this, point, value )
    implicit none
    class(fe_function_vector_t), intent(in)    :: this 
    integer(ip)                , intent(in)    :: point
    type(vector_field_t)       , intent(inout) :: value
    
    assert ( point <= this%current_number_quadrature_points )
    value = this%quadrature_points_values(point)
    
 end subroutine fe_function_vector_get_value

 !===============================================================================================
 subroutine fe_function_vector_set_current_number_nodes ( this, value )
    implicit none
    class(fe_function_vector_t), intent(inout) :: this 
    integer(ip)                , intent(in)    :: value
    
    assert ( value <= this%max_number_nodes )
    this%current_number_nodes = value
    
 end subroutine fe_function_vector_set_current_number_nodes
 
 !===============================================================================================
 subroutine fe_function_vector_set_current_number_quadrature_points ( this, value )
    implicit none
    class(fe_function_vector_t), intent(inout) :: this 
    integer(ip)                , intent(in)    :: value
    
    assert ( value <= this%max_number_quadrature_points ) 
    this%current_number_quadrature_points = value
    
 end subroutine fe_function_vector_set_current_number_quadrature_points
 
 !===============================================================================================
 subroutine fe_function_vector_free ( this )
    implicit none
    class(fe_function_vector_t), intent(inout) :: this 
    integer(ip)                                :: istat
    
    this%fe_space_id = 0.0_ip
    
    this%current_number_nodes             = 0.0_ip
    this%current_number_quadrature_points = 0.0_ip
    
    this%max_number_nodes                 = 0.0_ip
    this%max_number_quadrature_points     = 0.0_ip
    
    if (allocated(this%nodal_values)) then 
       deallocate ( this%nodal_values, stat = istat )
       check(istat==0)
    end if
    
    if (allocated(this%quadrature_points_values)) then
       deallocate ( this%quadrature_points_values, stat = istat )
       check(istat==0)
    end if
    
 end subroutine fe_function_vector_free
 
 
!**************************************************************************************************
! Methods associated to fe_function_tensor_t
!**************************************************************************************************

 !===============================================================================================
 subroutine fe_function_tensor_create ( this, ifesp, max_nnode, max_npoint )
    implicit none
    class(fe_function_tensor_t), intent(inout) :: this 
    integer(ip)                , intent(in)    :: ifesp, max_nnode, max_npoint
    integer(ip)                                :: istat
    
    call this%free()
    
    this%fe_space_id = ifesp

    this%max_number_nodes = max_nnode
    this%max_number_quadrature_points = max_npoint
        
    allocate ( this%nodal_values(max_nnode), stat = istat )
    check(istat==0)
    
    allocate ( this%quadrature_points_values(max_npoint), stat = istat )
    check(istat==0)
    
 end subroutine fe_function_tensor_create

 !===============================================================================================
 function fe_function_tensor_get_fe_space_id ( this )
    implicit none
    class(fe_function_tensor_t), intent(in) :: this 
    integer(ip) :: fe_function_tensor_get_fe_space_id
    fe_function_tensor_get_fe_space_id = this%fe_space_id
 end function fe_function_tensor_get_fe_space_id

 !===============================================================================================
 function fe_function_tensor_get_nodal_values ( this )
    implicit none
    class(fe_function_tensor_t), target, intent(in) :: this 
    real(rp), pointer :: fe_function_tensor_get_nodal_values(:)
    fe_function_tensor_get_nodal_values => this%nodal_values
 end function fe_function_tensor_get_nodal_values
 
 !===============================================================================================
 function fe_function_tensor_get_quadrature_points_values ( this )
    implicit none
    class(fe_function_tensor_t), target, intent(in) :: this 
    type(tensor_field_t), pointer :: fe_function_tensor_get_quadrature_points_values(:)
    fe_function_tensor_get_quadrature_points_values => this%quadrature_points_values
 end function fe_function_tensor_get_quadrature_points_values
 
 !===============================================================================================
 subroutine fe_function_tensor_get_value ( this, point, value )
    implicit none
    class(fe_function_tensor_t), intent(in)    :: this 
    integer(ip)                , intent(in)    :: point
    type(tensor_field_t)       , intent(inout) :: value
    
    assert ( point <= this%current_number_quadrature_points )
    value = this%quadrature_points_values(point)
    
 end subroutine fe_function_tensor_get_value

 !===============================================================================================
 subroutine fe_function_tensor_set_current_number_nodes ( this, value )
    implicit none
    class(fe_function_tensor_t), intent(inout) :: this 
    integer(ip)                , intent(in)    :: value
    
    assert ( value <= this%max_number_nodes )
    this%current_number_nodes = value
    
 end subroutine fe_function_tensor_set_current_number_nodes
 
 !===============================================================================================
 subroutine fe_function_tensor_set_current_number_quadrature_points ( this, value )
    implicit none
    class(fe_function_tensor_t), intent(inout) :: this 
    integer(ip)                , intent(in)    :: value
    
    assert ( value <= this%max_number_quadrature_points ) 
    this%current_number_quadrature_points = value
    
 end subroutine fe_function_tensor_set_current_number_quadrature_points
 
 !===============================================================================================
 subroutine fe_function_tensor_free ( this )
    implicit none
    class(fe_function_tensor_t), intent(inout) :: this 
    integer(ip)                                :: istat
    
    this%fe_space_id = 0.0_ip
    
    this%current_number_nodes             = 0.0_ip
    this%current_number_quadrature_points = 0.0_ip
    
    this%max_number_nodes                 = 0.0_ip
    this%max_number_quadrature_points     = 0.0_ip
    
    
    if (allocated(this%nodal_values)) then 
       deallocate ( this%nodal_values, stat = istat )
       check(istat==0)
    end if
    
    if (allocated(this%quadrature_points_values)) then
       deallocate ( this%quadrature_points_values, stat = istat )
       check(istat==0)
    end if
    
 end subroutine fe_function_tensor_free
