! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Templated implementation of a hash table based element set, extension of 
! the abstract element_set defined in element_set.i90. The code is similar 
! but has some differences with respect to standard hash_tables used elsewhere
! in FEMPAR. An iterator over the table is also defined.
! 
! Templates are not natively supported by fortran.
! They are emulated using the preprocessor by including this file in a module 
! BEFORE the contains statement and after a definition of:
!
! template_element_t
! hash_template_element_set_t
! hash_template_element_iterator_t
!
! This code also requires the use of the module element_id_names which define
! the element_id_t class hierarchy.
!
  type, extends(template_element_iterator_t) :: hash_template_element_iterator_t
     private
     type(hash_node), pointer :: current_node => null()
     type(hash_node), pointer :: next_node    => null()
     !type(template_key_t), allocatable  :: current_key
     !type(template_key_t), allocatable  :: next_key
     type(hash_template_element_set_t), pointer :: hash_template_element_set
   contains
     procedure :: begin        => hash_template_element_iterator_begin
     procedure :: finished     => hash_template_element_iterator_finished
     procedure :: next         => hash_template_element_iterator_next
     procedure :: current      => hash_template_element_iterator_current
     procedure :: get_local_id => hash_template_element_iterator_get_local_id
  end type hash_template_element_iterator_t

  type hash_node
     private
     type(hash_node), pointer :: child => null()
     type(hash_node), pointer :: parent => null()
     type (template_key_t)    :: key
     class(template_element_t), allocatable :: val
   contains
     procedure :: put  => put_hash_node
     procedure :: get  => get_hash_node
     procedure :: get_next  => get_next_hash_node
     procedure :: get_first => get_first_hash_node
     procedure :: del  => del_hash_node
     procedure :: free => free_hash_node
  end type hash_node

  type, extends(template_element_set_t) :: hash_template_element_set_t
     private
     type(hash_node), dimension(:), allocatable :: vec
     integer(ip)                                :: vec_len = 0
     logical                                    :: is_init = .false.
   contains
     procedure :: create          => create_hash_template_element_set_t
     procedure :: free            => free_hash_template_element_set_t
     procedure :: create_iterator => create_hash_template_element_iterator
     procedure :: free_iterator   => free_hash_template_element_iterator
     procedure :: get             => get_hash_template_element_set_t
     procedure :: get_next        => get_next_hash_template_element_set_t
     procedure :: put             => put_hash_template_element_set_t
     procedure :: del             => del_hash_template_element_set_t
  end type hash_template_element_set_t
