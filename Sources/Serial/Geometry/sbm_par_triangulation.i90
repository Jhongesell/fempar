! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine par_triangulation_create ( this, par_environment, dir_path, prefix, geometry_interpolation_order)
  implicit none
  class(par_triangulation_t), intent(inout) :: this
  type(par_environment_t),target, intent(in)    :: par_environment
  character (*)                 , intent(in)    :: dir_path
  character (*)                 , intent(in)    :: prefix
  integer(ip)        , optional , intent(in)    :: geometry_interpolation_order

  integer(ip)                    :: lunio
  character(len=:), allocatable  :: name
  type(mesh_t)              :: mesh
  type(mesh_distribution_t) :: mesh_distribution
  type(list_t), pointer :: given_vefs
  integer(ip) , pointer :: lst_vefs_geo(:), lst_vefs_set(:)

  integer(igp), allocatable :: cells_gid(:)
  integer(igp), allocatable :: vertx_gid(:)
  integer(ip) , allocatable :: ptr_vefs_per_cell(:)
  integer(ip) , allocatable :: lst_vefs_lids(:)
  integer(igp), allocatable :: lst_vefs_gids(:)

  integer(ip)  :: i, ipart,npart, order
  integer(ip)  :: num_local_cells, num_itfc_cells
  integer(ip), allocatable :: lst_itfc_cells(:)
  integer(ip), allocatable :: ptr_ext_neighs_per_itfc_cell(:)
  integer(igp), allocatable :: lst_ext_neighs_gids(:)
  integer(ip), allocatable :: lst_ext_neighs_part_ids(:)

  integer(igp), allocatable :: lst_vefs_gids_ghost_extended(:)
  integer(ip) , allocatable :: lst_vefs_dimension_ghost_extended(:)

  call this%free()

  this%p_env => par_environment
  if(this%p_env%am_i_l1_task()) then

     if(present(geometry_interpolation_order)) then
        order=geometry_interpolation_order
        if(order>1) then
           call this%geometry%read(dir_path, prefix)
        end if
     else
        order=1
     end if
  
     ! Read mesh
     call mesh%compose_name ( prefix, name )
     call par_filename( this%p_env%get_l1_context(), name )
     lunio = io_open( trim(dir_path) // '/' // trim(name), 'read' )
     call mesh%read (lunio) 
     call io_close(lunio)

     ! Extract data from mesh
     call mesh%get_sizes(this%num_dimensions,this%num_vertices,this%max_vefs_per_cell,this%num_local_cells)
     this%num_vefs=this%num_vertices

     !write(*,*) 'Get from mesh (sizes):',this%num_dimensions,this%num_vertices,this%num_vefs,this%max_vefs_per_cell,this%num_local_cells
     !write(*,*) 'Get from mesh num_local_cells:',this%num_local_cells
     call mesh%move_cells(ptr_vefs_per_cell,lst_vefs_lids)
     !write(*,*) this%ptr_vefs_per_cell
     !write(*,*) this%lst_vefs_lids
     !call mesh%move_coordinates(this%coordinates)
     !write(*,*) this%coordinates
     call mesh%get_given_vefs(given_vefs,lst_vefs_geo,lst_vefs_set)
     !write(*,*) boundary%p,boundary%l

     ! Read mesh distribution 
     call mesh_distribution_compose_name ( prefix, name )
     call par_filename( this%p_env%get_l1_context(), name )
     lunio = io_open (trim(dir_path) // '/' // trim(name))
     call mesh_distribution%read_file(lunio)
     call io_close(lunio)

     call mesh_distribution%get_sizes(ipart,npart)
     !write(*,*) 'Get from mesh_distribution (sizes):',ipart,npart

     ! Extract data from mesh_distribution
     call mesh_distribution%move_gids(cells_gid,vertx_gid)
     call mesh_distribution%move_external_elements_info( num_itfc_cells, &
          &                                              lst_itfc_cells, &
          &                                              ptr_ext_neighs_per_itfc_cell, &
          &                                              lst_ext_neighs_gids, &
          &                                              lst_ext_neighs_part_ids)
     !write(*,*) 'List of itfc cells:',num_itfc_cells
     !write(*,'(10i10)') lst_itfc_cells
     !write(*,*) 'pextn:'
     !write(*,'(10i10)') ptr_ext_neighs_per_itfc_cell
     !write(*,*) 'lextn:'
     !write(*,'(10i10)') lst_ext_neighs_gids
     !write(*,*) 'lextp:'
     !write(*,'(10i10)') lst_ext_neighs_part_ids

     ! Build elementwise vefs_gid and vefs_dim
     call memalloc(ptr_vefs_per_cell(this%num_local_cells+1)-1,lst_vefs_gids,__FILE__,__LINE__)
     do i=1,ptr_vefs_per_cell(this%num_local_cells+1)-1
        lst_vefs_gids(i) = vertx_gid(lst_vefs_lids(i))
     end do

     ! We need to fill the element_import data structure first
     ! in order to determine the number of ghost elements. This
     ! in turn is required as a precondition for the allocate_cell_array
     ! TBP below.
     call this%cell_import%create  ( this%p_env%get_l1_rank()+1, &
          this%p_env%get_l1_size(), &
          this%num_local_cells, &
          num_itfc_cells, &
          lst_itfc_cells(1:num_itfc_cells), & ! I was forced to provide l/u bounds to let gfortran 5.3.0 compile
          ptr_ext_neighs_per_itfc_cell(1:num_itfc_cells+1), &
          lst_ext_neighs_gids(1:ptr_ext_neighs_per_itfc_cell(num_itfc_cells+1)-1), &
          lst_ext_neighs_part_ids(1:ptr_ext_neighs_per_itfc_cell(num_itfc_cells+1)-1))
     this%num_ghost_cells = this%cell_import%get_number_ghost_elements()
     write(*,*) 'Get from import num_ghost_cells',this%num_ghost_cells

     ! Allocate + fill cells-related data
     call this%allocate_and_fill_ptr_vefs_per_cell(ptr_vefs_per_cell)
     call this%allocate_cells_gid()
     call this%fill_local_cells_gid(cells_gid)
     call this%allocate_cells_mypart()
     call this%fill_local_cells_mypart()
     call this%fetch_ghost_cells_data(lst_vefs_gids, lst_vefs_gids_ghost_extended)

     ! Extend lids to ghost vefs and update number of vefs (=vertices at this point)
     !write(*,*) 'Updating local numbering'
     !write(*,*) 'Local and ghost vefs:',this%num_vefs, this%num_vertices, this%num_local_vefs, this%num_ghost_vefs
     call this%allocate_and_fill_lst_vefs_lids(lst_vefs_lids,lst_vefs_gids_ghost_extended)
     this%num_vertices=this%num_vefs

     !write(*,*) 'Local numbering udated with ghost vefs'
     !write(*,*) 'Local and ghost vefs:',this%num_vefs, this%num_vertices, this%num_local_vefs, this%num_ghost_vefs

     ! Generate edges and faces
     call this%allocate_and_fill_cells_around()
     !write(*,*) 'Dual mesh ready'
     !write(*,*) this%ptrs_cells_around
     !write(*,*) this%lst_cells_around
     !write(*,*) 'Generating vefs'
     !write(*,*) 'Local and ghost vefs:',this%num_vefs, this%num_vertices, this%num_local_vefs, this%num_ghost_vefs
     call this%generate_vefs(order)
     call this%allocate_and_fill_geometry_and_set(given_vefs,lst_vefs_geo,lst_vefs_set)

     call this%allocate_and_fill_cells_around()
     call this%compute_vefs_dimension()
     call this%find_vefs_at_boundary()
     call this%find_and_list_vefs_at_interfaces()
     
     call this%allocate_and_fill_face_orientation_rotation()

     call this%allocate_and_fill_nodes()
     call this%allocate_and_fill_coordinates(mesh%get_coordinates())

     call memfree (lst_vefs_gids_ghost_extended, __FILE__, __LINE__)
     !call memfree (lst_vefs_dimension_ghost_extended, __FILE__, __LINE__)

     write(*,*) 'compute_vefs_and_parts_object'
     call this%compute_vefs_and_parts_object()
     write(*,*) 'compute_objects_dimension'
     call this%compute_objects_dimension()
     write(*,*) 'compute_number_global_objects_and_their_gids'
     call this%compute_number_global_objects_and_their_gids()
     write(*,*) 'End creating par_triangulation'
  end if
  call this%setup_coarse_triangulation()
  !call this%print()

end subroutine par_triangulation_create

subroutine par_triangulation_allocate_and_fill_lst_vefs_lids ( this, lst_vefs_lids, lst_vefs_gids)                                                     
  implicit none
  class(par_triangulation_t), intent(inout) :: this
  integer(ip)               , intent(in)    :: lst_vefs_lids(this%ptr_vefs_per_cell(this%num_local_cells+1)-1)
  integer(igp)              , intent(in)    :: lst_vefs_gids(this%ptr_vefs_per_cell(this%num_local_cells+this%num_ghost_cells+1)-1)

  type(hash_table_igp_ip_t) :: next_vef_lid_avail
  integer(ip)               :: icell, istat, j, init_pos, end_pos, current              

  assert ( associated ( this%p_env ) )
  assert ( this%p_env%am_i_l1_task() )
  assert ( this%num_local_cells + this%num_ghost_cells >=0 )

  call this%free_lst_vefs_lids()

  call memalloc ( this%ptr_vefs_per_cell(this%num_local_cells+this%num_ghost_cells+1)-1, this%lst_vefs_lids, __FILE__, __LINE__ )
  call next_vef_lid_avail%init ( max(int(real( this%ptr_vefs_per_cell(this%num_local_cells+this%num_ghost_cells+1))*0.1_rp),5) )

  ! Local cells contain vertices already locally numbered
  do icell=1, this%num_local_cells
     init_pos = this%ptr_vefs_per_cell(icell)
     end_pos  = this%ptr_vefs_per_cell(icell+1)-1
     do j=init_pos, end_pos
        call next_vef_lid_avail%put(key=lst_vefs_gids(j), val=lst_vefs_lids(j), stat=istat)
        this%lst_vefs_lids(j)=lst_vefs_lids(j)
     end do
     !write(*,*) icell, this%lst_vefs_lids(init_pos:end_pos)
  end do

  ! Ghost cells contain vefs not locally numbered
  !this%num_ghost_vefs=0
  !current = this%num_vefs+1
  do icell = this%num_local_cells +1, this%num_local_cells + this%num_ghost_cells
     init_pos = this%ptr_vefs_per_cell(icell)
     end_pos  = this%ptr_vefs_per_cell(icell+1)-1
     do j=init_pos, end_pos
        call next_vef_lid_avail%put(key=lst_vefs_gids(j), val=this%num_vefs+1, stat=istat)
        if (istat == now_stored) then
           this%num_vefs=this%num_vefs+1
           !current = current + 1
           !this%num_ghost_vefs = this%num_ghost_vefs + 1
        end if
        call next_vef_lid_avail%get(key=lst_vefs_gids(j), val=this%lst_vefs_lids(j), stat=istat)
     end do
     !write(*,*) icell, this%lst_vefs_lids(init_pos:end_pos)
  end do
  call next_vef_lid_avail%free()
  !this%num_vefs = this%num_local_vefs+this%num_ghost_vefs

end subroutine par_triangulation_allocate_and_fill_lst_vefs_lids

