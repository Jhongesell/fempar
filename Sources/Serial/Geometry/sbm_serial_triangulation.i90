! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine serial_triangulation_create ( this, dir_path, prefix)
    implicit none
    class(serial_triangulation_t), intent(inout) :: this
    character(len=256)           , intent(in)    :: dir_path
    character(len=256)           , intent(in)    :: prefix
    type(mesh_t) :: mesh
    type(list_t), pointer :: boundary
    integer(ip) , pointer :: boundary_geo(:), boundary_set(:)
    
    call this%free()
    call mesh%read(dir_path, prefix) !, permute_c2z=.true.
    !call mesh%to_dual()
    !call mesh%generate_vefs()

    ! Extract data from mesh
    call mesh%get_sizes(this%num_dimensions,this%num_vertices,this%max_vefs_per_cell,this%num_local_cells)
    this%num_vefs=this%num_vertices
    this%num_ghost_vefs=0
    this%num_ghost_cells=0
    !write(*,*) this%num_dimensions,this%num_vertices,this%num_vefs,this%max_vefs_per_cell,this%num_local_cells
    call mesh%move_cells(this%ptr_vefs_per_cell,this%lst_vefs_lids)
    !write(*,*) this%ptr_vefs_per_cell
    !write(*,*) this%lst_vefs_lids
    call mesh%move_coordinates(this%coordinates)
    !write(*,*) this%coordinates
    call mesh%get_boundary(boundary,boundary_geo,boundary_set)
    !write(*,*) boundary%p,boundary%l

    ! Generate vefs
    call this%allocate_and_fill_cells_around()
    !write(*,*) this%ptrs_cells_around
    !write(*,*) this%lst_cells_around
    write(*,*) 'Dual mesh ready'

    call this%generate_vefs(boundary,boundary_geo,boundary_set)
    !call this%generate_vefs()
    write(*,*) 'Generating vefs done'

    call mesh%free()
  end subroutine serial_triangulation_create
  
  recursive subroutine serial_triangulation_free ( this )
    implicit none
    class(serial_triangulation_t), intent(inout) :: this
    integer(ip)                                  :: icell, ivef, istat
    call this%free_ptr_vefs_per_cell()
    call this%free_lst_vefs_lids()
    this%num_local_cells = -1
    this%num_vefs = -1
    !JP-TODO: free coordinates
  end subroutine serial_triangulation_free

  subroutine serial_triangulation_print ( this )
    class(serial_triangulation_t), intent(in) :: this
    integer(ip) :: ivef
    type(vef_iterator_t)  :: vef_iterator
    type(cell_iterator_t) :: cell_iterator
    type(cell_accessor_t) :: cell
    !type(vef_accessor_t)  :: vef
    integer(ip) :: vef_lid

    write (*,'(a)') '****print type(serial_triangulation_t)****'
    write (*,'(a,i10)'  ) 'num_dimensions:', this%num_dimensions
    write (*,'(a,i10)'  ) 'num_local_cells:', this%num_local_cells
    write (*,'(a,i10)'  ) 'num_ghost_cells:', this%num_ghost_cells
     
    write (*,'(a)') '**** Cells ****'
    cell_iterator = this%create_cell_iterator()
    do while ( .not. cell_iterator%has_finished() )
       cell = cell_iterator%current()
       write(*,'(a,i10,a)') '**** cell: ', cell%get_lid(),'****'
       write (*,'(a,i10)'  ) 'num_vefs :', cell%get_num_vefs()
       write (*,'(a)') 'vefs_lid:' 
       do ivef=1, cell%get_num_vefs()
          write (*,'(a,i10)'  ) 'vef_lid:', cell%get_vef_lid(ivef)
       end do
       call cell_iterator%next()
    end do

    ! write (*,'(a)') '**** Vefs ****'
    ! vef_iterator = this%create_vef_iterator()
    ! do while ( .not. vef_iterator%has_finished() )
    !    vef => vef_iterator%current()
    !    vef_lid = vef%get_lid()
    !    write(*,*) this%vefs_set(vef_lid),this%vefs_geometry(vef_lid)
    !    call vef_iterator%next()
    ! end do

  end subroutine serial_triangulation_print
