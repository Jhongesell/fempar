! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
function par_base_static_tria_get_par_environment ( this )
  implicit none
  class(par_base_static_triangulation_t), target, intent(in) :: this
  type(par_environment_t), pointer                           :: par_base_static_tria_get_par_environment
  par_base_static_tria_get_par_environment => this%p_env
end function par_base_static_tria_get_par_environment

function par_base_static_tria_get_element_import ( this )
  implicit none
  class(par_base_static_triangulation_t), target, intent(in) :: this
  type(element_import_t), pointer                            :: par_base_static_tria_get_element_import
  par_base_static_tria_get_element_import => this%element_import
end function par_base_static_tria_get_element_import 

function par_base_static_tria_get_coarse_triangulation ( this )
  implicit none
  class(par_base_static_triangulation_t), target, intent(in) :: this
  type(coarse_triangulation_t), pointer :: par_base_static_tria_get_coarse_triangulation
  assert ( this%p_env%am_i_lgt1_task() )
  par_base_static_tria_get_coarse_triangulation => this%coarse_triangulation
end function par_base_static_tria_get_coarse_triangulation  

subroutine par_base_static_tria_compute_parts_itfc_vefs ( this, parts_itfc_vefs, perm_itfc_vefs )
    implicit none
    class(par_base_static_triangulation_t), intent(in)    :: this
    integer(ip), allocatable  , intent(inout) :: parts_itfc_vefs(:,:)
    integer(ip), allocatable  , intent(inout) :: perm_itfc_vefs(:)
    
    integer(ip)                               :: num_neighbours
    logical, allocatable                      :: touched_neighbours(:)
    integer(ip)                               :: nparts_around, mypart_id, part_id, local_part_id
    integer(ip)                               :: ivef_itfc, icell, vef_lid
    type(cell_accessor_t)                     :: cell 
    integer(ip)                               :: num_rows_parts_itfc_vefs
    integer(ip), allocatable                  :: work1(:), work2(:)
    type(itfc_vef_iterator_t)                 :: itfc_vef_iterator
    type(vef_accessor_t)                      :: current_itfc_vef
    
    assert ( this%p_env%am_i_l1_task() )
    
    if (allocated(parts_itfc_vefs)) call memfree(parts_itfc_vefs,__FILE__,__LINE__)
    if (allocated(perm_itfc_vefs)) call memfree(perm_itfc_vefs,__FILE__,__LINE__)
    
    mypart_id = this%p_env%get_l1_rank() + 1 
   
    num_neighbours = this%element_import%get_number_neighbours()    
    call memalloc ( num_neighbours, touched_neighbours, __FILE__, __LINE__ )
    
    ! The two extra rows in parts_per_itfc_vef are required in order to: (1) hold the number of parts around an interface vef
    !                                                                    (2) to hold mypart_id, which should be also listed among 
    !                                                                        the parts around each vef
    num_rows_parts_itfc_vefs = num_neighbours + 2
    call memalloc ( num_rows_parts_itfc_vefs, this%num_itfc_vefs, parts_itfc_vefs, __FILE__, __LINE__ )
    parts_itfc_vefs = 0
    
    
    itfc_vef_iterator = this%create_itfc_vef_iterator()
    ivef_itfc = 1
    do while ( .not. itfc_vef_iterator%has_finished() )
      current_itfc_vef = itfc_vef_iterator%current()
      touched_neighbours = .false.
      
      nparts_around = 1 
      parts_itfc_vefs(nparts_around+1,ivef_itfc) = mypart_id
      
      do icell=1, current_itfc_vef%get_num_cells_around()
        cell          = current_itfc_vef%get_cell_around(icell)
        part_id       = cell%get_mypart()
        if ( part_id /= mypart_id ) then
         local_part_id = this%element_import%get_local_neighbour_id(part_id)
         if (.not. touched_neighbours (local_part_id)) then
           touched_neighbours (local_part_id) = .true.
           nparts_around = nparts_around + 1 
           parts_itfc_vefs(nparts_around+1,ivef_itfc) = part_id
         end if
        end if
      end do
      parts_itfc_vefs(1,ivef_itfc) = nparts_around
      ! Sort list of parts in increasing order by part identifiers
      ! This is required by the call to icomp subroutine below 
      call sort ( nparts_around, parts_itfc_vefs(2:nparts_around+1, ivef_itfc) )
      call itfc_vef_iterator%next()
      ivef_itfc = ivef_itfc + 1
    end do
    call memalloc ( this%num_itfc_vefs, perm_itfc_vefs, __FILE__, __LINE__ )
    do ivef_itfc = 1, this%num_itfc_vefs
      perm_itfc_vefs(ivef_itfc) = ivef_itfc 
    end do
    
    ! Re-number vefs in increasing order by the number of parts that share them, 
    ! and among vefs sharing the same list of parts, in increasing order by the list 
    ! of parts shared by the vef 
    call memalloc ( num_rows_parts_itfc_vefs, work1, __FILE__,__LINE__ )
    call memalloc ( num_rows_parts_itfc_vefs, work2, __FILE__,__LINE__ )
    call sort_array_cols_by_row_section( num_rows_parts_itfc_vefs, & 
       &                                 num_rows_parts_itfc_vefs, & 
       &                                 this%num_itfc_vefs, & 
       &                                 parts_itfc_vefs, & 
       &                                 perm_itfc_vefs, &
       &                                 work1, &
       &                                 work2 ) 
    call memfree ( work2, __FILE__,__LINE__ )
    call memfree ( work1, __FILE__,__LINE__ )
    call memfree ( touched_neighbours, __FILE__, __LINE__ )
    
    do ivef_itfc=1,this%num_itfc_vefs
      write(6,'(10i10)') ivef_itfc, this%lst_itfc_vefs(perm_itfc_vefs(ivef_itfc)), parts_itfc_vefs(:, ivef_itfc) 
    end do
  end subroutine par_base_static_tria_compute_parts_itfc_vefs
  
  subroutine par_base_static_tria_compute_vefs_and_parts_object(this)
    implicit none
    class(par_base_static_triangulation_t), intent(inout) :: this
    integer(ip)                               :: nparts_around
    integer(ip)                               :: ivef_itfc, init_vef, end_vef
    integer(ip)                               :: iobj, ipart
    integer(ip)                               :: num_rows_parts_itfc_vefs
    integer(ip), allocatable                  :: parts_itfc_vefs (:,:)
    integer(ip), allocatable                  :: perm_itfc_vefs(:)
    type(list_iterator_t)                     :: vefs_object_iterator, parts_object_iterator

    assert ( this%p_env%am_i_l1_task() )
    
    call this%compute_parts_itfc_vefs(parts_itfc_vefs,perm_itfc_vefs)
    num_rows_parts_itfc_vefs = size(parts_itfc_vefs,1)
    
    ! Count number_objects
    ivef_itfc = 1
    this%number_objects = 0
    do while ( ivef_itfc <= this%num_itfc_vefs ) 
      if ( ivef_itfc < this%num_itfc_vefs ) then
        do while (icomp(num_rows_parts_itfc_vefs,parts_itfc_vefs(:,ivef_itfc),parts_itfc_vefs(:,ivef_itfc+1)) == 0)
          ivef_itfc = ivef_itfc + 1
          if ( ivef_itfc == this%num_itfc_vefs  ) exit
        end do
      end if  
      this%number_objects = this%number_objects + 1
      ivef_itfc = ivef_itfc + 1
    end do
        
    ! Count number_vefs_per_object and number_parts_per_object
    call this%vefs_object%create(n=this%number_objects)
    call this%parts_object%create(n=this%number_objects)
    ivef_itfc = 1
    this%number_objects = 0
    do while ( ivef_itfc <= this%num_itfc_vefs ) 
      init_vef = ivef_itfc
      if ( ivef_itfc < this%num_itfc_vefs ) then
        do while (icomp(num_rows_parts_itfc_vefs,parts_itfc_vefs(:,ivef_itfc),parts_itfc_vefs(:,ivef_itfc+1)) == 0)
          ivef_itfc = ivef_itfc + 1
          if ( ivef_itfc == this%num_itfc_vefs  ) exit
        end do
      end if  
      end_vef = ivef_itfc
      nparts_around = parts_itfc_vefs(1,end_vef)
      this%number_objects = this%number_objects + 1
      call this%parts_object%sum_to_pointer_index(this%number_objects, nparts_around)
      call this%vefs_object%sum_to_pointer_index(this%number_objects, end_vef-init_vef+1 )
      ivef_itfc = ivef_itfc + 1
    end do
    
    call this%vefs_object%calculate_header()
    call this%parts_object%calculate_header()
    call this%vefs_object%allocate_list_from_pointer()
    call this%parts_object%allocate_list_from_pointer()
    
    ! List number_vefs_per_object and number_parts_per_object
    ivef_itfc=1
    do iobj=1, this%vefs_object%get_num_pointers()
       vefs_object_iterator = this%vefs_object%create_iterator(iobj)
       parts_object_iterator = this%parts_object%create_iterator(iobj)
       
       nparts_around = parts_itfc_vefs(1,ivef_itfc)
       do ipart=1, nparts_around
         call parts_object_iterator%set_current(parts_itfc_vefs(1+ipart,ivef_itfc))
         call parts_object_iterator%next()
       end do
       
       do while(.not. vefs_object_iterator%is_upper_bound())
        call vefs_object_iterator%set_current(this%lst_itfc_vefs(perm_itfc_vefs(ivef_itfc)))
        call vefs_object_iterator%next()
        ivef_itfc = ivef_itfc + 1
       end do
    end do
    
    call this%vefs_object%print(6)
    call this%parts_object%print(6)
    
    call memfree ( parts_itfc_vefs, __FILE__, __LINE__ )
    call memfree ( perm_itfc_vefs, __FILE__, __LINE__ )
  end subroutine par_base_static_tria_compute_vefs_and_parts_object
  
  subroutine par_base_static_tria_compute_objects_dimension(this)
    implicit none
    class(par_base_static_triangulation_t), intent(inout) :: this
    integer(ip)                                  :: iobj, vef_lid
    type(list_iterator_t)                        :: vefs_object_iterator
    
    call memalloc ( this%number_objects, this%objects_dimension, __FILE__, __LINE__ )
    do iobj=1, this%number_objects
      vefs_object_iterator = this%vefs_object%create_iterator(iobj)
      this%objects_dimension(iobj) = 0
      do while(.not. vefs_object_iterator%is_upper_bound())
        vef_lid = vefs_object_iterator%get_current()
        this%objects_dimension(iobj) = max ( this%objects_dimension(iobj), this%vefs_dimension(vef_lid) )  
        call vefs_object_iterator%next()
       end do
    end do
  end subroutine par_base_static_tria_compute_objects_dimension
  
  subroutine par_base_static_tria_compute_objects_neighbours_exchange_data ( this, &
                                                                          num_rcv,&
                                                                          list_rcv, &
                                                                          rcv_ptrs,&
                                                                          unpack_idx, &
                                                                          num_snd, &
                                                                          list_snd,&
                                                                          snd_ptrs,&
                                                                          pack_idx )
    implicit none
    class(par_base_static_triangulation_t), intent(in)    :: this
    integer(ip)               , intent(out)   :: num_rcv
    integer(ip), allocatable  , intent(inout) :: list_rcv(:)    
    integer(ip), allocatable  , intent(inout) :: rcv_ptrs(:)
    integer(ip), allocatable  , intent(inout) :: unpack_idx(:)
    integer(ip)               , intent(out)   :: num_snd
    integer(ip), allocatable  , intent(inout) :: list_snd(:)    
    integer(ip), allocatable  , intent(inout) :: snd_ptrs(:)
    integer(ip), allocatable  , intent(inout) :: pack_idx(:)
    
    ! Locals
    integer(ip)                 :: part_id, my_part_id, num_neighbours
    integer(ip)                 :: i, iobj, istat
    type(list_iterator_t)       :: parts_object_iterator
    type(position_hash_table_t) :: position_parts_rcv
    integer(ip)                 :: current_position_parts_rcv
    type(position_hash_table_t) :: position_parts_snd
    integer(ip)                 :: current_position_parts_snd
    
    assert ( this%p_env%am_i_l1_task() )
    
    if (allocated(list_rcv)) call memfree(list_rcv,__FILE__,__LINE__)
    if (allocated(rcv_ptrs)) call memfree(rcv_ptrs,__FILE__,__LINE__)
    if (allocated(unpack_idx)) call memfree(unpack_idx,__FILE__,__LINE__)
    if (allocated(list_snd)) call memfree(list_snd,__FILE__,__LINE__)
    if (allocated(snd_ptrs)) call memfree(snd_ptrs,__FILE__,__LINE__)
    if (allocated(pack_idx)) call memfree(pack_idx,__FILE__,__LINE__)
    
    my_part_id     = this%p_env%get_l1_rank() + 1
    num_neighbours = this%element_import%get_number_neighbours()  
    
    call position_parts_rcv%init(num_neighbours)
    call position_parts_snd%init(num_neighbours)
    call memalloc ( num_neighbours  , list_rcv, __FILE__, __LINE__ )
    call memalloc ( num_neighbours+1, rcv_ptrs, __FILE__, __LINE__ )
    rcv_ptrs = 0 
    
    call memalloc ( num_neighbours  , list_snd, __FILE__, __LINE__ )
    call memalloc ( num_neighbours+1, snd_ptrs, __FILE__, __LINE__ )
    snd_ptrs = 0
    
    num_rcv = 0
    num_snd = 0
    do iobj=1, this%number_objects
       parts_object_iterator = this%parts_object%create_iterator(iobj)
       part_id = parts_object_iterator%get_current()
       if ( my_part_id == part_id ) then
         ! I am owner of the present object
         call parts_object_iterator%next()
         do while ( .not. parts_object_iterator%is_upper_bound() ) 
            part_id = parts_object_iterator%get_current()
            ! Insert part_id in the list of parts I have to send data
            ! Increment by +1 the amount of data I have to send to part_id
            call position_parts_snd%get(key=part_id, val=current_position_parts_snd, stat=istat)
            if ( istat == new_index ) then
              list_snd ( current_position_parts_snd ) = part_id
            end if
            snd_ptrs(current_position_parts_snd+1) = snd_ptrs(current_position_parts_snd+1)+1
            call parts_object_iterator%next()
         end do
       else
         ! I am non-owner of the present object
         call position_parts_rcv%get(key=part_id, val=current_position_parts_rcv, stat=istat)
         if ( istat == new_index ) then
           list_rcv ( current_position_parts_rcv ) = part_id
         end if
         rcv_ptrs(current_position_parts_rcv+1) = rcv_ptrs(current_position_parts_rcv+1)+1 
       end if
    end do
   
    num_rcv = position_parts_rcv%last()
    num_snd = position_parts_snd%last() 
    rcv_ptrs(1) = 1 
    do i=1, num_rcv
      rcv_ptrs(i+1) = rcv_ptrs(i+1) + rcv_ptrs(i)
    end do
    
    snd_ptrs(1) = 1 
    do i=1, num_snd
      snd_ptrs(i+1) = snd_ptrs(i+1) + snd_ptrs(i)
    end do
    
    call memrealloc ( num_snd+1, snd_ptrs, __FILE__, __LINE__ )
    call memrealloc ( num_rcv+1, rcv_ptrs, __FILE__, __LINE__ )
    call memrealloc ( num_snd, list_snd, __FILE__, __LINE__ )
    call memrealloc ( num_rcv, list_rcv, __FILE__, __LINE__ )
    call memalloc ( snd_ptrs(num_snd+1)-1, pack_idx, __FILE__, __LINE__ )
    call memalloc ( rcv_ptrs(num_rcv+1)-1, unpack_idx, __FILE__, __LINE__ )
    
    do iobj=1, this%number_objects
       parts_object_iterator = this%parts_object%create_iterator(iobj)
       part_id = parts_object_iterator%get_current()
       if ( my_part_id == part_id ) then
         ! I am owner of the present object
         call parts_object_iterator%next()
         do while ( .not. parts_object_iterator%is_upper_bound() ) 
           part_id = parts_object_iterator%get_current()
           call position_parts_snd%get(key=part_id, val=current_position_parts_snd, stat=istat)
           pack_idx (snd_ptrs(current_position_parts_snd)) = iobj
           snd_ptrs(current_position_parts_snd) = snd_ptrs(current_position_parts_snd)+1
           call parts_object_iterator%next()
         end do
       else
         ! I am non-owner of the present object
         call position_parts_rcv%get(key=part_id, val=current_position_parts_rcv, stat=istat)
         unpack_idx (rcv_ptrs(current_position_parts_rcv)) = iobj
         rcv_ptrs(current_position_parts_rcv) = rcv_ptrs(current_position_parts_rcv)+1 
       end if
    end do
    
    do i=num_snd, 2, -1
      snd_ptrs(i) = snd_ptrs(i-1) 
    end do
    snd_ptrs(1) = 1 
    
    do i=num_rcv, 2, -1
      rcv_ptrs(i) = rcv_ptrs(i-1) 
    end do
    rcv_ptrs(1) = 1
    
    call position_parts_rcv%free()
    call position_parts_snd%free()
  end subroutine par_base_static_tria_compute_objects_neighbours_exchange_data 
  
  subroutine par_base_static_tria_compute_num_global_objs_and_their_gids ( this )
    implicit none
    class(par_base_static_triangulation_t), intent(inout) :: this

    integer(ip)               :: num_rcv
    integer(ip), allocatable  :: list_rcv(:)    
    integer(ip), allocatable  :: rcv_ptrs(:)
    integer(ip), allocatable  :: unpack_idx(:)
    
    integer(ip)               :: num_snd
    integer(ip), allocatable  :: list_snd(:)    
    integer(ip), allocatable  :: snd_ptrs(:)
    integer(ip), allocatable  :: pack_idx(:)
   
    integer(ip)               :: number_local_objects_with_gid
    integer(ip), allocatable  :: local_objects_with_gid(:)
    integer(ip), allocatable  :: per_rank_objects_with_gid(:)
    integer(ip)               :: start_object_gid
    type(list_iterator_t)     :: parts_object_iterator
    integer(ip)               :: my_part_id, number_parts
    integer(ip)               :: i, iobj
    integer                   :: my_rank
    
    integer       , parameter :: root_pid = 0
    integer(ip)               :: dummy_integer_array(1)

    assert ( this%p_env%am_i_l1_task() )
    my_rank      = this%p_env%get_l1_rank() 
    my_part_id   = my_rank + 1 
    number_parts = this%p_env%get_l1_size()
    
    ! 1. Count/list how many local objects I am responsible to assign a global ID
    call memalloc ( this%number_objects, local_objects_with_gid, __FILE__, __LINE__ )
    number_local_objects_with_gid = 0
    do iobj=1, this%number_objects
      parts_object_iterator = this%parts_object%create_iterator(iobj)
      if ( my_part_id == parts_object_iterator%get_current() ) then
        number_local_objects_with_gid = number_local_objects_with_gid + 1
        local_objects_with_gid (number_local_objects_with_gid) = iobj
      end if
    end do
    
    ! 2. Gather + Scatter
    if ( my_rank == root_pid ) then
      call memalloc( number_parts+1, per_rank_objects_with_gid, __FILE__,__LINE__ )
      call this%p_env%l1_gather (root=root_pid, &
                                 input_data=number_local_objects_with_gid, &
                                 output_data=per_rank_objects_with_gid(2:) ) 
       ! Transform length to header
       per_rank_objects_with_gid(1)=1 
       do i=1, number_parts
          per_rank_objects_with_gid(i+1) = per_rank_objects_with_gid(i) + per_rank_objects_with_gid(i+1) 
       end do
       this%number_global_objects = per_rank_objects_with_gid(number_parts+1)-1 
    else
      call this%p_env%l1_gather (root=root_pid, &
                                 input_data=number_local_objects_with_gid, &
                                 output_data=dummy_integer_array ) 
    end if
    
    call this%p_env%l1_bcast (root=root_pid, data = this%number_global_objects )
    
    if ( my_rank == root_pid ) then
      call this%p_env%l1_scatter (root=root_pid, &
                                  input_data=per_rank_objects_with_gid, &
                                  output_data=start_object_gid) 
      call memfree( per_rank_objects_with_gid, __FILE__,__LINE__ )
    else
      call this%p_env%l1_scatter (root=root_pid, &
                                  input_data=dummy_integer_array, &
                                  output_data=start_object_gid) 
    end if
    
    
    call memalloc (this%number_objects, this%objects_gids)
    do i=1, number_local_objects_with_gid
      this%objects_gids ( local_objects_with_gid(i) ) = start_object_gid
      start_object_gid = start_object_gid + 1 
    end do
    
    ! Set-up objects nearest neighbour exchange data
    ! num_rcv, rcv_ptrs, lst_rcv, unpack_idx
    ! num_snd, snd_ptrs, lst_snd, pack_idx    
    call this%compute_objects_neighbours_exchange_data ( num_rcv, &
                                                         list_rcv,&
                                                         rcv_ptrs,&
                                                         unpack_idx,&
                                                         num_snd,&
                                                         list_snd,&
                                                         snd_ptrs,&
                                                         pack_idx )
    
    call this%p_env%l1_neighbours_exchange ( num_rcv, &
                                             list_rcv,&
                                             rcv_ptrs,&
                                             unpack_idx,&
                                             num_snd,&
                                             list_snd,&
                                             snd_ptrs,&
                                             pack_idx,&
                                             this%objects_gids )
    
    call memfree ( list_rcv, __FILE__, __LINE__ )
    call memfree ( rcv_ptrs, __FILE__, __LINE__ )
    call memfree ( unpack_idx, __FILE__, __LINE__ )
    call memfree ( list_snd, __FILE__, __LINE__ )
    call memfree ( snd_ptrs, __FILE__, __LINE__ )
    call memfree ( pack_idx, __FILE__, __LINE__ )
    call memfree ( local_objects_with_gid, __FILE__, __LINE__ )
  end subroutine par_base_static_tria_compute_num_global_objs_and_their_gids
  
  subroutine par_base_static_tria_setup_coarse_triangulation ( this )
    implicit none
    class(par_base_static_triangulation_t), intent(inout) :: this
    integer(igp)              , allocatable   :: coarse_cells_gid(:)
    integer(ip)               , allocatable   :: coarse_vefs_recv_counts(:)
    integer(ip)               , allocatable   :: coarse_vefs_displs(:)
    integer(igp)              , allocatable   :: lst_coarse_vef_gids(:)
    integer(ip)               , allocatable   :: lst_coarse_vef_dimension(:)
    integer(ip)               , allocatable   :: l2_part_id_neighbours(:)
    integer(ip)               , allocatable   :: coarse_dgraph_recv_counts(:)
    integer(ip)               , allocatable   :: coarse_dgraph_displs(:)
    integer(ip)               , allocatable   :: lextn(:)
    integer(ip)               , allocatable   :: lextp(:)
    
    integer(ip)                      :: i, istat
    integer(ip)                      :: num_dimensions
    integer(ip)                      :: num_local_coarse_cells
    integer(ip)                      :: num_itfc_coarse_cells
    
    ! All MPI tasks (even if they are not involved in the L2 from L1 gather) should also allocate the
    ! allocatable arrays due to the fact that non-allocated allocatable arrays cannot
    ! be passed as actual arguments of dummy arguments that do not have the allocatable attribute 
    ! (see e.g. par_base_static_triangulation%create() below). Otherwise, the code crashes with a segmentation fault. 
    ! Likewise, actual arguments which are used as input dummy arguments to size another array-type dummy arguments should also
    ! be initialized on all MPI tasks
    num_local_coarse_cells = 0
    num_itfc_coarse_cells  = 0
    call memalloc (0, coarse_cells_gid, __FILE__, __LINE__)
    call memalloc (0, coarse_vefs_recv_counts, __FILE__, __LINE__)
    call memalloc (0, coarse_vefs_displs, __FILE__, __LINE__)
    call memalloc (0, lst_coarse_vef_gids, __FILE__, __LINE__)
    call memalloc (0, lst_coarse_vef_dimension, __FILE__, __LINE__)
    call memalloc (0, l2_part_id_neighbours, __FILE__, __LINE__)
    call memalloc (0, coarse_dgraph_recv_counts, __FILE__, __LINE__)
    call memalloc (0, coarse_dgraph_displs, __FILE__, __LINE__)
    call memalloc (0, lextn, __FILE__, __LINE__)
    call memalloc (0, lextp, __FILE__, __LINE__)
        
    ! L2 tasks gather from L1 tasks all raw data required to set-up the coarse triangulation on L2 tasks
    if ( this%p_env%am_i_l1_to_l2_task() ) then
      call this%p_env%l1_to_l2_transfer ( this%num_dimensions, num_dimensions ) 
      call this%gather_coarse_cell_gids (coarse_cells_gid)
      call this%gather_coarse_vefs_rcv_counts_and_displs (coarse_vefs_recv_counts, coarse_vefs_displs)
      call this%gather_coarse_vefs_gids (coarse_vefs_recv_counts, coarse_vefs_displs, lst_coarse_vef_gids)
      call this%gather_coarse_vefs_dimension (coarse_vefs_recv_counts, coarse_vefs_displs, lst_coarse_vef_dimension)
      call this%fetch_l2_part_id_neighbours(l2_part_id_neighbours)
      call this%gather_coarse_dgraph_rcv_counts_and_displs ( l2_part_id_neighbours, &
                                                             coarse_dgraph_recv_counts, &
                                                             coarse_dgraph_displs )
      call this%gather_coarse_dgraph_lextn_and_lextp ( l2_part_id_neighbours, &
                                                       coarse_dgraph_recv_counts, &
                                                       coarse_dgraph_displs, &
                                                       lextn, &
                                                       lextp )
      ! Evaluate number of local coarse cells
      num_local_coarse_cells = this%p_env%get_l1_to_l2_size()-1
      
      ! Evaluate number of interface coarse cells
      ! Adapt and re-use coarse_vefs_displs/coarse_dgraph_recv_counts/coarse_dgraph_displs
      ! as required by this%par_base_static_triangulation%create below
      num_itfc_coarse_cells = this%adapt_coarse_raw_arrays (coarse_vefs_displs, &
                                                            coarse_dgraph_recv_counts, &
                                                            coarse_dgraph_displs )
    end if
    
    if ( this%p_env%am_i_lgt1_task() ) then
      ! lgt1 MPI tasks (recursively) build coarse triangulation
      allocate  ( this%coarse_triangulation, stat = istat )
      check( istat == 0 )
      call this%coarse_triangulation%create ( par_environment              = this%p_env%get_next_level(), &
                                              num_dimensions               = num_dimensions, &
                                              num_local_cells              = num_local_coarse_cells, &
                                              cells_gid                    = coarse_cells_gid, &
                                              ptr_vefs_per_cell            = coarse_vefs_displs, &
                                              lst_vefs_gids                = lst_coarse_vef_gids, &
                                              lst_vefs_dimension           = lst_coarse_vef_dimension, &
                                              num_itfc_cells               = num_itfc_coarse_cells, &
                                              lst_itfc_cells               = coarse_dgraph_recv_counts, &
                                              ptr_ext_neighs_per_itfc_cell = coarse_dgraph_displs, &
                                              lst_ext_neighs_gids          = lextn, &
                                              lst_ext_neighs_part_ids      = lextp )
    else
      ! L1 tasks do not hold any piece of the coarse triangulation
      nullify(this%coarse_triangulation)
    end if
    
    ! All tasks free raw data (see actual reason on the top part of this subroutine)
    call memfree (coarse_cells_gid, __FILE__, __LINE__)
    call memfree (coarse_vefs_recv_counts, __FILE__, __LINE__)
    call memfree (coarse_vefs_displs, __FILE__, __LINE__)
    call memfree (lst_coarse_vef_gids, __FILE__, __LINE__)
    call memfree (lst_coarse_vef_dimension, __FILE__, __LINE__)
    call memfree (l2_part_id_neighbours, __FILE__, __LINE__)
    call memfree (coarse_dgraph_recv_counts, __FILE__, __LINE__)
    call memfree (coarse_dgraph_displs, __FILE__, __LINE__)
    call memfree (lextn, __FILE__, __LINE__)
    call memfree (lextp, __FILE__, __LINE__)
  end subroutine par_base_static_tria_setup_coarse_triangulation
  
  subroutine par_base_static_tria_gather_coarse_cell_gids( this, coarse_cell_gids)
    implicit none
    class(par_base_static_triangulation_t), intent(in)    :: this
    integer(igp) , allocatable , intent(inout) :: coarse_cell_gids(:)
    
    integer(ip)                               :: i
    integer(ip)                               :: l1_to_l2_size
    integer(igp)                              :: dummy_integer_array(0)
    
    assert ( this%p_env%am_i_l1_to_l2_task() )
    if ( this%p_env%am_i_l1_to_l2_root() ) then
      l1_to_l2_size = this%p_env%get_l1_to_l2_size()
      if ( allocated (coarse_cell_gids) ) call memfree ( coarse_cell_gids, __FILE__, __LINE__ )
      call memalloc ( l1_to_l2_size, coarse_cell_gids, __FILE__, __LINE__ )
      call this%p_env%l2_from_l1_gather( input_data = 0_igp, &
                                         output_data = coarse_cell_gids ) 
    else
      call this%p_env%l2_from_l1_gather( input_data  = int(this%p_env%get_l1_rank()+1,igp), &
                                         output_data = dummy_integer_array ) 
    end if
  end subroutine par_base_static_tria_gather_coarse_cell_gids
  
  
  subroutine par_base_static_tria_gather_coarse_vefs_rcv_counts_and_displs( this, recv_counts, displs )
    implicit none
    class(par_base_static_triangulation_t), intent(in)    :: this
    integer(ip) , allocatable , intent(inout) :: recv_counts(:) 
    integer(ip) , allocatable , intent(inout) :: displs(:)
    integer(ip)                               :: i
    integer(ip)                               :: l1_to_l2_size
    integer(ip)                               :: dummy_integer_array(0)

    assert ( this%p_env%am_i_l1_to_l2_task() )
    if ( this%p_env%am_i_l1_to_l2_root() ) then
      l1_to_l2_size = this%p_env%get_l1_to_l2_size()
      if ( allocated (recv_counts) ) call memfree ( recv_counts, __FILE__, __LINE__ )
      if ( allocated (displs) ) call memfree ( displs, __FILE__, __LINE__ )
      call memalloc ( l1_to_l2_size, recv_counts, __FILE__, __LINE__ )
      call memalloc ( l1_to_l2_size, displs, __FILE__, __LINE__ )
      call this%p_env%l2_from_l1_gather( input_data = 0, &
                                         output_data = recv_counts ) 
      displs(1) = 0
      do i=2, l1_to_l2_size
        displs(i) = displs(i-1) + recv_counts(i-1)
      end do
    else
      call this%p_env%l2_from_l1_gather( input_data  = this%number_objects, &
                                         output_data = dummy_integer_array ) 
    end if
  end subroutine par_base_static_tria_gather_coarse_vefs_rcv_counts_and_displs
  
  subroutine par_base_static_tria_gather_coarse_vefs_gids ( this, recv_counts, displs, lst_gids )
    implicit none
    class(par_base_static_triangulation_t), intent(in)    :: this
    integer(ip)               , intent(in)    :: recv_counts(this%p_env%get_l1_to_l2_size())
    integer(ip)               , intent(in)    :: displs(this%p_env%get_l1_to_l2_size())
    integer(igp), allocatable , intent(inout) :: lst_gids(:)
    integer(ip)                               :: l1_to_l2_size
    integer(igp)                              :: dummy_integer_array_igp(0)
    integer(ip)                               :: dummy_integer_array_ip(0)
    
    assert ( this%p_env%am_i_l1_to_l2_task() )
    if ( this%p_env%am_i_l1_to_l2_root() ) then
      l1_to_l2_size = this%p_env%get_l1_to_l2_size()
      if (allocated(lst_gids)) call memfree ( lst_gids, __FILE__, __LINE__ )
      call memalloc ( displs(l1_to_l2_size), lst_gids, __FILE__, __LINE__ )
      call this%p_env%l2_from_l1_gather( input_data_size = 0, &
                                         input_data      = dummy_integer_array_igp, &
                                         recv_counts     = recv_counts, &
                                         displs          = displs, &
                                         output_data     = lst_gids )
    else
      call this%p_env%l2_from_l1_gather( input_data_size = this%number_objects, &
                                         input_data      = this%objects_gids, &
                                         recv_counts     = dummy_integer_array_ip, &
                                         displs          = dummy_integer_array_ip, &
                                         output_data     = dummy_integer_array_igp )
    end if    
  end subroutine par_base_static_tria_gather_coarse_vefs_gids
  
  subroutine par_base_static_tria_gather_coarse_vefs_dimension ( this, recv_counts, displs, lst_vefs_dimension )
    implicit none
    class(par_base_static_triangulation_t), intent(in)    :: this
    integer(ip)                  , intent(in)    :: recv_counts(this%p_env%get_l1_to_l2_size())
    integer(ip)                  , intent(in)    :: displs(this%p_env%get_l1_to_l2_size())
    integer(ip), allocatable     , intent(inout) :: lst_vefs_dimension(:)
    integer(ip)                                  :: l1_to_l2_size
    integer(ip)                                  :: dummy_integer_array(0)
    
    assert ( this%p_env%am_i_l1_to_l2_task() )
    if ( this%p_env%am_i_l1_to_l2_root() ) then
      l1_to_l2_size = this%p_env%get_l1_to_l2_size()
      if (allocated(lst_vefs_dimension)) call memfree ( lst_vefs_dimension, __FILE__, __LINE__ )
      call memalloc (displs(l1_to_l2_size), lst_vefs_dimension, __FILE__, __LINE__ )
      call this%p_env%l2_from_l1_gather( input_data_size = 0, &
                                         input_data      = dummy_integer_array, &
                                         recv_counts     = recv_counts, &
                                         displs          = displs, &
                                         output_data     = lst_vefs_dimension )
    else
      call this%p_env%l2_from_l1_gather( input_data_size = this%number_objects, &
                                         input_data      = this%objects_dimension, &
                                         recv_counts     = dummy_integer_array, &
                                         displs          = dummy_integer_array, &
                                         output_data     = dummy_integer_array )
    end if    
  end subroutine par_base_static_tria_gather_coarse_vefs_dimension
  
  subroutine par_base_static_tria_fetch_l2_part_id_neighbours ( this, l2_part_id_neighbours )    
    implicit none
    class(par_base_static_triangulation_t), intent(in)    :: this
    integer(ip) , allocatable , intent(inout) :: l2_part_id_neighbours(:)
    integer(ip) :: my_l2_part_id
    integer(ip) :: num_neighbours
    assert ( this%p_env%am_i_l1_to_l2_task() )
    if (this%p_env%am_i_l1_task()) then
      num_neighbours = this%element_import%get_number_neighbours()
      my_l2_part_id  = this%p_env%get_l2_part_id_l1_task_is_mapped_to()
      if (allocated(l2_part_id_neighbours)) call memfree ( l2_part_id_neighbours, __FILE__, __LINE__ )
      call memalloc ( num_neighbours, l2_part_id_neighbours, __FILE__, __LINE__ )
      call this%p_env%l1_neighbours_exchange ( num_neighbours  = num_neighbours, &
                                               list_neighbours = this%element_import%get_neighbours_ids(), &
                                               input_data      = my_l2_part_id,&
                                               output_data     = l2_part_id_neighbours)
    end if
  end subroutine par_base_static_tria_fetch_l2_part_id_neighbours
  
  subroutine par_base_static_tria_gather_coarse_dgraph_rcv_counts_and_displs ( this, &
                                                                            l2_part_id_neighbours, &
                                                                            recv_counts, &
                                                                            displs )
    implicit none
    class(par_base_static_triangulation_t), intent(in)    :: this
    integer(ip)               , intent(in)    :: l2_part_id_neighbours(this%element_import%get_number_neighbours())
    integer(ip) , allocatable , intent(inout) :: recv_counts(:) 
    integer(ip) , allocatable , intent(inout) :: displs(:)
    integer(ip) :: i
    integer(ip) :: l1_to_l2_size 
    integer(ip) :: my_l2_part_id
    integer(ip) :: num_neighbours
    integer(ip) :: num_external_l2_elements
    integer(ip) :: dummy_integer_array(0)
    
    assert ( this%p_env%am_i_l1_to_l2_task() )
    if ( this%p_env%am_i_l1_to_l2_root() ) then
      l1_to_l2_size = this%p_env%get_l1_to_l2_size()
      if (allocated(recv_counts)) call memfree ( recv_counts, __FILE__, __LINE__ )
      if (allocated(displs)) call memfree ( displs, __FILE__, __LINE__ )
      call memalloc ( l1_to_l2_size, recv_counts, __FILE__, __LINE__ )
      call memalloc ( l1_to_l2_size, displs, __FILE__, __LINE__ )
      call this%p_env%l2_from_l1_gather( input_data = 0, &
                                         output_data = recv_counts ) 
      displs(1) = 0
      do i=2, l1_to_l2_size
        displs(i) = displs(i-1) + recv_counts(i-1)
      end do
    else
      assert ( this%p_env%am_i_l1_task() )
      num_neighbours = this%element_import%get_number_neighbours()
      my_l2_part_id  = this%p_env%get_l2_part_id_l1_task_is_mapped_to()
      num_external_l2_elements = 0
      do i = 1, num_neighbours
        if ( my_l2_part_id /= l2_part_id_neighbours(i) ) then
          num_external_l2_elements = num_external_l2_elements + 1
        end if
      end do
      call this%p_env%l2_from_l1_gather( input_data = num_external_l2_elements, &
                                         output_data = dummy_integer_array ) 
    end if
  end subroutine par_base_static_tria_gather_coarse_dgraph_rcv_counts_and_displs 
  
  subroutine par_base_static_tria_gather_coarse_dgraph_lextn_and_lextp( this,                  & 
                                                                     l2_part_id_neighbours, &
                                                                     recv_counts,           &
                                                                     displs,                &
                                                                     lextn,                 &
                                                                     lextp)
    implicit none
    class(par_base_static_triangulation_t), intent(in)    :: this
    integer(ip)               , intent(in)    :: l2_part_id_neighbours(this%element_import%get_number_neighbours())
    integer(ip)               , intent(in)    :: recv_counts(this%p_env%get_l1_to_l2_size()) 
    integer(ip)               , intent(in)    :: displs(this%p_env%get_l1_to_l2_size())
    integer(ip), allocatable  , intent(inout) :: lextn(:)
    integer(ip), allocatable  , intent(inout) :: lextp(:)
    
    integer(ip)              :: i
    integer(ip)              :: l1_to_l2_size 
    integer(ip)              :: my_l2_part_id
    integer(ip)              :: num_neighbours
    integer(ip), pointer     :: neighbours_ids(:)
    integer(ip)              :: num_external_l2_elements
    integer(ip), allocatable :: lst_external_l2_element_gids(:)
    integer(ip), allocatable :: lst_external_l2_part_ids(:)
    integer(ip)              :: dummy_integer_array(0)
    
    assert ( this%p_env%am_i_l1_to_l2_task() )
    if ( this%p_env%am_i_l1_to_l2_root() ) then
      l1_to_l2_size = this%p_env%get_l1_to_l2_size()
      if (allocated(lextn)) call memfree ( lextn, __FILE__, __LINE__ )
      if (allocated(lextp)) call memfree ( lextp, __FILE__, __LINE__ )
      call memalloc ( displs(l1_to_l2_size), lextn, __FILE__, __LINE__ )
      call memalloc ( displs(l1_to_l2_size), lextp, __FILE__, __LINE__ )
      ! Gather lextn
      call this%p_env%l2_from_l1_gather( input_data_size = 0, &
                                         input_data      = dummy_integer_array, &
                                         recv_counts     = recv_counts, &
                                         displs          = displs, &
                                         output_data     = lextn )
      ! Gather lextp
      call this%p_env%l2_from_l1_gather( input_data_size = 0, &
                                         input_data      = dummy_integer_array, &
                                         recv_counts     = recv_counts, &
                                         displs          = displs, &
                                         output_data     = lextp )
    else
      assert ( this%p_env%am_i_l1_task() )
      num_neighbours =  this%element_import%get_number_neighbours()
      neighbours_ids => this%element_import%get_neighbours_ids()
      my_l2_part_id  = this%p_env%get_l2_part_id_l1_task_is_mapped_to()
      num_external_l2_elements = 0
      do i = 1, num_neighbours
        if ( my_l2_part_id /= l2_part_id_neighbours(i) ) then
          num_external_l2_elements = num_external_l2_elements + 1
        end if
      end do
      
      call memalloc (num_external_l2_elements, lst_external_l2_part_ids, __FILE__, __LINE__)
      call memalloc (num_external_l2_elements, lst_external_l2_element_gids,__FILE__, __LINE__)
      num_external_l2_elements = 0
      neighbours_ids => this%element_import%get_neighbours_ids()
      do i = 1, num_neighbours
        if ( my_l2_part_id /= l2_part_id_neighbours(i) ) then
          num_external_l2_elements = num_external_l2_elements + 1
          lst_external_l2_element_gids(num_external_l2_elements) = neighbours_ids(i)
          lst_external_l2_part_ids(num_external_l2_elements) = l2_part_id_neighbours(i)
        end if
      end do
      call this%p_env%l2_from_l1_gather( input_data_size = num_external_l2_elements, &
                                         input_data      = lst_external_l2_element_gids, &
                                         recv_counts     = dummy_integer_array, &
                                         displs          = dummy_integer_array, &
                                         output_data     = dummy_integer_array )
      
      call this%p_env%l2_from_l1_gather( input_data_size = num_external_l2_elements, &
                                         input_data      = lst_external_l2_part_ids, &
                                         recv_counts     = dummy_integer_array, &
                                         displs          = dummy_integer_array, &
                                         output_data     = dummy_integer_array )
      
      call memfree (lst_external_l2_part_ids   , __FILE__, __LINE__)
      call memfree (lst_external_l2_element_gids,__FILE__, __LINE__)
    end if
  end subroutine par_base_static_tria_gather_coarse_dgraph_lextn_and_lextp 
  
  function par_base_static_tria_adapt_coarse_raw_arrays( this, &
                                                         coarse_vefs_displs, &
                                                         coarse_dgraph_recv_counts, &
                                                         coarse_dgraph_displs ) result(num_itfc_coarse_cells)
    implicit none
    class(par_base_static_triangulation_t), intent(in)    :: this
    integer(ip)                  , intent(inout) :: coarse_vefs_displs(this%p_env%get_l1_to_l2_size())
    integer(ip)                  , intent(inout) :: coarse_dgraph_recv_counts(this%p_env%get_l1_to_l2_size())
    integer(ip)                  , intent(inout) :: coarse_dgraph_displs(this%p_env%get_l1_to_l2_size())
    integer(ip)                                  :: num_itfc_coarse_cells
    
    integer(ip) :: i 
    assert ( this%p_env%am_i_l1_to_l2_task() )
    if ( this%p_env%am_i_l1_to_l2_root() ) then
      ! Re-use coarse_vefs_displs as ptr_vefs_gids
      do i=1, size(coarse_vefs_displs)
        coarse_vefs_displs(i)=coarse_vefs_displs(i)+1
      end do
   
      ! Re-use coarse_dgraph_displs as ptr_ext_neighs_per_itfc_cell
      num_itfc_coarse_cells = 0
      coarse_dgraph_displs(1) = 1 
      do i=1, size(coarse_dgraph_recv_counts)
        if (coarse_dgraph_recv_counts(i) /= 0) then
          num_itfc_coarse_cells = num_itfc_coarse_cells+1
          coarse_dgraph_displs(num_itfc_coarse_cells+1) = coarse_dgraph_displs(num_itfc_coarse_cells) + &
                                                          coarse_dgraph_recv_counts(i)                                           
        end if  
      end do
      
      ! Re-use coarse_dgraph_recv_counts as lst_itfc_cells
      num_itfc_coarse_cells = 0
      do i=1, size(coarse_dgraph_recv_counts)
        if (coarse_dgraph_recv_counts(i) /= 0) then
          num_itfc_coarse_cells = num_itfc_coarse_cells+1
          coarse_dgraph_recv_counts(num_itfc_coarse_cells) = i
        end if  
      end do
    else
      ! L1 tasks do not hold any itfc_coarse_cells
      num_itfc_coarse_cells = 0
    end if
  end function par_base_static_tria_adapt_coarse_raw_arrays

  function par_base_static_tria_create_object_iterator(this)
    implicit none
    class(par_base_static_triangulation_t), intent(in) :: this
    type(object_iterator_t) :: par_base_static_tria_create_object_iterator
    call par_base_static_tria_create_object_iterator%create(lid=1, &
                                                            par_base_static_triangulation=this)
  end function par_base_static_tria_create_object_iterator
  
  function par_base_static_tria_create_vefs_on_object_iterator(this, lid)
    implicit none
    class(par_base_static_triangulation_t), intent(in) :: this
    integer(ip)                           , intent(in) :: lid
    type(vefs_on_object_iterator_t)                    :: par_base_static_tria_create_vefs_on_object_iterator
    call par_base_static_tria_create_vefs_on_object_iterator%create(lid, this)
  end function par_base_static_tria_create_vefs_on_object_iterator
  
  function par_base_static_tria_get_number_objects(this)
    implicit none
    class(par_base_static_triangulation_t), intent(in) :: this
    integer(ip)                                        :: par_base_static_tria_get_number_objects
    par_base_static_tria_get_number_objects = this%number_objects
  end function par_base_static_tria_get_number_objects
