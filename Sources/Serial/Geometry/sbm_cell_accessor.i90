! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine cell_accessor_create ( this, lid, base_static_triangulation )
  implicit none
  class(cell_accessor_t)                    , intent(inout) :: this
  integer(ip)                               , intent(in)    :: lid
  class(base_static_triangulation_t), target, intent(in)    :: base_static_triangulation
  !write(*,*) 'cell_accessor_create :: begining'
  call this%free()
  !write(*,*) 'cell_accessor_create :: after free'
  this%lid = lid
  this%base_static_triangulation => base_static_triangulation
  !write(*,*) 'cell_accessor_create :: end'
end subroutine cell_accessor_create

subroutine cell_accessor_free ( this)
  implicit none
  class(cell_accessor_t), intent(inout) :: this
  this%lid = -1
  nullify ( this%base_static_triangulation )
end subroutine cell_accessor_free

subroutine cell_accessor_next(this)
  implicit none
  class(cell_accessor_t), intent(inout) :: this
  this%lid = this%lid + 1
end subroutine cell_accessor_next

subroutine cell_accessor_set_lid(this, lid)
  implicit none
  class(cell_accessor_t), intent(inout) :: this
  integer(ip)        , intent(in)    :: lid
  this%lid = lid
end subroutine cell_accessor_set_lid

subroutine cell_accessor_set_gid(this, gid)
  implicit none
  class(cell_accessor_t), intent(inout) :: this
  integer(igp)          , intent(in)    :: gid
  this%base_static_triangulation%cells_gid(this%lid) = gid
end subroutine cell_accessor_set_gid

subroutine cell_accessor_set_mypart(this, mypart)
  implicit none
  class(cell_accessor_t), intent(inout) :: this
  integer(ip)           , intent(in)    :: mypart
  this%base_static_triangulation%cells_mypart(this%lid) = mypart
end subroutine cell_accessor_set_mypart

function cell_accessor_past_the_end(this)
  implicit none
  class(cell_accessor_t), intent(in) :: this
  logical :: cell_accessor_past_the_end
  cell_accessor_past_the_end = (this%lid > this%base_static_triangulation%num_local_cells + &
       this%base_static_triangulation%num_ghost_cells)
end function cell_accessor_past_the_end

function cell_accessor_get_triangulation(this)
  implicit none
  class(cell_accessor_t), intent(in) :: this
  class(base_static_triangulation_t), pointer :: cell_accessor_get_triangulation
  cell_accessor_get_triangulation => this%base_static_triangulation
end function cell_accessor_get_triangulation

pure function cell_accessor_get_lid (this)
  implicit none
  class(cell_accessor_t), intent(in) :: this
  integer(ip) :: cell_accessor_get_lid
  cell_accessor_get_lid = this%lid
end function cell_accessor_get_lid

function cell_accessor_get_gid (this)
  implicit none
  class(cell_accessor_t), intent(in) :: this
  integer(igp) :: cell_accessor_get_gid
  assert ( this%lid >= 1 .and. .not. this%past_the_end() )
  cell_accessor_get_gid = this%base_static_triangulation%cells_gid(this%lid)
end function cell_accessor_get_gid

function cell_accessor_get_reference_fe_geo (this)
  implicit none
  class(cell_accessor_t), intent(in) :: this
  class(reference_fe_t), pointer     :: cell_accessor_get_reference_fe_geo
  integer(ip) :: cell_type, istat
  assert ( this%lid >= 1 .and. .not. this%past_the_end() )
  call this%base_static_triangulation%reference_fe_geo_index%get(key=this%get_num_vefs(),val=cell_type,stat=istat)
  assert(istat==key_found)
  cell_accessor_get_reference_fe_geo => this%base_static_triangulation%reference_fe_geo_list(cell_type)%p
end function cell_accessor_get_reference_fe_geo

subroutine cell_accessor_get_coordinates (this, cell_coordinates)
  implicit none
  class(cell_accessor_t), intent(in)    :: this
  type(point_t)        ,  intent(inout) :: cell_coordinates(:)
  integer(ip)                    :: inode
  class(reference_fe_t), pointer :: reference_fe_geo

  assert ( this%lid >= 1 .and. .not. this%past_the_end() )
  assert ( allocated ( this%base_static_triangulation%coordinates ) )
  
   reference_fe_geo => this%get_reference_fe_geo()
   do inode=1, reference_fe_geo%get_number_nodes()
     cell_coordinates(inode) = this%base_static_triangulation%coordinates(this%get_node_lid(inode))
   end do
  
end subroutine cell_accessor_get_coordinates

subroutine cell_accessor_set_coordinates (this, cell_coordinates)
  implicit none
  class(cell_accessor_t), intent(inout) :: this
  type(point_t)        ,  intent(in)    :: cell_coordinates(:)
  integer(ip)                    :: inode
  class(reference_fe_t), pointer :: reference_fe_geo

  assert ( this%lid >= 1 .and. .not. this%past_the_end() )
  assert ( allocated ( this%base_static_triangulation%coordinates ) )
  
   reference_fe_geo => this%get_reference_fe_geo()
   do inode=1, reference_fe_geo%get_number_nodes()
     this%base_static_triangulation%coordinates(this%get_node_lid(inode)) = cell_coordinates(inode)
   end do
  
end subroutine cell_accessor_set_coordinates

pure function cell_accessor_get_mypart (this)
  implicit none
  class(cell_accessor_t), intent(in) :: this
  integer(ip) :: cell_accessor_get_mypart
  !assert ( this%lid >= 1 .and. .not. this%past_the_end() )
  cell_accessor_get_mypart = this%base_static_triangulation%cells_mypart(this%lid)
end function cell_accessor_get_mypart

pure function cell_accessor_get_num_vefs (this)
  implicit none
  class(cell_accessor_t), intent(in) :: this
  integer(ip)                        :: cell_accessor_get_num_vefs
  !assert ( this%lid >= 1 .and. .not. this%past_the_end() )
  cell_accessor_get_num_vefs = this%base_static_triangulation%ptr_vefs_per_cell(this%lid+1) - &
       this%base_static_triangulation%ptr_vefs_per_cell(this%lid)
end function cell_accessor_get_num_vefs

pure function cell_accessor_get_num_nodes (this)
  implicit none
  class(cell_accessor_t), intent(in) :: this
  integer(ip)                        :: cell_accessor_get_num_nodes
  !assert ( this%lid >= 1 .and. .not. this%past_the_end() )
  cell_accessor_get_num_nodes = this%base_static_triangulation%ptr_nodes_per_cell(this%lid+1) - &
       this%base_static_triangulation%ptr_nodes_per_cell(this%lid)
end function cell_accessor_get_num_nodes

function cell_accessor_get_vef_lid (this, ivef)
  implicit none
  class(cell_accessor_t), intent(in) :: this
  integer(ip)                        :: ivef
  integer(ip)                        :: cell_accessor_get_vef_lid
  assert ( this%lid >= 1 .and. .not. this%past_the_end() )
  cell_accessor_get_vef_lid = this%base_static_triangulation%lst_vefs_lids(this%base_static_triangulation%ptr_vefs_per_cell(this%lid)+ivef-1)
end function cell_accessor_get_vef_lid

function cell_accessor_get_vef_lids (this)
  implicit none
  class(cell_accessor_t), intent(in) :: this
  integer(ip)                        :: ivef
  integer(ip), pointer               :: cell_accessor_get_vef_lids(:)
  cell_accessor_get_vef_lids => this%base_static_triangulation%lst_vefs_lids(this%base_static_triangulation%ptr_vefs_per_cell(this%lid): &
                                                                             this%base_static_triangulation%ptr_vefs_per_cell(this%lid+1)-1)
end function cell_accessor_get_vef_lids

function cell_accessor_get_node_lid (this, inode)
  implicit none
  class(cell_accessor_t), intent(in) :: this
  integer(ip)                        :: inode
  integer(ip)                        :: cell_accessor_get_node_lid
  class(reference_fe_t), pointer     :: reference_fe_geo
  assert ( this%lid >= 1 .and. .not. this%past_the_end() )
  
  !reference_fe_geo => this%get_reference_fe_geo()
  !if ( reference_fe_geo%get_order() == 1 ) then
  !  assert ( inode >=1 .and. inode <= reference_fe_geo%get_number_vertices() )
  !  cell_accessor_get_node_lid = this%base_static_triangulation%lst_vefs_lids(this%base_static_triangulation%ptr_vefs_per_cell(this%lid)+inode-1)
  !else
  !  assert ( inode >=1 .and. inode <= reference_fe_geo%get_number_nodes() )
    cell_accessor_get_node_lid = this%base_static_triangulation%lst_nodes(this%base_static_triangulation%ptr_nodes_per_cell(this%lid)+inode-1)
  !end if
  
end function cell_accessor_get_node_lid

function cell_accessor_get_vef_gid (this, ivef)
  implicit none
  class(cell_accessor_t), intent(in) :: this
  integer(ip)                        :: ivef
  integer(igp)                       :: cell_accessor_get_vef_gid
  assert ( this%lid >= 1 .and. .not. this%past_the_end() )
  cell_accessor_get_vef_gid = this%base_static_triangulation%vefs_gid(this%get_vef_lid(ivef))
end function cell_accessor_get_vef_gid

function cell_accessor_find_lpos_vef_lid (this, vef_lid)
  implicit none
  class(cell_accessor_t), intent(in) :: this
  integer(ip)                        :: vef_lid
  integer(ip)                        :: cell_accessor_find_lpos_vef_lid
  integer(ip)                        :: ivef
  cell_accessor_find_lpos_vef_lid = -1
  ! Find position of vef_lid in local element
  do ivef = 1, this%get_num_vefs()
    if ( this%get_vef_lid(ivef) == vef_lid ) then
      cell_accessor_find_lpos_vef_lid = ivef
      return 
    end if
  end do
end function cell_accessor_find_lpos_vef_lid

function cell_accessor_find_lpos_vef_gid (this, vef_gid)
  implicit none
  class(cell_accessor_t), intent(in) :: this
  integer(igp)                       :: vef_gid
  integer(ip)                        :: cell_accessor_find_lpos_vef_gid
  integer(ip)                        :: ivef
  cell_accessor_find_lpos_vef_gid = -1
  ! Find position of vef_lid in local element
  do ivef = 1, this%get_num_vefs()
    if ( this%get_vef_gid(ivef) == vef_gid ) then
      cell_accessor_find_lpos_vef_gid = ivef
      return 
    end if
  end do
end function cell_accessor_find_lpos_vef_gid

subroutine cell_accessor_get_vef (this, ivef, vef)
  implicit none
  class(cell_accessor_t), intent(in)    :: this
  integer(ip),            intent(in)    :: ivef
  type(vef_accessor_t),   intent(inout) :: vef
  assert ( this%lid >= 1 .and. .not. this%past_the_end() )
  call vef%create(this%get_vef_lid(ivef), this%base_static_triangulation)
end subroutine cell_accessor_get_vef

function cell_accessor_is_local (this)
  implicit none
  class(cell_accessor_t), intent(in) :: this
  logical                            :: cell_accessor_is_local
  assert ( this%lid >= 1 .and. .not. this%past_the_end() )
  cell_accessor_is_local = (this%lid <= this%base_static_triangulation%num_local_cells)
end function cell_accessor_is_local

function cell_accessor_is_ghost (this)
  implicit none
  class(cell_accessor_t), intent(in) :: this
  logical                            :: cell_accessor_is_ghost
  assert ( this%lid >= 1 .and. .not. this%past_the_end() )
  cell_accessor_is_ghost = (this%lid > this%base_static_triangulation%num_local_cells)
end function cell_accessor_is_ghost

! Returns the sum of num_vefs over all cells up-to the present one (exclusive, i.e.,
! without considering the present one), with the cells being ordered consistently 
! with the iterator sequential traversal over all cells. At the moment of writing this
! comment (commit 0907e7b9d07e122ba69e02e0d72bac46546acc04), type(coarse_fe_space_t) needs 
! this TBP to efficiently locate a vef in the global type(list_t) data type which associates 
! DoFs to vefs. 
function cell_accessor_get_scan_sum_number_vefs(this)
  implicit none
  class(cell_accessor_t), intent(in) :: this
  integer(ip) :: cell_accessor_get_scan_sum_number_vefs
  assert ( this%lid >= 1 .and. .not. this%past_the_end() )
  cell_accessor_get_scan_sum_number_vefs = this%base_static_triangulation%ptr_vefs_per_cell(this%lid)-1
end function cell_accessor_get_scan_sum_number_vefs

