subroutine  irreducible_discrete_integration_create(this,number_dimensions,analytical_functions)
  implicit none
  class(irreducible_discrete_integration_t)     , intent(inout) :: this
  integer(ip)                                   , intent(in)    :: number_dimensions
  type(par_nsi_analytical_functions_t), target, intent(in)    :: analytical_functions
  integer(ip) :: istat

  this%number_dimensions = number_dimensions
  this%number_fields     = 1
  this%number_components = number_dimensions
  allocate(this%fe_type(this%number_fields),stat=istat)  ; check(istat==0)
  allocate(this%field_type(this%number_fields),stat=istat); check(istat==0)
  allocate(this%field_name(this%number_fields),stat=istat); check(istat==0)
  call memalloc(this%number_fields,this%field_blocks,__FILE__,__LINE__)
  call memalloc(this%number_fields,this%number_fields,this%field_coupling,__FILE__,__LINE__)
  this%fe_type(1)          = fe_type_lagrangian
  this%field_type(1)       = field_type_vector
  this%field_name(1)       = 'Displacement'
  this%field_blocks(1)     = 1
  this%field_coupling(1,1) = .true.

  ! Initializations
  this%mass_coefficient      = 0.0_rp
  this%residual_coefficient  = 1.0_rp
  this%terms_to_integrate    = tangent_and_translation_terms
  this%terms_in_the_residual = implicit_terms
  
  ! Could be done in the mother class
  this%analytical_functions => analytical_functions
  this%source_term => this%analytical_functions%get_source_term_u()

end subroutine irreducible_discrete_integration_create

function irreducible_discrete_integration_is_symmetric(this)
  implicit none
  class(irreducible_discrete_integration_t), intent(inout) :: this
  logical :: irreducible_discrete_integration_is_symmetric
  irreducible_discrete_integration_is_symmetric = .true.
end function irreducible_discrete_integration_is_symmetric

function irreducible_discrete_integration_is_coercive(this)
  implicit none
  class(irreducible_discrete_integration_t), intent(inout) :: this
  logical :: irreducible_discrete_integration_is_coercive
  irreducible_discrete_integration_is_coercive = .true.
end function irreducible_discrete_integration_is_coercive

!subroutine irreducible_discrete_integration_init_solution(this,fe_space,solution)
!  class(irreducible_discrete_integration_t), intent(inout) :: this
!  class(serial_fe_space_t)                 , intent(in)    :: fe_space
!  type(fe_function_t), target              , intent(inout) :: solution
!  this%solution => solution
!  call solution%interpolate_function(fe_space, 1, this%analytical_functions%get_zero_function_u())
!end subroutine irreducible_discrete_integration_init_solution

subroutine irreducible_discrete_integration_integrate ( this, fe_space, assembler )
  implicit none
  class(irreducible_discrete_integration_t), intent(in)    :: this
  class(serial_fe_space_t)                 , intent(inout) :: fe_space
  class(assembler_t)          , intent(inout) :: assembler

  ! FE space traversal-related data types
  class(fe_cell_iterator_t), allocatable :: fe

  ! FE integration-related data types
  type(quadrature_t)       , pointer :: quad
  type(point_t)            , pointer :: quad_coords(:)
  type(tensor_field_t), allocatable  :: shape_gradients(:,:)
  type(vector_field_t), allocatable  :: shape_values(:,:)

  ! Workspace (FE matrix and vector, assembly data), it could be allocated in the creation
  real(rp)   , allocatable :: elmat(:,:), elvec(:)
  integer(ip), allocatable :: num_dofs_per_field(:)  

  integer(ip)  :: istat
  integer(ip)  :: qpoint, num_quad_points
  integer(ip)  :: idof, jdof, num_dofs

  type(fe_cell_function_vector_t) :: cell_solution_u
  type(fe_cell_function_vector_t) :: cell_solution_u_old
  type(tensor_field_t), pointer   :: gp_solution_gradu(:)  => null()
  type(vector_field_t), pointer   :: gp_solution_value(:)  => null()
  type(vector_field_t), pointer   :: gp_solution_old_value(:) => null()

  ! Problem variables
  type(vector_field_t) :: source_term_value
  type(tensor_field_t) :: sigma, epsi, Id
  real(rp)     :: dV

  assert (associated(this%source_term)) 

  call Id%init(0.0)
  call Id%set(1,1,1.0)
  call Id%set(2,2,1.0)
  call Id%set(3,3,1.0)  

  call fe_space%set_up_cell_integration()
  call fe_space%create_fe_cell_iterator(fe)
  call cell_solution_u%create(fe_space,1)

  num_dofs = fe%get_num_dofs()
  call memalloc ( num_dofs, num_dofs, elmat, __FILE__, __LINE__ )
  call memalloc ( num_dofs, elvec, __FILE__, __LINE__ )
  call memalloc ( this%number_fields, num_dofs_per_field, __FILE__, __LINE__ )
  num_dofs_per_field(1) = fe%get_num_dofs_field(1)

  quad            => fe%get_quadrature()
  num_quad_points = quad%get_num_quadrature_points()

  do while ( .not. fe%has_finished())

     if ( fe%is_local() ) then
        ! Update FE-integration related data structures
        call fe%update_integration()
        call cell_solution_u%update(fe,this%fe_function)
        gp_solution_gradu     => cell_solution_u%get_quadrature_points_gradients()
        gp_solution_value     => cell_solution_u%get_quadrature_points_values()
        gp_solution_old_value => cell_solution_u_old%get_quadrature_points_values()


        ! Get quadrature coordinates to evaluate source_term
        quad_coords => fe%get_quadrature_points_coordinates()

        ! Compute element matrix and vector
        elmat = 0.0_rp
        elvec = 0.0_rp
        call fe%get_gradients(shape_gradients)
        call fe%get_values(shape_values)

        ! Tangent
        if (this%terms_to_integrate == tangent_terms .or. this%terms_to_integrate == tangent_and_translation_terms) then

           do qpoint = 1, num_quad_points
              dV = fe%get_det_jacobian(qpoint) * quad%get_weight(qpoint)
              ! Diffusive term
              do idof = 1, num_dofs
                 do jdof = 1, num_dofs
                    epsi  = symmetric_part(shape_gradients(jdof,qpoint))
                    sigma = lambda*trace(epsi)*Id + 2*mu*epsi
                    elmat(idof,jdof) = elmat(idof,jdof) + this%residual_coefficient * dV * double_contract(shape_gradients(idof,qpoint),sigma)
                 end do
              end do
           end do

           if( this%terms_in_the_residual == transient_terms) then
              do qpoint = 1, num_quad_points
                 dV = fe%get_det_jacobian(qpoint) * quad%get_weight(qpoint)
                 do idof = 1, num_dofs
                    do jdof = 1, num_dofs
                       epsi  = symmetric_part(shape_gradients(jdof,qpoint))
                       sigma = lambda*trace(epsi)*Id + 2*mu*epsi
                       elmat(idof,jdof) = elmat(idof,jdof) + this%mass_coefficient * dV * shape_values(idof,qpoint) * shape_values(jdof,qpoint)
                    end do
                 end do
              end do

           end if

           call fe%assembly( elmat, assembler )
          
        end if
        
        ! Residual
        if (this%terms_to_integrate == translation_terms .or. this%terms_to_integrate == tangent_and_translation_terms) then

           do qpoint = 1, num_quad_points
              dV = fe%get_det_jacobian(qpoint) * quad%get_weight(qpoint)
              ! Source term
              call this%source_term%get_value_space(quad_coords(qpoint),source_term_value)
              epsi = symmetric_part(gp_solution_gradu(qpoint))
              sigma = lambda*trace(epsi)*Id + 2*mu*epsi
              do idof = 1, num_dofs
                 elvec(idof) = elvec(idof) - this%residual_coefficient * dV * source_term_value * shape_values(idof,qpoint)
                 elvec(idof) = elvec(idof) + this%residual_coefficient * dV * double_contract(shape_gradients(idof,qpoint),sigma)
              end do
           end do

           if( this%terms_in_the_residual == transient_terms) then
              do qpoint = 1, num_quad_points
                 dV = fe%get_det_jacobian(qpoint) * quad%get_weight(qpoint)
                 ! Source term
                 call this%source_term%get_value_space(quad_coords(qpoint),source_term_value)
                 epsi = symmetric_part(gp_solution_gradu(qpoint))
                 sigma = lambda*trace(epsi)*Id + 2*mu*epsi
                 do idof = 1, num_dofs
                    elvec(idof) = elvec(idof) + this%mass_coefficient * dV * gp_solution_value(qpoint) * shape_values(idof,qpoint)
                    elvec(idof) = elvec(idof) - this%mass_coefficient * dV * gp_solution_old_value(qpoint) * shape_values(idof,qpoint)
                 end do
              end do
           end if

        end if

        call fe%assembly( elvec, assembler )
     end if
     call fe%next()
  end do

  call cell_solution_u%free()
  call fe_space%free_fe_cell_iterator(fe)
  deallocate (shape_values, stat=istat); check(istat==0);
  deallocate (shape_gradients, stat=istat); check(istat==0);
  call memfree ( num_dofs_per_field, __FILE__, __LINE__ )
  call memfree ( elmat, __FILE__, __LINE__ )
  call memfree ( elvec, __FILE__, __LINE__ )

end subroutine irreducible_discrete_integration_integrate

