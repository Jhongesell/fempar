! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

subroutine unfitted_fe_accessor_create( this, lid, fe_space )
  implicit none
  class(unfitted_fe_accessor_t)   , intent(inout) :: this
  integer(ip)                     , intent(in)    :: lid
  class(serial_fe_space_t), target, intent(in)    :: fe_space
  class(base_static_triangulation_t), pointer     :: triangulation
  call this%free()
  call this%fe_accessor_t%create(lid,fe_space)
  select type(fe_space)
  class is (serial_unfitted_fe_space_t)
    this%unfitted_fe_space => fe_space
    triangulation => this%unfitted_fe_space%get_triangulation()
    call this%unfitted_cell_accessor%create(lid,triangulation)
  class default
    check(.false.)
  end select
end subroutine unfitted_fe_accessor_create

!-----------------------------------------------------------------------------------------------------

subroutine unfitted_fe_accessor_free( this )
  implicit none
  class(unfitted_fe_accessor_t)   , intent(inout) :: this
  call this%fe_accessor_t%free()
  nullify ( this%unfitted_fe_space )
  call this%unfitted_cell_accessor%free()
end subroutine unfitted_fe_accessor_free

!-----------------------------------------------------------------------------------------------------

function unfitted_fe_accessor_get_unfitted_cell_accessor(this) result (cell_acc)
  implicit none
  class(unfitted_fe_accessor_t), target, intent(in) :: this
  class(unfitted_cell_accessor_t), pointer :: cell_acc
  cell_acc => this%unfitted_cell_accessor
  call cell_acc%set_lid(this%get_lid())
end function unfitted_fe_accessor_get_unfitted_cell_accessor

!-----------------------------------------------------------------------------------------------------

function unfitted_fe_accessor_get_quadrature(this) result (quadrature)
  implicit none
  class(unfitted_fe_accessor_t),  intent(in) :: this ! TODO why does it work without target ?
  type(quadrature_t), pointer      :: quadrature
  class(unfitted_cell_accessor_t), pointer :: cell
  integer(ip) :: mc_case
  cell => this%get_unfitted_cell_accessor()
  if ( cell%is_cut() ) then
    mc_case = cell%get_mc_case()
    quadrature => this%unfitted_fe_space%cut_quadratures(mc_case)
  else if ( cell%is_interior() ) then
    quadrature => this%fe_accessor_t%get_quadrature()
  else if ( cell%is_exterior() ) then
    quadrature => this%unfitted_fe_space%empty_quadrature
  else
    check(.false.)
  end if
end function unfitted_fe_accessor_get_quadrature

!-----------------------------------------------------------------------------------------------------

function unfitted_fe_accessor_get_fe_map(this) result (fe_map)
  implicit none
  class(unfitted_fe_accessor_t), intent(in) :: this
  type(fe_map_t), pointer :: fe_map
  class(unfitted_cell_accessor_t), pointer :: cell
  integer(ip) :: mc_case
  cell => this%get_unfitted_cell_accessor()
  if ( cell%is_cut() ) then
    mc_case = cell%get_mc_case()
    fe_map => this%unfitted_fe_space%cut_fe_maps(mc_case)
  else if ( cell%is_interior() ) then
    fe_map => this%fe_accessor_t%get_fe_map()
  else if ( cell%is_exterior() ) then
    fe_map => this%unfitted_fe_space%empty_fe_map
  else
    check(.false.)
  end if
end function unfitted_fe_accessor_get_fe_map

!-----------------------------------------------------------------------------------------------------

function unfitted_fe_accessor_get_volume_integrator(this, field_id) result (vol_int)
  implicit none
  class(unfitted_fe_accessor_t), intent(in)   :: this
  integer(ip)         , intent(in)   :: field_id
  type(volume_integrator_t), pointer :: vol_int
  class(unfitted_cell_accessor_t), pointer :: cell
  integer(ip) :: mc_case
  cell => this%get_unfitted_cell_accessor()
  if ( cell%is_cut() ) then
    mc_case = cell%get_mc_case()
    vol_int => this%unfitted_fe_space%cut_vol_integrators(mc_case)! TODO we assume only a single field
  else if ( cell%is_interior() ) then
    vol_int => this%fe_accessor_t%get_volume_integrator(field_id)
  else if ( cell%is_exterior() ) then
    vol_int => this%unfitted_fe_space%empty_vol_integrator
  else
    check(.false.)
  end if
end function unfitted_fe_accessor_get_volume_integrator

!-----------------------------------------------------------------------------------------------------

subroutine unfitted_fe_accessor_update_integration( this )
  implicit none
  class(unfitted_fe_accessor_t), intent(inout) :: this
  integer(ip) :: field_id
  type(point_t)            , pointer :: coordinates(:)
  type(fe_map_t)           , pointer :: fe_map
  type(quadrature_t)       , pointer :: quadrature
  type(volume_integrator_t), pointer :: volume_integrator

  call this%update_cut_integration()

  ! TODO we are duplicating code from the father
  ! A better way to do it?
  fe_map      => this%get_fe_map()
  coordinates => fe_map%get_coordinates()
  call this%get_coordinates(coordinates)

  quadrature => this%get_quadrature()
  call fe_map%update(quadrature)
  do field_id = 1, this%get_number_fields()
     volume_integrator => this%get_volume_integrator(field_id)
     call volume_integrator%update(fe_map)
  end do

end subroutine unfitted_fe_accessor_update_integration

!-----------------------------------------------------------------------------------------------------

subroutine unfitted_fe_accessor_update_cut_integration( this )

  implicit none
  class(unfitted_fe_accessor_t), intent(inout) :: this

  class(unfitted_cell_accessor_t), pointer :: cell
  type(quadrature_t), pointer :: quadrature
  type(fe_map_t), pointer :: fe_map
  type(volume_integrator_t), pointer :: vol_integrator
  integer(ip) :: subcell, field_id
  class(lagrangian_reference_fe_t), pointer :: geo_reference_elem

  cell => this%get_unfitted_cell_accessor()
  if ( cell%is_interior() .or. cell%is_exterior() ) return

  ! Compute modified quadrature
  quadrature => this%get_quadrature()
  do subcell = 1, cell%get_number_of_subcells()
  !TODO
  end do

  ! Update the interpolation in the fe_map and the vol_integrator
  fe_map => this%get_fe_map()
  geo_reference_elem => this%get_reference_fe_geo()
  call fe_map%update_interpolation( quadrature, geo_reference_elem )

  ! Update the interpolation in the fe_map and the vol_integrator
  do field_id = 1, this%get_number_fields()
    vol_integrator => this%get_volume_integrator(field_id)
    call vol_integrator%update_interpolation( quadrature )
  end do


end subroutine unfitted_fe_accessor_update_cut_integration

