! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine unfitted_cell_accessor_cell_accessor_create ( this, lid, base_static_triangulation )
  implicit none
  class(unfitted_cell_accessor_t)           , intent(inout) :: this
  integer(ip)                               , intent(in)    :: lid
  class(base_static_triangulation_t), target, intent(in)    :: base_static_triangulation
  call this%free()
  call this%cell_accessor_t%create(lid,base_static_triangulation)
  select type(base_static_triangulation)
  class is (serial_unfitted_triangulation_t)
    this%serial_unfitted_triangulation => base_static_triangulation 
  class default
    check(.false.)
  end select 
end subroutine unfitted_cell_accessor_cell_accessor_create

subroutine unfitted_cell_accessor_cell_accessor_free ( this)
  implicit none
  class(unfitted_cell_accessor_t), intent(inout) :: this
  call this%cell_accessor_t%free()
  nullify ( this%serial_unfitted_triangulation )
end subroutine unfitted_cell_accessor_cell_accessor_free

!function unfitted_cell_accessor_get_marching_cube_case(this)
!  implicit none
!  class(unfitted_cell_accessor_t), intent(in) :: this
!  integer(ip) :: unfitted_cell_accessor_get_marching_cube_case
!  assert ( associated(this%serial_unfitted_triangulation) )
!  assert ( allocated(this%serial_unfitted_triangulation%marching_cube_case_per_cell) )
!  assert ( this%get_lid() >=1 .and. this%get_lid() <= size(this%serial_unfitted_triangulation%marching_cube_case_per_cell))
!  unfitted_cell_accessor_get_marching_cube_case = this%serial_unfitted_triangulation%marching_cube_case_per_cell(this%get_lid())
!end function unfitted_cell_accessor_get_marching_cube_case
