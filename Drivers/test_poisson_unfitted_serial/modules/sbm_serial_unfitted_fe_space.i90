! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


subroutine serial_unfitted_fe_space_create_same_reference_fes_on_all_cells(&
  this, &
  triangulation, &
  conditions, &
  reference_fes, &
  field_blocks, &
  field_coupling )

  implicit none
  class(serial_unfitted_fe_space_t)           , intent(inout) :: this
  class(base_static_triangulation_t), target  , intent(in)    :: triangulation
  class(conditions_t)                         , intent(in)    :: conditions
  type(p_reference_fe_t)                      ,  intent(in)   :: reference_fes(:)
  integer(ip)                       , optional, intent(in)    :: field_blocks(:)
  logical                           , optional, intent(in)    :: field_coupling(:,:)

  call this%free()
  ! Initialize the member variables of the father
  call this%serial_fe_space_t%create(triangulation,conditions,reference_fes,field_blocks,field_coupling)
  select type(triangulation)
  class is (serial_unfitted_triangulation_t)
    this%unfitted_triangulation => triangulation
    ! Initialize the member variables of this class
    call this%init_reference_subelem()
    call this%init_cut_integration()
  class default
    check(.false.)
  end select

end subroutine serial_unfitted_fe_space_create_same_reference_fes_on_all_cells

!-----------------------------------------------------------------------------------------------------

subroutine serial_unfitted_fe_space_free( this )
  implicit none
  class(serial_unfitted_fe_space_t), intent(inout) :: this
  ! Free the father
  call this%serial_fe_space_t%free()
  ! Free the memory managed by this class
  call this%free_reference_subelem()
  call this%free_cut_integration()
end subroutine serial_unfitted_fe_space_free

!-----------------------------------------------------------------------------------------------------

function serial_unfitted_fe_space_create_unfitted_fe_iterator( this ) result( unfitted_fe_iterator )
  implicit none
  class(serial_unfitted_fe_space_t), intent(in) :: this
  type(unfitted_fe_iterator_t) :: unfitted_fe_iterator
  call unfitted_fe_iterator%create(1, this)
end function serial_unfitted_fe_space_create_unfitted_fe_iterator

!-----------------------------------------------------------------------------------------------------

subroutine serial_unfitted_fe_space_init_reference_subelem( this )
  implicit none
  class(serial_unfitted_fe_space_t), intent(inout) :: this

  ! Cubic quadrature for triangles enough to integrate x^2 and y^2 (stiffness matrix of qua4)
! TODO check which are the coords of the ref triangle
  real(rp), target ::  tri_xg(3) = [ 0.5000000000000000, 0.0000000000000000, 0.5000000000000000]
  real(rp), target ::  tri_yg(3) = [ 0.0000000000000000, 0.5000000000000000, 0.5000000000000000]
  real(rp), target ::  tri_zg(3) = [ 0.0000000000000000, 0.0000000000000000, 0.0000000000000000]
  real(rp), target ::  tri_wg(3) = [ 0.1666666666666666, 0.1666666666666666, 0.1666666666666666]

  ! Quadrature for a tetrahedron enough to integrate x^2*x^2 (stiffness matrix of hex8)
  ! TODO check which are the coords of the ref tetrahedron
  real(rp), target :: tet_xg(11) = [ 0.2500000000000000, 0.7857142857142857, 0.0714285714285714, 0.0714285714285714, 0.0714285714285714,&
                                     0.1005964238332008, 0.3994035761667992, 0.3994035761667992, 0.3994035761667992, 0.1005964238332008, 0.1005964238332008]
  real(rp), target :: tet_yg(11) = [ 0.2500000000000000, 0.0714285714285714, 0.0714285714285714, 0.0714285714285714, 0.7857142857142857,&
                                     0.3994035761667992, 0.1005964238332008, 0.3994035761667992, 0.1005964238332008, 0.3994035761667992, 0.1005964238332008]
  real(rp), target :: tet_zg(11) = [ 0.2500000000000000, 0.0714285714285714, 0.0714285714285714, 0.7857142857142857, 0.0714285714285714,&
                                     0.3994035761667992, 0.3994035761667992, 0.1005964238332008, 0.1005964238332008, 0.1005964238332008, 0.3994035761667992]
  real(rp), target :: tet_wg(11) = [-0.0131555555555556, 0.0076222222222222, 0.0076222222222222, 0.0076222222222222, 0.0076222222222222,&
                                     0.0248888888888889, 0.0248888888888889, 0.0248888888888889, 0.0248888888888889, 0.0248888888888889, 0.0248888888888889]

  real(rp), pointer ::  xg(:)
  real(rp), pointer ::  yg(:)
  real(rp), pointer ::  zg(:)
  real(rp), pointer ::  wg(:)

  integer(ip) :: num_dim, num_gp
  real(rp), pointer :: points_in_quadrature(:,:)
  real(rp), pointer :: weights_in_quadrature(:)

  call this%free_reference_subelem()

  ! Now the quadrature of the sub-element is hard-codded in this procedure
  ! TODO: Use fempar's quadrature generators instead
  num_dim = this%get_num_dimensions()
  if (num_dim == 2) then
    xg => tri_xg
    yg => tri_yg
    zg => tri_zg
    wg => tri_wg
  else if (num_dim == 3) then
    xg => tet_xg
    yg => tet_yg
    zg => tet_zg
    wg => tet_wg
  else
    check(.false.)
  end if
  num_gp  = size(wg)

  ! Create and fill the quadrature
  call this%quadrature_subelem%create( num_dim, num_gp )
  points_in_quadrature  => this%quadrature_subelem%get_coordinates()
  weights_in_quadrature => this%quadrature_subelem%get_weights()
  points_in_quadrature(1,:) = xg(:)
  points_in_quadrature(2,:) = yg(:)
  points_in_quadrature(3,:) = zg(:)
  weights_in_quadrature(:)  = wg(:)

  ! Create the reference sub-element
  ! TODO a better way to create a reference element?
  ! TODO we assume that the sub-element is always either a triangle or a tetrahedron
  ! TODO We assume also order 1
  call this%reference_subelem%create( topology = topology_tet,&
                                      number_dimensions = num_dim,&
                                      order = 1,&
                                      field_type = field_type_scalar,&
                                      continuity = .false. )

 ! Create the fe map
 call this%fe_map_subelem%create( this%quadrature_subelem, this%reference_subelem )

end subroutine serial_unfitted_fe_space_init_reference_subelem

!-----------------------------------------------------------------------------------------------------

subroutine serial_unfitted_fe_space_free_reference_subelem( this )
  implicit none
  class(serial_unfitted_fe_space_t), intent(inout) :: this
  call this%fe_map_subelem%free()
  call this%reference_subelem%free()
  call this%quadrature_subelem%free()
end subroutine serial_unfitted_fe_space_free_reference_subelem

!-----------------------------------------------------------------------------------------------------

subroutine serial_unfitted_fe_space_init_cut_integration( this )
  implicit none
  class(serial_unfitted_fe_space_t), intent(inout) :: this
  call this%free_cut_integration()
  !TODO
end subroutine serial_unfitted_fe_space_init_cut_integration

!-----------------------------------------------------------------------------------------------------

subroutine serial_unfitted_fe_space_free_cut_integration( this )

  implicit none
  class(serial_unfitted_fe_space_t), intent(inout) :: this

  integer(ip) :: ind, istat

  if ( allocated(this%cut_quadratures) ) then
    do ind = 1,size(this%cut_quadratures)
      call this%cut_quadratures(ind)%free()
    end do
    deallocate( this%cut_quadratures, stat=istat ); check(istat==0_ip)
  end if

  if ( allocated(this%cut_fe_maps) ) then
    do ind = 1,size(this%cut_fe_maps)
      call this%cut_fe_maps(ind)%free()
    end do
    deallocate( this%cut_fe_maps, stat=istat ); check(istat==0_ip)
  end if

  if ( allocated(this%cut_vol_integrators) ) then
    do ind = 1,size(this%cut_vol_integrators)
      call this%cut_vol_integrators(ind)%free()
    end do
    deallocate( this%cut_vol_integrators, stat=istat ); check(istat==0_ip)
  end if

end subroutine serial_unfitted_fe_space_free_cut_integration
