! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

subroutine unfitted_cell_iterator_create ( this, lid, marching_cubes ) 
  implicit none
  class(unfitted_cell_iterator_t)   , intent(inout) :: this
  integer(ip)                       , intent(in)    :: lid
  class(marching_cubes_t), target, intent(in) :: marching_cubes
  call this%free()
  call this%current_cell_accessor%create(lid=lid, marching_cubes=marching_cubes )
end subroutine unfitted_cell_iterator_create

subroutine unfitted_cell_iterator_free ( this ) 
  implicit none
  class(unfitted_cell_iterator_t), intent(inout) :: this
  call this%current_cell_accessor%free()
end subroutine unfitted_cell_iterator_free

subroutine unfitted_cell_iterator_init ( this ) 
  implicit none
  class(unfitted_cell_iterator_t), intent(inout) :: this
  call this%current_cell_accessor%set_lid(lid=1)
end subroutine unfitted_cell_iterator_init

subroutine unfitted_cell_iterator_next ( this ) 
  implicit none
  class(unfitted_cell_iterator_t), intent(inout) :: this
  call this%current_cell_accessor%next()
end subroutine unfitted_cell_iterator_next

function unfitted_cell_iterator_has_finished ( this ) 
  implicit none
  class(unfitted_cell_iterator_t), intent(in) :: this
  logical :: unfitted_cell_iterator_has_finished
  unfitted_cell_iterator_has_finished = this%current_cell_accessor%past_the_end()
end function unfitted_cell_iterator_has_finished

subroutine unfitted_cell_iterator_current ( this, current ) 
  implicit none
  class(unfitted_cell_iterator_t), target, intent(in)    :: this
  type(unfitted_cell_accessor_t),          intent(inout) :: current
  current = this%current_cell_accessor
end subroutine unfitted_cell_iterator_current
