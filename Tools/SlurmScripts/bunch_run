#!/bin/bash

# This is just an example of the root script that triggers a bunch of SLURM jobs.
# You have to adapt/customize this script for your particular experiment. In 
# particular, you have to program as many nested loops below as parameters you
# want to evaluate. In this case, we are evaluating: 
#   (OUTER LOOP) the number of subdomains per space dimension, i.e., the subdomain grid
#   (INNER LOOP) # of hexahedra per space dimension, per subdomain 

script_dir=$(dirname ${BASH_SOURCE[0]})
threads_per_task=1        # 48 must be divisible by this number. Alters MPI tasks per node if more than one thread is used per MPI task
coarse_tasks=1            # only 0 or 1 possible. If 1, then an additional MPI task is spawn and mapped to a separate node
threads_last_task=48
max_wall_time=20          # max wall clock time in minutes
name=poisson

lst_k="1 2"              # OUTER LOOP VALUES TO BE TESTED 
lst_one_h_local="10 20"  # INNER LOOP VALUES TO BE TESTED

if [ $((48%$threads_per_task)) != 0 ]
then
  echo "48 must be divisible by the value of ENV variable threads_per_task ($threads_per_task)"
  exit
fi 
if [ $threads_per_task -lt 1 -o $threads_per_task -gt 48 ]
then
  echo "threads_per_task ($threads_per_task) must be within the range [1,48]"
  exit
fi 

for k in $lst_k; do
   NPARTX=$((4*$k))
   NPARTY=$((4*$k))
   NPARTZ=$((3*$k))

   tasks=$((48*$k+$coarse_tasks))
   nodes=$(($k*$threads_per_task+$coarse_tasks))
  
   for one_h_loc in $lst_one_h_local; do 
     NX=$(($one_h_loc*$k))
     NY=$(($NX*4))
     NZ=$(($NX*3))
     NX=$(($NX*4))
     identifier="$name"_"$NX"_"$NY"_"$NZ"_"$NPARTX"_"$NPARTY"_"$NPARTZ"

     cat $script_dir/parametrized_command_template | sed "s:NX:$NX:g" | sed "s:NY:$NY:g" | sed "s:NZ:$NZ:g" | sed "s:NPARTX:$NPARTX:g" | sed "s:NPARTY:$NPARTY:g" | sed "s:NPARTZ:$NPARTZ:g"  > $script_dir/command_template
     command="$script_dir/run -i $identifier -n $nodes -t $tasks --num_threads_per_task $threads_per_task  --num_threads_last_task $threads_last_task -w $max_wall_time"
     echo $command
     eval $command
   done
done
