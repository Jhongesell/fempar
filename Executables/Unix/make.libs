# Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
#
# This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
#
# FEMPAR is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# FEMPAR is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
#
# Additional permission under GNU GPL version 3 section 7
#
# If you modify this Program, or any covered work, by linking or combining it 
# with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
# and/or the HSL Mathematical Software Library (or a modified version of them), 
# containing parts covered by the terms of their respective licenses, the
# licensors of this Program grant you additional permission to convey the 
# resulting work. 
#
###############################################################################
#=======================================================================
# COMPILER OPTIONS and SYSTEM definitions:  
#=======================================================================
OPT_FILE=make.opt
SYS_FILE=make.sys
#-----------------------------------------------------------------------
#
# OPT_FILE contains the options used to build versions debug(G) and release(O)
# for each compiler. It also contains the option to define where to look for 
# include files ($I) and where to put fortran module files ($J).
#
# SYS_FILE contains variables defining external libraries used by Fempar
# and their location. These libraries are: BLAS, MKL, GIDPOST, METIS4,
# METIS5, ZOLTAN, PARMETIS, PTSCOTCH, WSMP, HSL_MI20, HSL_MA87 and TRILINOS.
# For each library two environment variables are needed: ENABLE_* and *_ROOT
# (e.g. ENABLE_MKL and MKL_ROOT). The final location also depends on whether
# threaded support is enabled or not, which is controlled by FEMPAR_THREADS.
#
# Make usage below:
# wildcard returns a space-separated list of the names of existing files 
# that match the pattern (OPT_FILE and SYS_FILE in this case) and strip 
# removes leading and trailing whitespaces from string and replaces each 
# internal sequence of one or more whitespace characters with a single space.
#-----------------------------------------------------------------------
ifneq ($(strip $(wildcard $(OPT_FILE))),)
include $(OPT_FILE)
else
STATUS=ERROR
endif
#
ifneq ($(strip $(wildcard $(SYS_FILE))),)
include $(SYS_FILE)
else
STATUS=ERROR
endif
#
#-----------------------------------------------------------------------
# Program libraries are defined here
#-----------------------------------------------------------------------
#
O=$(COMPILER)/Objects_$(V)
INC=-$I../../Sources/Generic -$I$O $(MKL_MOD) $(HSL_MI20_MOD) $(HSL_MA87_MOD)
MOD=-$J$O
#
#-----------------------------------------------------------------------
ifeq ($(NAME),fem)
  SOURCE=../../Sources/Fem
  INCLUDES=../../Sources
  FCOMP=$(FC_SER) $(ENABLE_BLAS) $(ENABLE_LAPACK) $(ENABLE_MKL) $(ENABLE_GIDPOST) $(ENABLE_METIS5) $(ENABLE_METIS4) $(ENABLE_WSMP) $(ENABLE_HSL_MI20) $(ENABLE_HSL_MA87) $(ENABLE_P4EST) $(ENABLE_UMFPACK)
endif
#
#-----------------------------------------------------------------------
ifeq ($(NAME),par)
  SOURCE=../../Sources/Par
  INCLUDES=../../Sources
  DEPSG = $(COMPILER)/libfem_g.a  
  DEPSO = $(COMPILER)/libfem_O.a  
  DEPSP = $(COMPILER)/libfem_p.a 
  FCOMP=$(FC_PAR) $(ENABLE_BLAS) $(ENABLE_LAPACK) $(ENABLE_MKL) $(ENABLE_GIDPOST) $(ENABLE_METIS5) $(ENABLE_METIS4) $(ENABLE_ZOLTAN) $(ENABLE_WSMP) $(ENABLE_HSL_MI20) $(ENABLE_HSL_MA87) $(ENABLE_TRILINOS) $(ENABLE_P4EST) $(ENABLE_UMFPACK)
endif
#
#-----------------------------------------------------------------------
ifeq ($(NAME),prob)
  SOURCE=../../Sources/Prob
  INCLUDES=../../Sources
  DEPSG = $(COMPILER)/libfem_g.a  
  DEPSO = $(COMPILER)/libfem_O.a  
  DEPSP = $(COMPILER)/libfem_p.a 
  FCOMP=$(FC_SER) $(ENABLE_BLAS) $(ENABLE_LAPACK) $(ENABLE_MKL) 
endif
#
#-----------------------------------------------------------------------
AUX_FILE=$(NAME)
DEP_FILE=$(AUX_FILE).dep
OBJ_FILE=$(AUX_FILE).obj
STATUS=OK
#
#-----------------------------------------------------------------------
# An automatically generated list of objects is included here, in OBJ_FILE
# which is generated by configuref90 and contains
#
# SOURCE_DIRS list of directories for search source files
# INC_DIRS    list of directories for search include files
# OFILES      list of compiled files required to generated executable 
#
ifneq ($(strip $(wildcard $(OBJ_FILE))),)
include $(OBJ_FILE)
endif
#
vpath %f ${SOURCE_DIRS}
vpath %f90 ${SOURCE_DIRS}
#
# An automatically generated  list of dependencies (also generated by
# configuref90) is included here, in DEP_FILE
#
ifneq ($(strip $(wildcard $(DEP_FILE))),)
include $(DEP_FILE)
endif

#=======================================================================
# USER accesible rules to build libraries and programs
#-----------------------------------------------------------------------
# Building rules (rules not involving any file should be declared as phony)
.PHONY: default all 
.PHONY: debug   debug_serial  debug_par 
.PHONY: release release_serial release_par

default: debug

all: debug release

debug: debug_serial debug_par
debug_serial: fem.obj prob.obj fem.dep prob.dep
	@echo '---------------->>> BUILDING LIBS (DEBUG SERIAL)   <<<-------------'
	@mkdir -p $(COMPILER)/Objects_g
	@make --no-print-directory -f make.libs NAME=fem "V=g" "FFLAGS=$(FMG) $(FFG)" $(COMPILER)/libfem_g.a
	@echo '-------------------------------------------------------------------'
	@make --no-print-directory -f make.libs NAME=prob "V=g" "FFLAGS=$(FMG) $(FFG)" $(COMPILER)/libprob_g.a
	@echo '-------------------------------------------------------------------'
	@echo '---------------->>> LIBS (DEBUG SERIAL) READY      <<<-------------'
debug_par:  par.obj par.dep
	@echo '---------------->>> BUILDING LIBS (DEBUG PAR)      <<<-------------'
	@make --no-print-directory -f make.libs NAME=par "V=g" "FFLAGS=$(FMG) $(FFG)" $(COMPILER)/libpar_g.a
	@echo '-------------------------------------------------------------------'
	@echo '---------------->>> LIBS (DEBUG PAR) READY         <<<-------------'

release: release_serial release_par
release_serial:  fem.obj prob.obj fem.dep prob.dep
	@echo '---------------->>> BUILDING LIBS (RELEASE SERIAL) <<<-------------'
	@mkdir -p $(COMPILER)/Objects_O
	@make --no-print-directory -f make.libs NAME=fem  "V=O" "FFLAGS=$(FFO)" $(COMPILER)/libfem_O.a
	@echo '-------------------------------------------------------------------'
	@make --no-print-directory -f make.libs NAME=prob "V=O" "FFLAGS=$(FFO)" $(COMPILER)/libprob_O.a
	@echo '-------------------------------------------------------------------'
	@echo '---------------->>> LIBS (RELEASE SERIAL) READY    <<<-------------'
release_par: par.obj par.dep
	@echo '---------------->>> BUILDING LIBS (RELEASE PAR)    <<<-------------'
	@make --no-print-directory -f make.libs NAME=par  "V=O" "FFLAGS=$(FFO)" $(COMPILER)/libpar_O.a
	@echo '-------------------------------------------------------------------'
	@echo '---------------->>> LIBS (RELEASE PAR) READY       <<<-------------'

#-----------------------------------------------------------------------
# Cleaning rules
.PHONY: clean clean_all 
.PHONY: clean_debug   clean_debug_serial   clean_debug_par   
.PHONY: clean_release clean_release_serial clean_release_par
.PHONY: clean_lib

clean: clean_debug

clean_all: clean_debug clean_release
	@rm -rf fem.obj par.obj prob.obj fem.dep par.dep prob.dep

clean_debug: clean_debug_serial clean_debug_par
clean_debug_serial: fem.obj prob.obj fem.dep prob.dep
	@echo '---------------->>> CLEANING LIBS (DEBUG) <<<----------------'
	@make --no-print-directory -f make.libs  NAME=fem  "V=g" clean_lib
	@make --no-print-directory -f make.libs  NAME=prob "V=g" clean_lib
clean_debug_par: par.obj par.dep
	@make --no-print-directory -f make.libs  NAME=par  "V=g" clean_lib

clean_release: clean_release_serial clean_release_par
clean_release_serial: fem.obj prob.obj fem.dep prob.dep
	@echo '---------------->>> CLEANING LIBS (RELEASE) <<<----------------'
	@make --no-print-directory -f make.libs  NAME=fem  "V=O" clean_lib
	@make --no-print-directory -f make.libs  NAME=prob "V=O" clean_lib
clean_release_par: par.obj par.dep
	@make --no-print-directory -f make.libs  NAME=par  "V=O" clean_lib

clean_lib:
	@rm -f $(OFILES)
	@rm -f $(MODULES)
	@rm -f $(COMPILER)/lib$(NAME)_$V.a

#-----------------------------------------------------------------------
# Config rules
.PHONY: config config_serial config_par newfile
config: config_serial config_par
config_serial: fem.obj prob.obj fem.dep prob.dep
config_par: par.obj par.dep
newfile:
	@rm -rf fem.obj prob.obj fem.dep prob.dep  par.obj par.dep

#=======================================================================
# GENERIC rules
#-----------------------------------------------------------------------
# Generic configuration rules
%.obj:
	@make --no-print-directory -f make.libs NAME=${basename $@} cfg

%.dep:
	@make --no-print-directory -f make.libs NAME=${basename $@} cfg

cfg:
#	@echo $(ENABLED)
#	@echo $(MACROS)
	configuref90 $(AUX_FILE) --srcdir=$(SOURCE) --incdir=$(INCLUDES) --macros=$(strip $(MACROS)) --objdir='$$O' #--graph

#-----------------------------------------------------------------------
# Generic archives rules
$(COMPILER)/lib$(NAME)_g.a: $(OFILES) $(DEPSG)
	$(ARCH) $(COMPILER)/lib$(NAME)_g.a $(OFILES)

$(COMPILER)/lib$(NAME)_O.a: $(OFILES) $(DEPSO)
	$(ARCH) $(COMPILER)/lib$(NAME)_O.a $(OFILES)

$(COMPILER)/lib$(NAME)_p.a: $(OFILES) $(DEPSP)
	$(ARCH) $(COMPILER)/lib$(NAME)_p.a $(OFILES)

#-----------------------------------------------------------------------
# Generic objects (compilation) rules
$O/%.o: %.f90
	$(FCOMP) $(FFLAGS) $(INC) $(MOD) -o $@ $<
	@if [ -e $(NAME).opt.log ]; then mv $(NAME).opt.log $@.opt.log; fi

$O/%.o: %.f
	$(FCOMP) $(FFLAGS) $(INC) $(MOD) -o $@ $<
	@if [ -e $(NAME).opt.log ]; then mv $(NAME).opt.log $@.opt.log; fi

