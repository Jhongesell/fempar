# Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
#
# This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
#
# FEMPAR is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# FEMPAR is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
#
# Additional permission under GNU GPL version 3 section 7
#
# If you modify this Program, or any covered work, by linking or combining it 
# with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
# and/or the HSL Mathematical Software Library (or a modified version of them), 
# containing parts covered by the terms of their respective licenses, the
# licensors of this Program grant you additional permission to convey the 
# resulting work. 
#
###############################################################################
#=======================================================================
# COMPILER OPTIONS, SYSTEM and USER definitions:  
#=======================================================================
OPT_FILE=make.opt
SYS_FILE=make.sys
DRIVERS_FILE=drivers.$(FEMPAR_USER)
#-----------------------------------------------------------------------
#
# OPT_FILE contains the options used to build versions debug(G) and release(O)
# for each compiler. It also contains the option to define where to look for 
# include files ($I) and where to put fortran module files ($J).
#
# SYS_FILE contains variables defining external libraries used by Fempar
# and their location. These libraries are: BLAS, MKL, GIDPOST, METIS4,
# METIS5, ZOLTAN, PARMETIS, PTSCOTCH, WSMP, HSL_MI20, HSL_MA87 and TRILINOS.
# For each library two environment variables are needed: ENABLE_* and *_ROOT
# (e.g. ENABLE_MKL and MKL_ROOT). The final location also depends on whether
# threaded support is enabled or not, which is controlled by FEMPAR_THREADS.
#
# DRIVERS_FILE contains the lists of drivers to be compiled by this makefile.
# They must match those defined in ../../Sources/Drivers/$(FEMPAR_USER)
#
# Make usage below:
# wildcard returns a space-separated list of the names of existing files 
# that match the pattern (OPT_FILE and SYS_FILE in this case) and strip 
# removes leading and trailing whitespaces from string and replaces each 
# internal sequence of one or more whitespace characters with a single space.
#-----------------------------------------------------------------------
ifneq ($(strip $(wildcard $(OPT_FILE))),)
include $(OPT_FILE)
else
STATUS=ERROR
endif
#
ifneq ($(strip $(wildcard $(SYS_FILE))),)
include $(SYS_FILE)
else
STATUS=ERROR
endif
#
ifneq ($(strip $(wildcard $(DRIVERS_FILE))),)
include $(DRIVERS_FILE)
else
STATUS=ERROR
endif
#
#=======================================================================
# Definitions
#=======================================================================
#
# The following lines depend on environment variables and variables defined
# in OPT_FILE (and do not need to be changed)
O=$(COMPILER)/Objects_$(V)
INC=-$I$O
MOD=-$J$O
MAIN=$(NAME)
#
#-----------------------------------------------------------------------
# Define directories to search sources, modules and includes
SOURCE=../../Sources/Drivers/$(FEMPAR_USER)
MODULES=../../Sources/Drivers/support
INCLUDES=../../Sources
#
#-----------------------------------------------------------------------
# The drivers that will be compiled are defined in the file DRIVERS_FILE
#
FEM_PROB_DRIVERS_CONFIG=${addsuffix .obj,$(FEM_PROB_DRIVERS)} ${addsuffix .dep,$(FEM_PROB_DRIVERS)} 
FEM_DRIVERS_CONFIG     =${addsuffix .obj,$(FEM_DRIVERS)}      ${addsuffix .dep,$(FEM_DRIVERS)} 
PAR_PROB_DRIVERS_CONFIG=${addsuffix .obj,$(PAR_PROB_DRIVERS)} ${addsuffix .dep,$(PAR_PROB_DRIVERS)} 
#
#-----------------------------------------------------------------------
# Define libraries used for each driver type
#
#
ifeq ($(TYPE),fem_prob_driver)
  DEPSG+= $(COMPILER)/libfem_g.a $(COMPILER)/libprob_g.a
  DEPSO+= $(COMPILER)/libfem_O.a $(COMPILER)/libprob_O.a
  #LIB_DIR = -L$(COMPILER) $(BLAS_DIR) $(MKL_DIR) $(GIDPOST_DIR) $(METIS_DIR) $(WSMP_DIR) $(HSL_MI20_DIR) $(HSL_MA87_DIR) $(P4EST_DIR) $(P4EST_WRAPPER_DIR) $(UMFPACK_DIR)
  LIB_DIR = -L$(COMPILER) $(BLAS_DIR) $(MKL_DIR) $(GIDPOST_DIR) $(METIS_DIR) $(WSMP_DIR) $(HSL_MI20_DIR) $(HSL_MA87_DIR) $(UMFPACK_DIR)
  #LIBSG   = $(LIB_DIR) -lprob_g -lfem_g $(WSMP_LIB) $(HSL_MI20_LIB) $(HSL_MA87_LIB) $(METIS_LIB) $(GIDPOST_LIB) $(MKL_LIB) $(BLAS_LIB) $(P4EST_LIB) $(P4EST_WRAPPER_LIB) $(UMFPACK_LIB)
  LIBSG   = $(LIB_DIR) -lprob_g -lfem_g $(WSMP_LIB) $(HSL_MI20_LIB) $(HSL_MA87_LIB) $(METIS_LIB) $(GIDPOST_LIB) $(MKL_LIB) $(BLAS_LIB) $(UMFPACK_LIB)
  #LIBSO   = $(LIB_DIR) -lprob_O -lfem_O $(WSMP_LIB) $(HSL_MI20_LIB) $(HSL_MA87_LIB) $(METIS_LIB) $(GIDPOST_LIB) $(MKL_LIB) $(BLAS_LIB) $(P4EST_LIB) $(P4EST_WRAPPER_LIB) $(UMFPACK_LIB) 
  LIBSO   = $(LIB_DIR) -lprob_O -lfem_O $(WSMP_LIB) $(HSL_MI20_LIB) $(HSL_MA87_LIB) $(METIS_LIB) $(GIDPOST_LIB) $(MKL_LIB) $(BLAS_LIB) $(UMFPACK_LIB) 
  FCOMP=$(FC_SER) 
  LINK=$(LINK_SER)
  INC=-$I../../Sources/Generic -$I$O $(MKL_MOD) $(HSL_MI20_MOD) $(HSL_MA87_MOD)
endif
#
#-----------------------------------------------------------------------
#
ifeq ($(TYPE),fem_driver)
  DEPSG+= $(COMPILER)/libfem_g.a
  DEPSO+= $(COMPILER)/libfem_O.a
  LIB_DIR = -L$(COMPILER) $(BLAS_DIR) $(MKL_DIR) $(GIDPOST_DIR) $(METIS_DIR) $(WSMP_DIR) $(HSL_MI20_DIR) $(HSL_MA87_DIR) $(UMFPACK_DIR)
  LIBSG   = $(LIB_DIR) -lfem_g $(WSMP_LIB) $(HSL_MI20_LIB) $(HSL_MA87_LIB) $(METIS_LIB) $(GIDPOST_LIB) $(MKL_LIB) $(BLAS_LIB) $(UMFPACK_LIB)
  LIBSO   = $(LIB_DIR) -lfem_O $(WSMP_LIB) $(HSL_MI20_LIB) $(HSL_MA87_LIB) $(METIS_LIB) $(GIDPOST_LIB) $(MKL_LIB) $(BLAS_LIB) $(UMFPACK_LIB)
  FCOMP=$(FC_SER) 
  LINK=$(LINK_SER)
  INC=-$I../../Sources/Generic -$I$O $(MKL_MOD) $(HSL_MI20_MOD) $(HSL_MA87_MOD)
endif
#
#-----------------------------------------------------------------------
#
ifeq ($(TYPE),par_prob_driver)
  DEPSG+= $(COMPILER)/libpar_g.a $(COMPILER)/libfem_g.a $(COMPILER)/libprob_g.a 
  DEPSO+= $(COMPILER)/libpar_O.a $(COMPILER)/libfem_O.a $(COMPILER)/libprob_O.a 
  LIB_DIR = -L$(COMPILER) $(BLAS_DIR) $(MKL_DIR) $(GIDPOST_DIR) $(METIS_DIR) $(ZOLTAN_DIR) $(WSMP_DIR) $(HSL_MI20_DIR) $(HSL_MA87_DIR) $(TRILINOS_DIR) $(P4EST_DIR) $(P4EST_WRAPPER_DIR) $(UMFPACK_DIR)
  LIBSG = $(LIB_DIR) -lprob_g -lpar_g -lfem_g $(TRILINOS_LIB) $(WSMP_LIB) $(HSL_MI20_LIB) $(HSL_MA87_LIB) $(ZOLTAN_LIB) $(METIS_LIB) $(GIDPOST_LIB) $(MKL_LIB) $(BLAS_LIB) $(P4EST_LIB) $(P4EST_WRAPPER_LIB) $(UMFPACK_LIB)
  LIBSO = $(LIB_DIR) -lprob_O -lpar_O -lfem_O $(TRILINOS_LIB) $(WSMP_LIB) $(HSL_MI20_LIB) $(HSL_MA87_LIB) $(ZOLTAN_LIB) $(METIS_LIB) $(GIDPOST_LIB) $(MKL_LIB) $(BLAS_LIB) $(P4EST_LIB) $(P4EST_WRAPPER_LIB) $(UMFPACK_LIB)
  FCOMP=$(FC_PAR)
  LINK=$(LINK_PAR)
  INC=-$I../../Sources/Generic -$I$O $(MKL_MOD) $(HSL_MI20_MOD) $(HSL_MA87_MOD)
endif
#
#-----------------------------------------------------------------------
AUX_FILE=$(NAME)
DEP_FILE=$(AUX_FILE).dep
OBJ_FILE=$(AUX_FILE).obj
#
#-----------------------------------------------------------------------
# An automatically generated list of objects is included here, in OBJ_FILE
# which is generated by configuref90 and contains
#
# SOURCE_DIRS list of directories for search source files
# INC_DIRS    list of directories for search include files
# OFILES      list of compiled files required to generated executable 
#
ifneq ($(strip $(wildcard $(OBJ_FILE))),)
include $(OBJ_FILE)
else
STATUS=ERROR
endif
#
vpath %f ${SOURCE_DIRS}
vpath %f90 ${SOURCE_DIRS}
#
# An automatically generated  list of dependencies (also generated by
# configuref90) is included here, in DEP_FILE
#
ifneq ($(strip $(wildcard $(DEP_FILE))),)
include $(DEP_FILE)
else
STATUS=ERROR
endif
#
STATUS=OK
#=======================================================================
# USER accesible rules to build libraries and programs
#-----------------------------------------------------------------------
# Building rules (rules not involving any file should be declared as phony)
.PHONY: default all 
.PHONY: debug   debug_serial  debug_par 
.PHONY: release release_serial release_par

default: debug

all: debug release

debug: debug_serial debug_par
debug_serial: $(FEM_DRIVERS_CONFIG) $(FEM_PROB_DRIVERS_CONFIG)
	@echo '---------------->>> BUILDING DRIVERS (DEBUG SERIAL)   <<<-------------'
	@mkdir -p $(COMPILER)
	@mkdir -p $(COMPILER)/Objects_g
	@for i in $(FEM_PROB_DRIVERS); do make --no-print-directory -f make.drivers NAME=$$i TYPE=fem_prob_driver "V=g" "FFLAGS=$(FMG) $(FFG)" $(COMPILER)/$$i.g ; done 
	@for i in $(FEM_DRIVERS)     ; do make --no-print-directory -f make.drivers NAME=$$i TYPE=fem_driver      "V=g" "FFLAGS=$(FMG) $(FFG)" $(COMPILER)/$$i.g ; done 
	@echo '----------------------------------------------------------------------'
	@echo '---------------->>> DRIVERS (DEBUG SERIAL) READY      <<<-------------'
debug_par:  $(PAR_PROB_DRIVERS_CONFIG)
	@echo '---------------->>> BUILDING DRIVERS (DEBUG PAR)      <<<-------------'
	@for i in $(PAR_PROB_DRIVERS); do make --no-print-directory -f make.drivers NAME=$$i TYPE=par_prob_driver "V=g" "FFLAGS=$(FMG) $(FFG)" $(COMPILER)/$$i.g ; done 
	@echo '----------------------------------------------------------------------'
	@echo '---------------->>> DRIVERS (DEBUG PAR) READY         <<<-------------'

release: release_serial release_par
release_serial: $(FEM_DRIVERS_CONFIG) $(FEM_PROB_DRIVERS_CONFIG)
	@echo '---------------->>> BUILDING DRIVERS (RELEASE SERIAL) <<<-------------'
	@mkdir -p $(COMPILER)/Objects_O
	@for i in $(FEM_PROB_DRIVERS); do make --no-print-directory -f make.drivers NAME=$$i TYPE=fem_prob_driver "V=O" "FFLAGS=$(FFO)" $(COMPILER)/$$i.O ; done 
	@for i in $(FEM_DRIVERS)     ; do make --no-print-directory -f make.drivers NAME=$$i TYPE=fem_driver "V=O" "FFLAGS=$(FFO)" $(COMPILER)/$$i.O ; done 
	@echo '----------------------------------------------------------------------'
	@echo '---------------->>> DRIVERS (RELEASE SERIAL) READY    <<<-------------'
release_par:  $(PAR_PROB_DRIVERS_CONFIG)
	@echo '---------------->>> BUILDING DRIVERS (RELEASE PAR)    <<<-------------'
	@for i in $(PAR_PROB_DRIVERS); do make --no-print-directory -f make.drivers NAME=$$i TYPE=par_prob_driver "V=O" "FFLAGS=$(FFO)" $(COMPILER)/$$i.O ; done 
	@echo '----------------------------------------------------------------------'
	@echo '---------------->>> DRIVERS (RELEASE PAR) READY       <<<-------------'

#-----------------------------------------------------------------------
# Cleaning rules
.PHONY: clean clean_all 
.PHONY: clean_debug   clean_debug_serial   clean_debug_par   
.PHONY: clean_release clean_release_serial clean_release_par
.PHONY: clean_exe

clean: clean_debug

clean_all: clean_debug clean_release newfile

clean_debug: clean_debug_serial clean_debug_par
clean_debug_serial: $(FEM_DRIVERS_CONFIG) $(FEM_PROB_DRIVERS_CONFIG)
	@echo '---------------->>> CLEANING DRIVERS (DEBUG) <<<----------------'
	@for i in $(FEM_PROB_DRIVERS); do make --no-print-directory -f make.drivers NAME=$$i "V=g" clean_exe; done
	@for i in $(FEM_DRIVERS)     ; do make --no-print-directory -f make.drivers NAME=$$i "V=g" clean_exe; done
clean_debug_par: $(PAR_PROB_DRIVERS_CONFIG)
	@for i in $(PAR_PROB_DRIVERS); do make --no-print-directory -f make.drivers NAME=$$i "V=g" clean_exe; done 

clean_release: clean_release_serial clean_release_par
clean_release_serial: $(FEM_DRIVERS_CONFIG) $(FEM_PROB_DRIVERS_CONFIG)
	@echo '---------------->>> CLEANING DRIVERS (RELEASE) <<<----------------'
	@for i in $(FEM_PROB_DRIVERS); do make --no-print-directory -f make.drivers NAME=$$i "V=O" clean_exe; done
	@for i in $(FEM_DRIVERS)     ; do make --no-print-directory -f make.drivers NAME=$$i "V=O" clean_exe; done
clean_release_par:  $(PAR_PROB_DRIVERS_CONFIG)
	@for i in $(PAR_PROB_DRIVERS); do make --no-print-directory -f make.drivers NAME=$$i "V=O" clean_exe; done 

clean_exe:
	@rm -f $(OFILES)
	@rm -f $(MODULES)
	@rm -f $(COMPILER)/$(NAME).$V

#-----------------------------------------------------------------------
# Config rules
.PHONY: config config_serial config_par newfile

config: config_serial config_par

config_serial: $(FEM_DRIVERS_CONFIG) $(FEM_PROB_DRIVERS_CONFIG)

config_par: $(PAR_PROB_DRIVERS_CONFIG)

newfile:
	@rm -rf $(FEM_DRIVERS_CONFIG) $(FEM_PROB_DRIVERS_CONFIG) $(PAR_PROB_DRIVERS_CONFIG)

#=======================================================================
# GENERIC rules
#-----------------------------------------------------------------------
# Generic configuration rules
%.obj:
	configuref90 ${basename $@} --srcdir=$(SOURCE) --moddir=$(MODULES) --macros=$(MACROS) --check=${basename $@} --objdir='$$O'
%.dep:
	configuref90 ${basename $@} --srcdir=$(SOURCE) --moddir=$(MODULES) --macros=$(MACROS) --check=${basename $@} --objdir='$$O'

#-----------------------------------------------------------------------
# Generic executables rules
$(COMPILER)/$(NAME).g: $(OFILES) $(DEPSG)
	$(LINK) $(LFG) $(OMP) -o $(COMPILER)/$(NAME).g $(OFILES) $(LIBSG)

$(COMPILER)/$(NAME).O: $(OFILES) $(DEPSO)
	$(LINK) $(LFO) $(OMP) -o $(COMPILER)/$(NAME).O $(OFILES) $(LIBSO)

$(COMPILER)/$(NAME).p: $(OFILES) $(DEPSP)
	$(LINK) $(LFP) $(OMP) -o $(COMPILER)/$(NAME).p $(OFILES) $(LIBSP)

#-----------------------------------------------------------------------
# Generic objects (compilation) rules
$O/%.o: %.f90
	$(FCOMP) $(FFLAGS) $(INC) $(MOD) -o $@ $<
	@if [ -e $(NAME).opt.log ]; then mv $(NAME).opt.log $@.opt.log; fi

$O/%.o: %.f
	$(FCOMP) $(FFLAGS) $(INC) $(MOD) -o $@ $<
	@if [ -e $(NAME).opt.log ]; then mv $(NAME).opt.log $@.opt.log; fi
